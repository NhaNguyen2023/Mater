---
title: "Radiology_DivePort"
output: html_document
date: "2024-03-19"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

## Data Source: Mater Dive Port 7
# Load library package
```{r load working space, echo=FALSE}
## Load working environment
rm(list = ls())
print(getwd())
setwd("C:/Users/User/Documents/RStudio/RadiologyDivePort")
print(getwd())

#library(dataQualityR) #package is not available for this version of R
library(stringr)
library(readr)
library(readxl)
library(tidyverse) #table (frequency and proportion), install.packages("tidyverse")
library(tidyr) # CrossTable
library(dplyr) # CrossTable, ggplot
library(ggplot2)
library(ggthemes)
library(qcc) #control charts
library(qicharts) #run chart, control charts
library(sqldf)
# library(Rcmdr)  #continuous var, numSummary function, install.packages("Rcmdr") ##not running if in hurry
library(gridExtra)  #graph

library(Hmisc)  #Imputate missing values
#library(DMwR) #Compute the accuracy of imputation, but need to install the other packages

library(psych) #install, describeBy
library(moments)  #skewness,kurtosis
library(plyr)   #categorical var, install.packages("plyr")
library(pastecs) #stat.desc
library(semTools)
library(car)  #leveneTest, Scatterplot matrix

library(dunn.test) #install, non-parametric post-hoc test after Kruskal-Wallis
library(stats)  #multiple regression lm() function, lapply function
library(PerformanceAnalytics) #chart.Correlation (Scatterplot)

library(caret) #classification & regression training, confusionMatrix, varImp
library(rbenchmark) #plogis
library(rcompanion) #nagelkerke
library(regclass) #vif
# library(C50)
library(AppliedPredictiveModeling) #Scatterplot, install.packages('AppliedPredictiveModeling')
library(rpart)
library(rpart.plot)
library(pROC)  #cross validation
library(gmodels)  #Evaluate the model, CrossTable correlation, install.packages("gmodels")
library(epiDisplay) #plot with AUC for model prediction
library(survey) #comparing models, regTermTest
library(rattle)
library(RColorBrewer)
```

# Load file & view

```{r load file, echo=TRUE}
# Scheduled data
file_path1_schd <- "Radiology scheduled details 2020-2021.xlsx"
sheet_name1_schd <- "Sheet1"
df1_schd <- read_excel(file_path1_schd, sheet = sheet_name1_schd)

file_path2_schd <- "Radiology scheduled details 2022-2024.xlsx"
sheet_name2_schd <- "Sheet1"
df2_schd <- read_excel(file_path2_schd, sheet = sheet_name2_schd)

main_schd <- merge(df1_schd, df2_schd, all=TRUE)


# All orders
file_path1_all <- "Orders Patient Details 2020.xlsx"
sheet_name1_all <- "Data"
df1_all <- read_excel(file_path1_all, sheet = sheet_name1_all)
# df1_all <- df1_all[-c(2),] #remove title rows
# names(df1_all) <- df1_all[c(1),]
#("subDept","orderStatus","orderDes","MRN","patientName","orderDate","schdDate","DOD","orderingConsultant","orderedBy","insuranceScheme","episodeType","mobileNo","medicalCardHolder","itemPriority","orderingSpecialtyDes","privateIndicator","schdMonthYear","orderMonthYear","schdTime","DOB","currentAgeDes","gender","presentPhoneNo","No.OrderItems","No.Pts","No.Episodes","orderToNow_daysAvg","No.OrderDes","orderToNow_daysMax","orderToNow_daysMin","futureBreach","orderingLocation","orderLocationGrp") #renaming variables

file_path2_all <- "Orders Patient Details 2021.xlsx"
sheet_name2_all <- "Data"
df2_all <- read_excel(file_path2_all, sheet = sheet_name2_all)

file_path3_all <- "Orders Patient Details 2022.xlsx"
sheet_name3_all <- "Data"
df3_all <- read_excel(file_path3_all, sheet = sheet_name3_all)

file_path4_all <- "Orders Patient Details 2023.xlsx"
sheet_name4_all <- "Data"
df4_all <- read_excel(file_path4_all, sheet = sheet_name4_all)

#merge multiple data frames, package library(tidyverse) is quicker for big data
df_list_all <- list(df1_all, df2_all, df3_all, df4_all)
main_all <- df_list_all %>% reduce(full_join)


# Completed orders
file_path1_cpt <- "patient details 2020.xlsx"
sheet_name1_cpt <- "Data"
df1_cpt <- read_excel(file_path1_cpt, sheet = sheet_name1_cpt)

file_path2_cpt <- "patient details 2021.xlsx"
sheet_name2_cpt <- "Data"
df2_cpt <- read_excel(file_path2_cpt, sheet = sheet_name2_cpt)

file_path3_cpt <- "patient details 2022.xlsx"
sheet_name3_cpt <- "Data"
df3_cpt <- read_excel(file_path3_cpt, sheet = sheet_name3_cpt)

file_path4_cpt <- "patient details 2023.xlsx"
sheet_name4_cpt <- "Data"
df4_cpt <- read_excel(file_path4_cpt, sheet = sheet_name4_cpt)

file_path5_cpt <- "patient details 2024.xlsx"
sheet_name5_cpt <- "Data"
df5_cpt <- read_excel(file_path5_cpt, sheet = sheet_name5_cpt)

#merge multiple data frames, package library(tidyverse) is quicker for big data
df_list_cpt <- list(df1_cpt, df2_cpt, df3_cpt, df4_cpt, df5_cpt)
main_cpt <- df_list_cpt %>% reduce(full_join)

main_schd <- subset(main_schd, year(main_schd$`Order Date`) < 2024)
main_cpt <- subset(main_cpt, year(main_cpt$`Order Date`) < 2024)
main_cpt <- subset(main_cpt, year(main_cpt$`Completed Date`) < 2024)

## View variable types
main_schd %>% glimpse() #glimpse from library(dplyr)

main_cpt %>% glimpse() #glimpse from library(dplyr)

main_all %>% glimpse() #glimpse from library(dplyr)
head(main_all,10)

#sample <- main %>% group_by(main$Record.Type)
#samplePatients <- sample_frac(main,0.1,replace = F)

## Remove NAs or impute NAs if necessary
allMissing = is.na(main_all)
counts = colSums(allMissing)
counts [counts>0]
# main <- na.omit(main)

print(is.data.frame(main_all))

```

# Transform some variables values
* Re-code values
* Calculate difference between variables

```{r transform values, echo=TRUE}
# All orders
## Variables description
### Category variables

sort(unique(main_all$`Sub Department`)) #3/15 values
sort(unique(main_all$`Ordering Specialty Description`)) #48 values
sort(unique(main_all$`Order Description`)) #recode values, 1000 values
sort(unique(main_all$`Order Status`)) #recode values #114 values
sort(unique(main_all$`Ordering Consultant`)) #505 values
# sort(unique(main_all$`Ordered by`)) #3173 values with no indication
sort(unique(main_all$`Insurance Scheme`)) #15 values
sort(unique(main_all$`Episode Type`)) #4 values
sort(unique(main_all$`Medical Card Holder`)) #2 values
sort(unique(main_all$`Item Priority`)) #6 values
sort(unique(main_all$`Private Indicator`)) #2 values
sort(unique(main_all$`Current Age Description`)) #1000 values with age calculation to years & months
sort(unique(main_all$Gender)) #3 values
sort(unique(main_all$`Ordering Location`)) #recode values, 1000 values
sort(unique(main_all$`Order Location Group`)) #10 values
sort(unique(main_all$`No Order Desc`)) #just one value (1)
sort(unique(main_all$`Future Breach`)) #4 values

### Numeric variables
summary(main_all$`Order Date`)
summary(main_all$`Schedule Date`)
summary(main_all$`No Order Items`)
summary(main_all$`No Patients`)
summary(main_all$`No Episodes`)
summary(main_all$`Order to now (days) Average`)
summary(main_all$`Order to now (days) Max`)
summary(main_all$`Order to now (days) Min`)

#### Ordering Location with 1000 values to 5 values -> identify by Order Location Group or if need in-depth analysis for Order Location Group
# main_all <- main_all %>%     #library(plyr)
#  mutate(orderLocation = case_when(
#   substring(main_all$`Ordering Location`,nchar(main_all$`Ordering Location`)-4 + 1,nchar(main_all$`Ordering Location`)) %in% "Ward" ~ "Ward",
#   substring(main_all$`Ordering Location`,nchar(main_all$`Ordering Location`)-10 + 1,nchar(main_all$`Ordering Location`)) %in% "OPD Clinic" ~ "OPD Clinic",
#   substring(main_all$`Ordering Location`,nchar(main_all$`Ordering Location`)-4 + 1,nchar(main_all$`Ordering Location`)) %in% "Dept" ~ "Emergency Dept",
#   substring(main_all$`Ordering Location`,nchar(main_all$`Ordering Location`)-14 + 1,nchar(main_all$`Ordering Location`)) %in% "ROOMS Referral" ~ "Rooms Referral",
#   substring(main_all$`Ordering Location`,nchar(main_all$`Ordering Location`)-4 + 1,nchar(main_all$`Ordering Location`)) %in% "Referral" ~ "Referral",
#   substring(main_all$`Ordering Location`,0,1) %in% c("G0","G1") ~ "Consultant Referral",
#   substring(main_all$`Ordering Location`,0,1) %in% c("H0") ~ "Public Hospital",
#   substring(main_all$`Ordering Location`,0,1) %in% c("H1") ~ "Private Hospital in Dublin",
#   substring(main_all$`Ordering Location`,0,1) %in% c("H9") ~ "Private Hospital outside Dublin",
#   TRUE ~ "Other"
# ))

### Date description
main_all$`Order Date` <- as.Date(main_all$`Order Date`, format="%d/%m/%Y")
main_all$orderDay <- weekdays(main_all$`Order Date`)
main_all$orderMonth <- format(as.Date(main_all$`Order Date`, format="%Y/%m/%d"),"%m")
main_all$orderYear <- format(as.Date(main_all$`Order Date`, format="%Y/%m/%d"),"%Y")
library(zoo)
main_all$orderMonthYear <- as.yearmon(paste(year(main_all$`Order Date`), month(main_all$`Order Date`)), "%Y %m") #change date from char format to numeric by using library(zoo)

main_all$`Schedule Date` <- as.Date(main_all$`Schedule Date`, format="%d/%m/%Y")
main_all$schdDay <- weekdays(main_all$`Schedule Date`)
main_all$schdMonth <- format(as.Date(main_all$`Schedule Date`, format="%Y/%m/%d"),"%m")
main_all$schdYear <- format(as.Date(main_all$`Schedule Date`, format="%Y/%m/%d"),"%Y")
main_all$schdMonthYear <- as.yearmon(paste(year(main_all$`Schedule Date`), month(main_all$`Schedule Date`)), "%Y %m") #change date from char format to numeric by using library(zoo)
main_all$schdTime <- ifelse(!main_all$`Schedule Time`==":", ifelse(substring(main_all$`Schedule Time`,0,2) <13, "am","pm"),main_all$`Schedule Time`)

main_all$daysDiff_orderSchd <- difftime(main_all$`Order Date`,main_all$`Schedule Date`,units="days")


main_schd$`Order Date` <- as.Date(main_schd$`Order Date`, format="%Y/%m/%d")
main_schd$orderDay <- weekdays(main_schd$`Order Date`)
main_schd$orderMonth <- format(as.Date(main_schd$`Order Date`, format="%Y/%m/%d"),"%m")
main_schd$orderYear <- format(as.Date(main_schd$`Order Date`, format="%Y/%m/%d"),"%Y")
main_schd$orderMonthYear <- as.yearmon(paste(year(main_schd$`Order Date`), month(main_schd$`Order Date`)), "%Y %m") #change date from char format to numeric by using library(zoo)

main_schd$`Schedule Date` <- as.Date(main_schd$`Schedule Date`, format="%Y/%m/%d")
main_schd$schdDay <- weekdays(main_schd$`Schedule Date`)
main_schd$schdMonth <- format(as.Date(main_schd$`Schedule Date`, format="%Y/%m/%d"),"%m")
main_schd$schdYear <- format(as.Date(main_schd$`Schedule Date`, format="%Y/%m/%d"),"%Y")
main_schd$schdMonthYear <- as.yearmon(paste(year(main_schd$`Schedule Date`), month(main_schd$`Schedule Date`)), "%Y %m") #change date from char format to numeric by using library(zoo)

main_schd$daysDiff_orderSchd <- difftime(main_schd$`Order Date`,main_schd$`Schedule Date`,units="days")


main_cpt$`Order Date` <- as.Date(main_cpt$`Order Date`, format="%Y/%m/%d")
main_cpt$orderDay <- weekdays(main_cpt$`Order Date`)
main_cpt$orderMonth <- format(as.Date(main_cpt$`Order Date`, format="%Y/%m/%d"),"%m")
main_cpt$orderYear <- format(as.Date(main_cpt$`Order Date`, format="%Y/%m/%d"),"%Y")
main_cpt$orderMonthYear <- as.yearmon(paste(year(main_cpt$`Order Date`), month(main_cpt$`Order Date`)), "%Y %m") #change date from char format to numeric by using library(zoo)

main_cpt$`Completed Date` <- as.Date(main_cpt$`Completed Date`, format="%Y/%m/%d")
main_cpt$cptDay <- weekdays(main_cpt$`Completed Date`)
main_cpt$cptMonth <- format(as.Date(main_cpt$`Completed Date`, format="%Y/%m/%d"),"%m")
main_cpt$cptYear <- format(as.Date(main_cpt$`Completed Date`, format="%Y/%m/%d"),"%Y")
main_cpt$cptMonthYear <- as.yearmon(paste(year(main_cpt$`Completed Date`), month(main_cpt$`Completed Date`)), "%Y %m") #change date from char format to numeric by using library(zoo)

main_cpt$`Result Date` <- as.Date(main_cpt$`Result Date`, format="%Y/%m/%d")
main_cpt$rstDay <- weekdays(main_cpt$`Result Date`)
main_cpt$rstMonth <- format(as.Date(main_cpt$`Result Date`, format="%Y/%m/%d"),"%m")
main_cpt$rstYear <- format(as.Date(main_cpt$`Result Date`, format="%Y/%m/%d"),"%Y")
main_cpt$rstMonthYear <- as.yearmon(paste(year(main_cpt$`Result Date`), month(main_cpt$`Result Date`)), "%Y %m")

main_cpt$daysDiff_orderCpt <- difftime(main_cpt$`Order Date`,main_cpt$`Completed Date`,units="days")
main_cpt$daysDiff_cptRst <- difftime(main_cpt$`Completed Date`,main_cpt$`Result Date`,units="days")
main_cpt$daysDiff_orderRst <- difftime(main_cpt$`Order Date`,main_cpt$`Result Date`,units="days")

# Scheduled orders
## Variables description
### Category variables
count_MRN_schd <- count(main_schd$`Medical Record Number`)
summary(count_MRN_schd)
sort(unique(main_schd$`Ordering Consultant`))
sort(unique(main_schd$`Order Description`),decreasing = T) #recode values
sort(unique(main_schd$`Episode Type`))
sort(unique(main_schd$`Order Status`)) #recode values
sort(unique(main_schd$`Order to now (months) group`))

### Numeric variables
summary(main_schd$`Order Date`)
summary(main_schd$`Schedule Date`)
summary(main_schd$`No Order Items`)
summary(main_schd$`No Patients`)
summary(main_schd$`No Episodes`)
summary(main_schd$`Order to now (days) Average`)
summary(main_schd$`Order to now (days) Max`)
summary(main_schd$`Order to now (days) Min`)


### Transforming data
#### Order Description with 1000 values
# c("XR ZYGOMA BOTH","XR WRIST RT","XR WRIST LT","XR WRIST BOTH","XR TOE RT","XR TOE LT","XR TOE GREAT RT","XR TOE GREAT LT","XR TMJ BOTH","XR TIBIA AND FIBULA RT","XR TIBIA AND FIBULA LT","XR TIBIA AND FIBULA BOTH","XR THUMB RT","XR THUMB LT","XR THUMB BOTH","XR THREE FOOT SPINE","XR THORACOLUMBAR SPINE","XR THORACIC SPINE","XR THORACIC INLET","XR STERNUM","XR STERNOCLAVICULAR JOINT BOTH","XR SKULL PORTABLE","XR SKULL","XR SKELETAL SURVEY","XR SHOULDER RT","XR SHOULDER LT","XR SHOULDER BOTH","XR SCAPULA RT","XR SCAPULA LT","XR SCAPULA BOTH","XR SCAPHOID RT","XR SCAPHOID LT","XR SCAPHOID BOTH","XR SACRUM","XR SACROILIAC JOINT BOTH","XR RIBS RT","XR RIBS LT","XR RADIUS AND ULNA RT","XR RADIUS AND ULNA LT","XR RADIUS AND ULNA BOTH","XR PENIS","XR PELVIS PORTABLE","XR PELVIS JUDET RT","XR PELVIS JUDET LT","XR PELVIS JUDET BOTH","XR PELVIS","XR PATELLA RT","XR PATELLA LT","XR PATELLA BOTH","XR PARANASAL SINUSES","XR ORTHOPANTOMOGRAM FULL","XR ORBIT FOREIGN BODY DEMONSTRATION BOTH","XR ORBIT BOTH","XR NECK SOFT TISSUE","XR NASAL BONES","XR MANDIBLE","XR LUMBAR SPINE","XR LEG MEASUREMENT BOTH","XR KNEE WEIGHTBEARING RT","XR KNEE WEIGHTBEARING LT","XR KNEE WEIGHTBEARING BOTH","XR KNEE RT","XR KNEE LT","XR KNEE INTERCONDYLAR BOTH","XR KNEE BOTH","XR HUMERUS RT","XR HUMERUS LT","XR HUMERUS BOTH","XR HIP RT","XR HIP PORTABLE RT","XR HIP PORTABLE LT","XR HIP LT","XR HIP BOTH","XR HAND RT","XR HAND LT","XR HAND BOTH","XR HAND AND WRIST FOR BONE AGE","XR FOREIGN BODY DEMONSTRATION","XR FOOT WEIGHTBEARING RIGHT","XR FOOT WEIGHTBEARING LEFT","XR FOOT WEIGHTBEARING BOTH","XR FOOT RT","XR FOOT LT","XR FOOT BOTH","XR FINGERS RT","XR FINGERS LT","XR FINGER RING RT","XR FINGER RING LT","XR FINGER MIDDLE RT","XR FINGER MIDDLE LT","XR FINGER LITTLE RT","XR FINGER LITTLE LT","XR FINGER INDEX RT","XR FINGER INDEX LT","XR FEMUR RT","XR FEMUR LT","XR FEMUR BOTH","XR FACIAL BONES","XR EXTREMITY PORTABLE","XR EXTERNAL UPPER EXTREMITY","XR EXTERNAL SPINE","XR EXTERNAL LOWER EXTREMITY","XR EXTERNAL HEAD","XR EXTERNAL CHEST","XR EXTERNAL ABDO/PELVIS","XR ELBOW RT","XR ELBOW LT","XR ELBOW BOTH","XR COLONIC TRANSIT STUDY","XR COCCYX","XR CLAVICLE RT","XR CLAVICLE LT","XR CLAVICLE BOTH","XR CHEST PORTABLE","XR CHEST","XR CERVICOTHORACIC JUNCTION","XR CERVICAL SPINE WITH OBLIQUES","XR CERVICAL SPINE WITH FLEX AND EXT","XR CERVICAL SPINE PORTABLE","XR CERVICAL SPINE","XR CEPHALOGRAM","XR CARPAL TUNNEL RT","XR CARPAL TUNNEL LT","XR CARPAL TUNNEL BOTH","XR CALCANEUS RT","XR CALCANEUS LT","XR CALCANEUS BOTH","XR BLADDER","XR ANKLE WEIGHTBEARING RT","XR ANKLE WEIGHTBEARING LT","XR ANKLE RT","XR ANKLE LT","XR ANKLE JOINT STRESS BOTH","XR ANKLE BOTH","XR ACROMIOCLAVICULAR JOINT RT","XR ACROMIOCLAVICULAR JOINT LT","XR ACROMIOCLAVICULAR JOINT BOTH","XR ACETABULUM RT","XR ACETABULUM LT","XR ACETABULUM BOTH","XR ABDOMEN PORTABLE","XR ABDOMEN")
rad_0_gen <- c("XR")
rad_1_gi <- c("ES","FL")
rad_3_mammo <- c("MG")
rad_3_mammo_us <- c("US AXILLA RT","US AXILLA LT","US AXILLA BOTH","US BREAST RT","US BREAST LT","US BREAST BOTH","US BREAST AND AXILLA RT","US BREAST AND AXILLA LT","US BREAST AND AXILLA BOTH","US EXTERNAL BREAST RT","US EXTERNAL BREAST LT","US EXTERNAL BREAST BOTH","US GUIDED ASPIRATION BREAST RT","US GUIDED ASPIRATION BREAST LT","US GUIDED ASPIRATION OF BREAST BOTH","US GUIDED CORE NEEDLE BIOPSY","US GUIDED CORE BIOPSY BREAST RT","US GUIDED CORE BIOPSY BREAST LT","US GUIDED CORE BIOPSY BREAST BOTH","US GUIDED CORE BIOPSY AXILLA RT","US GUIDED CORE BIOPSY AXILLA LT","US GUIDED CORE BIOPSY AXILLA BOTH","US GUIDED GUIDEWIRE LOC BREAST RT","US GUIDED GUIDEWIRE LOC BREAST LT","US GUIDED GUIDEWIRE LOC BREAST BOTH","US GUIDED FNA BIOPSY BREAST RT","US GUIDED FNA BIOPSY BREAST LT","US GUIDED FNA AXILLA RT","US GUIDED FNA AXILLA LT","US GUIDED FNA AXILLA BOTH","US GUIDED FNA AND CORE BIOPSY AXILLA RT","US GUIDED FNA AND CORE BIOPSY AXILLA LT","US GUIDED MARKER INSERTION BREAST RT","US GUIDED MARKER INSERTION BREAST LT","US GUIDED MARKER INSERTION BREAST BOTH","US GUIDED MAG SEED LOC BREAST RT","US GUIDED MAG SEED LOC BREAST LT","US GUIDED MAG SEED LOC BREAST BOTH")
rad_5_ct <- c("CT")
rad_6_nucd <- c("NM")
rad_7_cardio <- c("CV","IC")
rad_7_cardio_other <- c("SVC STENTING","CARDIAC OUTPUTS","CARDIOVERSION","CORONARY ANGIOGRAM")
rad_9_ir <- c("IR")
rad_9_ir_other <- c("FL HYSTEROSALPINOGRAM","FL URETHROGRAM","US ABDOMEN PORTABLE","US ENDOANAL SPHINCTER SCAN","US GUIDED ASPIRATION ABDOMEN","US GUIDED ABLATION","US GUIDED ASPIRATION WRIST RT","US GUIDED ASPIRATION WRIST LT","US GUIDED ASPIRATION THYROID","US GUIDED ASPIRATION THORAX","US GUIDED ASPIRATION SHOULDER RT","US GUIDED ASPIRATION SHOULDER LT","US GUIDED ASPIRATION PELVIS","US GUIDED ASPIRATION NECK","US GUIDED ASPIRATION KNEE RT","US GUIDED ASPIRATION KNEE LT","US GUIDED ASPIRATION KIDNEY","US GUIDED ASPIRATION HIP RT","US GUIDED ASPIRATION HIP LT","US GUIDED ASPIRATION HAND RT","US GUIDED ASPIRATION HAND BOTH","US GUIDED ASPIRATION GANGLION CYST","US GUIDED ASPIRATION FOOT RT","US GUIDED ASPIRATION FOOT LT","US GUIDED ASPIRATION ELBOW RT","US GUIDED ASPIRATION ELBOW LT","US GUIDED BIOPSY TRANSPLANTED KIDNEY","US GUIDED BIOPSY THYROID","US GUIDED BIOPSY SOFT TISSUE","US GUIDED BIOPSY SALIVARY GLAND","US GUIDED BIOPSY PROSTATE TRANSRECTAL","US GUIDED BIOPSY PROSTATE TRANSPERINEAL","US GUIDED BIOPSY PELVIS","US GUIDED BIOPSY NECK","US GUIDED BIOPSY LUNG","US GUIDED BIOPSY LIVER","US GUIDED BIOPSY KIDNEY RT","US GUIDED BIOPSY KIDNEY LT","US GUIDED BIOPSY KIDNEY BOTH","US GUIDED BIOPSY HAND LT","US GUIDED BIOPSY FOOT LT","US GUIDED BIOPSY ELBOW RT","US GUIDED BIOPSY ELBOW LT","US GUIDED BIOPSY CHEST","US GUIDED BIOPSY BUTTOCK LT","US GUIDED BIOPSY BONE","US GUIDED BIOPSY ABDOMEN","US GUIDED FINE NEEDLE ASPIRATION","US GUIDED DRAINAGE THORAX","US GUIDED DRAINAGE PELVIS TV","US GUIDED DRAINAGE PELVIS","US GUIDED DRAINAGE OVARIAN CYST","US GUIDED DRAINAGE NECK","US GUIDED DRAINAGE ABDOMEN","US GUIDED DRAINAGE","US GUIDED INJECTION WRIST RT","US GUIDED INJECTION WRIST LT","US GUIDED INJECTION WRIST BOTH","US GUIDED INJECTION TENDON SHEATH","US GUIDED INJECTION TENDON","US GUIDED INJECTION SUBDELTOID BURSA RT","US GUIDED INJECTION SUBDELTOID BURSA LT","US GUIDED INJECTION SUBACROMIAL BURSA RT","US GUIDED INJECTION SUBACROMIAL BURSA LT","US GUIDED INJECTION SUBACROMIAL BURSA B","US GUIDED INJECTION SHOULDER RT","US GUIDED INJECTION SHOULDER LT","US GUIDED INJECTION SHOULDER BOTH","US GUIDED INJECTION KNEE RT","US GUIDED INJECTION KNEE LT","US GUIDED INJECTION KNEE BOTH","US GUIDED INJECTION INTRAARTICULAR","US GUIDED INJECTION HIP RT","US GUIDED INJECTION HIP LT","US GUIDED INJECTION HIP BOTH","US GUIDED INJECTION HAND RT","US GUIDED INJECTION HAND LT","US GUIDED INJECTION HAND BOTH","US GUIDED INJECTION FOOT RT","US GUIDED INJECTION FOOT LT","US GUIDED INJECTION FOOT BOTH","US GUIDED INJECTION ELBOW RT","US GUIDED INJECTION ELBOW LT","US GUIDED INJECTION ELBOW BOTH","US GUIDED INJECTION BURSA","US GUIDED INJECTION ANKLE RT","US GUIDED INJECTION ANKLE LT","US GUIDED INJECTION ANKLE BOTH","US GUIDED INJECTION","US GUIDED INJ TROCHANTERIC BURSA RT","US GUIDED INJ TROCHANTERIC BURSA LT","US GUIDED INJ TROCHANTERIC BURSA B","US GUIDED INJ INTERMETATARSAL BURSA RT","US GUIDED THROMBIN INJECTION","US GUIDED SUPRAPUBIC CATHETER INSERTION","US GUIDED RENAL CYST DRAINAGE RT","US GUIDED RENAL CYST DRAINAGE LT","US GUIDED PUNCTURE PERIPHERAL VEIN","US GUIDED NEPHROSTOMY RT","US GUIDED NEPHROSTOMY LT","US GUIDED NEPHROSTOMY BOTH","US GUIDED MIDLINE CATHETER INSERTION","US OTHER PORTABLE","US SCAN CHEST WALL","US TRANSRECTAL PROSTATE","US WITH CONTRAST")
rad_4_us <- c("US")
rad_4_us_excl <- c(rad_9_ir_other,rad_3_mammo_us)
# rad_ctc <- c("CT CONE BEAM")
rad_d_scan <- c("DXA")
rad_img <- c("IM")
rad_m_mri <- c("MRI")
rad_mdm <- c("MDM")
rad_p_pet <- c("PET")
rad_t_th <- c("TH")
main_schd <- main_schd %>%     #library(plyr)
 mutate(orderDes = case_when(
  substring(main_schd$`Order Description`,0,2) %in% rad_0_gen ~ "Radiology General",
  substring(main_schd$`Order Description`,0,2) %in% rad_1_gi ~ "G.I. Investigation",
  substring(main_schd$`Order Description`,0,2) %in% rad_3_mammo ~ "Mammograms", 
  substring(main_schd$`Order Description`,0) %in% rad_3_mammo_us ~ "Mammograms", #substring has a default value for the last option: last = 1000000L. If we don’t specify last, this value is used
  substring(main_schd$`Order Description`,0,2) %in% rad_4_us & !substring(main_schd$`Order Description`,0) %in% rad_4_us_excl ~ "Ultrasound",
  substring(main_schd$`Order Description`,0,2) %in% rad_5_ct ~ "CT",
  substring(main_schd$`Order Description`,0,2) %in% rad_6_nucd ~ "Radionuclide",
  substring(main_schd$`Order Description`,0,2) %in% rad_7_cardio ~ "Cadiovascular",
  substring(main_schd$`Order Description`,0) %in% rad_7_cardio_other ~ "Cadiovascular",
  substring(main_schd$`Order Description`,0,2) %in% rad_9_ir ~ "Interventional Rad",
  substring(main_schd$`Order Description`,0) %in% rad_9_ir_other ~ "Interventional Rad",
  substring(main_schd$`Order Description`,0,3) %in% rad_d_scan ~ "Dexa Scanning",
  substring(main_schd$`Order Description`,0,2) %in% rad_img ~ "Image Mgmt",
  substring(main_schd$`Order Description`,0,3) %in% rad_m_mri ~ "M.R.I.",
  substring(main_schd$`Order Description`,0,3) %in% rad_mdm ~ "MDM",
  substring(main_schd$`Order Description`,0,3) %in% rad_p_pet ~ "PET-CT",
  substring(main_schd$`Order Description`,0,2) %in% rad_t_th ~ "Theatre Rad",
  TRUE ~ "CTC" #rad_ctc substring doesnt work for spaces btw letters
))

main_cpt <- main_cpt %>%     #library(plyr)
 mutate(orderDes = case_when(
  substring(main_cpt$`Order Description`,0,2) %in% rad_0_gen ~ "Radiology General",
  substring(main_cpt$`Order Description`,0,2) %in% rad_1_gi ~ "G.I. Investigation",
  substring(main_cpt$`Order Description`,0,2) %in% rad_3_mammo ~ "Mammograms", 
  substring(main_cpt$`Order Description`,0) %in% rad_3_mammo_us ~ "Mammograms", #substring has a default value for the last option: last = 1000000L. If we don’t specify last, this value is used
  substring(main_cpt$`Order Description`,0,2) %in% rad_4_us & !substring(main_cpt$`Order Description`,0) %in% rad_4_us_excl ~ "Ultrasound",
  substring(main_cpt$`Order Description`,0,2) %in% rad_5_ct ~ "CT",
  substring(main_cpt$`Order Description`,0,2) %in% rad_6_nucd ~ "Radionuclide",
  substring(main_cpt$`Order Description`,0,2) %in% rad_7_cardio ~ "Cadiovascular",
  substring(main_cpt$`Order Description`,0) %in% rad_7_cardio_other ~ "Cadiovascular",
  substring(main_cpt$`Order Description`,0,2) %in% rad_9_ir ~ "Interventional Rad",
  substring(main_cpt$`Order Description`,0) %in% rad_9_ir_other ~ "Interventional Rad",
  substring(main_cpt$`Order Description`,0,3) %in% rad_d_scan ~ "Dexa Scanning",
  substring(main_cpt$`Order Description`,0,2) %in% rad_img ~ "Image Mgmt",
  substring(main_cpt$`Order Description`,0,3) %in% rad_m_mri ~ "M.R.I.",
  substring(main_cpt$`Order Description`,0,3) %in% rad_mdm ~ "MDM",
  substring(main_cpt$`Order Description`,0,3) %in% rad_p_pet ~ "PET-CT",
  substring(main_cpt$`Order Description`,0,2) %in% rad_t_th ~ "Theatre Rad",
  TRUE ~ "CTC" #rad_ctc substring doesnt work for spaces btw letters
))

#### Order Status with 112 values
sort(table(main_schd$`Order Status`),decreasing = T)


### Order description
cbind(sort(table(main_schd$`Ordering Consultant`),decreasing=TRUE),sort(100*round(prop.table(table(main_schd$`Ordering Consultant`)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_schd$`Order Description`),decreasing=TRUE),sort(100*round(prop.table(table(main_schd$`Order Description`)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_schd$`Order Status`),decreasing=TRUE),sort(100*round(prop.table(table(main_schd$`Order Status`)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_schd$`Order to now (months) group`),decreasing=TRUE),sort(100*round(prop.table(table(main_schd$`Order to now (months) group`)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_schd$`No Order Items`),decreasing=TRUE),sort(100*round(prop.table(table(main_schd$`No Order Items`)),5),deparse.level=2,decreasing=TRUE))

### Specialty description
cbind(sort(table(main_schd$`Episode Type`),decreasing=TRUE),sort(100*round(prop.table(table(main_schd$`Episode Type`)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(as.factor(main_schd$`No Episodes`)),decreasing=TRUE),sort(100*round(prop.table(table(as.factor(main_schd$`No Episodes`))),5),deparse.level=2,decreasing=TRUE))


## Create data with MRN indexes among databases (all, scheduled and completed Orders)
df_all <- data.frame(main_all$`Medical Record Number`, main_all$`Order Date`, main_all$`Order to now (days) Average`, main_all$`Schedule Date`)
df_all <- df_all %>% mutate(status = c("all Order"))
colnames(df_all) <- c("MRN","orderDate","days_orderToNow","schdDate","status")

df_schd <- data.frame(main_schd$`Medical Record Number`, main_schd$`Order Date`, main_schd$`Order to now (days) Average`, main_schd$`Schedule Date`)
df_schd <- df_schd %>% mutate(status = c("scheduled"))
colnames(df_schd) <- c("MRN","orderDate","days_orderToNow","schdDate","status")

df_cpt <- data.frame(main_cpt$`Medical Record Number`, main_cpt$`Order Date`, main_cpt$`Order to Completed Time (Days) Average`, main_cpt$`Completed Date`, main_cpt$`Result Date`, main_cpt$`Completed to Result Time (Days) Average`)
df_cpt <- df_cpt %>% mutate(status = c("completed"))
colnames(df_cpt) <- c("MRN","orderDate","days_orderToCompleted","cptDate","retDate","days_completedToResult","status")

# df_MRN <- list(df_all, df_schd, df_cpt)
# df_MRN <- df_MRN %>% reduce(full_join, by="MRN") #Error: cannot allocate vector of size 2.3 Gb (too big to run)

pt_MRN_list <- list(data.frame(table(main_all$`Medical Record Number`)),data.frame(table(main_schd$`Medical Record Number`)),as.data.frame(table(main_cpt$`Medical Record Number`)))
pt_MRN <- pt_MRN_list %>% reduce(full_join, by="Var1")
colnames(pt_MRN) <- c("MRN","allOrder","scheduledOrder","completedOrder")
str(pt_MRN)

## Transforming data
# main_group <- main_processed %>% group_by(main_processed$Medical.Record.Number) #library(moments)
# main_group$freq_MRN_recode <- ifelse(count(main_group$Medical.Record.Number >= 34)==1,1,0)

#library(plyr)
# main %>%
#   mutate(MRN.Pathway = cbind(main$Medical.Record.Number,main$Pathway.Number)) #library(tidyverse)

# main$ <- mapvalues(main$Consultant, from = c(""), 
#                                     to = c(""))
# 
# main$Booking.Type_recode <- ifelse(main$Booking.Type == ":", ifelse(!duplicated(main$Medical.Record.Number), "N : NEW", "R : RETURN"), main$Booking.Type)
# main$Booking.Type_recode <- mapvalues(main$Booking.Type_recode, from = c("N : NEW","R : RETURN","W : WARD","C : New  Virtual Phone","B : New  Virtual Video","E : Return  Virtual Phone","D : Return  Virtual Video","V : REVIEW"), to =c("NEW","RETURN","WARD","NEW VIRTUAL","NEW VIRTUAL","RETURN VIRTUAL","RETURN VIRTUAL","RETURN"))
# 
# main$New.Attendances <- ifelse(is.na(main$No.New.Attendances)==F, ifelse(main$No.New.Attendances>0,1,0), main$No.New.Attendances)


# main$addressDiff <- ifelse(main$Present.Address == main$Home.Address, 0, 1)


## Create dataset for modelling
# main.df <- main %>% select(-rownames,-) #when there are multiple files to combine with same variables

write.csv(main[,c("")],".csv")

main_processed <- read.csv(".csv")

## Convert all character variables to factor
# main_processed <- main_processed %>% mutate_if(is.character,as.factor)

# main_processed_tibble <- as_tibble(main_processed) #library(tidyverse), tibble never changes [the type of the inputs, the names of variables], it only recycles inputs of length 1, and never creates row.names()

```


# Inspecting data
Inspecting new and re-coded variables
```{r inspection}

str(main_processed)
summary(main_processed)

any(is.na(main_processed))
colSums(is.na(main_processed))
```


# Creating descriptive statistics (2020-2023)

## Outcome (response variable): Record.Type (including Attendance, Cancellation, DNA)
1. Total No. of observations: 82,543
2. No. of Attendance: 56,656; New Attendance: 21,995; Return Attendance: 34,661
3. No. of Cancellation: 17,099
4. No. of DNA: 8,797

<!-- ## Dependable variables (with highest frequency of value): -->
<!-- 1. Clinic relevance -->
<!-- * Clinic code :757 (12.79%), 1134 (12.72%) -->
<!-- * Clinic type: Symptomatic spine clinic (48.66%) -->
<!-- * M.R.N: 51 times is the highest visit -->
<!-- * Referral source: Clinic (52.71%) -->
<!-- * Consultant: WAL (27%), BAR (26%) -->
<!-- * Insurance scheme: Unknown (36.57%) -->
<!-- * Eligibility: Non medical card (53.08%) -->
<!-- * Booking Type: Return (57.4%) -->
<!-- * Hospital catchment: National catchment (57.91%) -->

<!-- 2. Date relevance -->
<!-- * Attendance Day: Tuesday (26.6%) -->
<!-- * Attendance Month-Year: 2021-09 (2.96%) -->
<!-- * Attendance Month: September (10.2%) -->
<!-- * Attendance Year: 2021 (27%) -->
<!-- * Attendance Type: Return (49.64%) -->

<!-- * Appointment Day: Tuesday (27.8%) -->
<!-- * Appointment Month-Year: 2021-08 (3.42%) -->

<!-- * Booked Day: Tuesday (22.57%) -->
<!-- * Booked Month-Year: 2022-10 (2.78%) -->

<!-- * Days difference between Attendance and Appointment: Mean 580, Median 730 [0-1096] -->
<!-- * Days difference between Attendance and Booked day: Mean 506, Median 366 [<0,1112] -->
<!-- * Days difference between Booked day and Appointment: Mean 91, Median 25 [0-672] -->

<!-- 3. Patient relevance -->
<!-- * Gender: Female (98%) -->
<!-- * Age at attendance cat.HSE: 45-54 (23.7%), Average 51 [0-105] -->
<!-- * Area of residence: Dublin north (45.3%) -->
<!-- * Difference of Home and Present address: No (82%) -->

<!-- ## Cancellation (N=27610) -->
<!-- * Cancellation Group: Hospital (57.53%) -->
<!-- * Reason for cancellation: by hospital (38.62%) -->
<!-- * Rebooked indicator: Yes (74.5%) -->

```{r descriptive statistics}
# All orders
cbind(sort(table(main_all$`Sub Department`),decreasing=TRUE),sort(100*round(prop.table(table(main_all$`Sub Department`)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_all$`Episode Type`),decreasing=TRUE),sort(100*round(prop.table(table(main_all$`Episode Type`)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_all$`Item Priority`),decreasing=TRUE),sort(100*round(prop.table(table(main_all$`Item Priority`)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_all$`Ordering Specialty Description`),decreasing=TRUE),sort(100*round(prop.table(table(main_all$`Ordering Specialty Description`)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_all$`Order Location Group`),decreasing=TRUE),sort(100*round(prop.table(table(main_all$`Order Location Group`)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_all$`Insurance Scheme`),decreasing=TRUE),sort(100*round(prop.table(table(main_all$`Insurance Scheme`)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_all$`Medical Card Holder`),decreasing=TRUE),sort(100*round(prop.table(table(main_all$`Medical Card Holder`)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_all$`Private Indicator`),decreasing=TRUE),sort(100*round(prop.table(table(main_all$`Private Indicator`)),5),deparse.level=2,decreasing=TRUE))


cbind(sort(table(main_all$orderDay),decreasing=TRUE),sort(100*round(prop.table(table(main_all$orderDay)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_all$orderMonth),decreasing=TRUE),sort(100*round(prop.table(table(main_all$orderMonth)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(substring(main_all$`Order MonthYear`,4,7)), decreasing=TRUE),sort(100*round(prop.table(table(substring(main_all$`Order MonthYear`,4,7))),5),deparse.level=2,decreasing=TRUE)) #year, same sample size every year
cbind(sort(table(main_all$`Order MonthYear`),decreasing=TRUE),sort(100*round(prop.table(table(main_all$`Order MonthYear`)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_all$schdDay),decreasing=TRUE),sort(100*round(prop.table(table(main_all$schdDay)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_all$schdMonth),decreasing=TRUE),sort(100*round(prop.table(table(main_all$schdMonth)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(substring(main_all$`Scheduled MonthYear`,4,7)), decreasing=TRUE),sort(100*round(prop.table(table(substring(main_all$`Scheduled MonthYear`,4,7))),5),deparse.level=2,decreasing=TRUE)) #year
cbind(sort(table(main_all$`Scheduled MonthYear`),decreasing=TRUE),sort(100*round(prop.table(table(main_all$`Scheduled MonthYear`)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_all$`No Order Items`),decreasing=TRUE),sort(100*round(prop.table(table(main_all$`No Order Items`)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_all$`Future Breach`),decreasing=TRUE),sort(100*round(prop.table(table(main_all$`Future Breach`)),5),deparse.level=2,decreasing=TRUE))

# Scheduled orders
## Outcome description
### Convert dependent variable (outcome, response var.) to factor type if not yet
table(main_processed$Record.Type,main_processed$Attendance.MonthYear)

## Predictor description (categorical)

### Data frame for nominal/ binary values of variables

options(digits=2)
...


## Predictor description (numeric)
summary(main_processed$Age.at.Attendance)
stat.desc(main_processed$Age.at.Attendance, basic=F)
skew(main_processed$Age.at.Attendance)
kurtosis(main_processed$Age.at.Attendance)

summary(main_processed$daysDiff_attendanceAppoint)
stat.desc(main_processed$daysDiff_attendanceAppoint, basic=F)
skew(main_processed$daysDiff_attendanceAppoint)
kurtosis(main_processed$daysDiff_attendanceAppoint)

summary(main_processed$daysDiff_attendanceBooked)
stat.desc(main_processed$daysDiff_attendanceBooked, basic=F)
skew(main_processed$daysDiff_attendanceBooked)
kurtosis(main_processed$daysDiff_attendanceBooked)

summary(main_processed$daysDiff_AppointBooked)
stat.desc(main_processed$daysDiff_AppointBooked, basic=F)
skew(main_processed$daysDiff_AppointBooked)
kurtosis(main_processed$daysDiff_AppointBooked)

```


```{r plot, echo=FALSE}
# One variable description
## Creating graphs

set.seed(123)
## Create the histogram with ggplot
gg_orderAvg <- ggplot(main_all, aes(x=main_all$`Order to now (days) Average`))+ 
  labs(x = "Order to now (days) Average")+ 
  geom_histogram(binwidth=200, colour="black", aes(y=..density..,fill=..count..))+ 
  scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")+ 
  stat_function(fun=dnorm, color="red", args=list(mean=mean(main_all$`Order to now (days) Average`,na.rm = T), sd=sd(main_all$`Order to now (days) Average`,na.rm = T)))
gg_orderAvg


# ## Create pareto charts
# # implementing the function
# ggpareto <- function(x) {
#   title <- deparse(substitute(x))
#   x <- data.frame(modality = na.omit(x))
#   
# library(dplyr)
# Df <- x %>% 
#   group_by(modality) %>% 
#   summarise(frequency=n()) %>% 
#   arrange(desc(frequency)) %>%
#   mutate(modality_int = as.integer(modality), cumfreq = cumsum(frequency), cumperc = cumfreq/nrow(x) * 100)
# 
# # Df$modality <- ordered(Df$modality, levels = unlist(Df$modality, use.names = F))
# 
# nr <- nrow(Df)
# N <- sum(Df$frequency)
# Df_ticks <- data.frame(xtick0 = rep(nr +.55, 11), xtick1 = rep(nr +.59, 11), ytick = seq(0, N, N/10))
# 
# y2 <- c("  0%", " 20%", " 40%", " 60%", " 80%", "100%")
#   
# g <- ggplot(Df, aes(x=modality, y=frequency)) + 
#     geom_bar(stat="identity", aes(fill = modality_int)) +
#     geom_line(aes(x=modality_int, y = cumfreq, color = modality_int)) +
#     geom_point(aes(x=modality_int, y = cumfreq, color = modality_int), pch = 19) +
#     scale_y_continuous(breaks=seq(0, N, N/10), limits=c(-.02 * N, N * 1.02)) + 
#     scale_x_discrete(breaks = Df$modality) +
#     guides(fill = FALSE, color = FALSE) + 
#     annotate("rect", xmin = nr + .55, xmax = nr + 1, 
#              ymin = -.02 * N, ymax = N * 1.02, fill = "white") +
#     annotate("text", x = nr + .8, y = seq(0, N, N/10), label = y2, size = 3.5) +
#     geom_segment(x = nr + .55, xend = nr + .55, y = -.02 * N, yend = N * 1.02, color = "grey50") +
#     geom_segment(data = Df_ticks, aes(x = xtick0, y = ytick, xend = xtick1, yend = ytick)) +
#     labs(title = paste0("Pareto Chart of ", title), y = "absolute frequency") +
#     theme_bw()
#   
#   return(list(graph = g, Df = Df[, c(3, 1, 2, 4, 5)]))
# }
# ggpareto(subDep)

# One variable
## Create bar charts
ggplot(pt_MRN, aes(x = orderYear, y = freq, fill = status)) +
  geom_col(position = "dodge") +
  labs(x = "Year") +
  scale_fill_brewer(palette = "Pastel1") +
  theme(text=element_text(size=8), axis.title = element_text(size=10))

## Create pareto charts
library(patchwork)
plot_subDep_all <- ggplot(main_all,aes(x=main_all$`Sub Department`)) + 
  labs(x = "Radiology type 2020-2023") +
  scale_x_discrete(limits=c("0 : RADIOLOGY GENERAL","3 : MAMMOGRAMS","1 : G.I. INVESTIGATIONS"), guide = guide_axis(n.dodge = 2)) +
  geom_bar(colour="blue", fill="lightblue") +
  geom_text(aes(y = ..count.., label = ..count..), stat="count", vjust=.3, size=3.5) +
  theme_minimal()
plot_subDep_all

specialty <- data.frame(table(main_all$`Ordering Specialty Description`))
colnames(specialty) <- c("specialty", "freq")
plot_specialty <- ggplot(specialty, aes(x=specialty, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("blue","lightblue")) +
  labs(x = "Specialty", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

insScheme <- data.frame(table(main_all$`Insurance Scheme`))
colnames(insScheme) <- c("insScheme", "freq")
plot_insScheme <- ggplot(insScheme, aes(x=insScheme, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("blue","lightblue")) +
  labs(x = "Insurance Scheme", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

itemPrior <- data.frame(table(main_all$`Item Priority`))
colnames(itemPrior) <- c("itemPrior", "freq")
plot_itemPrior <- ggplot(itemPrior, aes(x=itemPrior, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("blue","lightblue")) +
  labs(x = "Item Priority", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

medCard <- data.frame(table(main_all$`Medical Card Holder`))
colnames(medCard) <- c("medCard", "freq")
plot_medCard <- ggplot(medCard, aes(x=medCard, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("blue","lightblue")) +
  labs(x = "Medical Card Holder", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

prvtInd <- data.frame(table(main_all$`Private Indicator`))
colnames(prvtInd) <- c("privateIndicator", "freq")
plot_prvtInd <- ggplot(prvtInd, aes(x=privateIndicator, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("blue","lightblue")) +
  labs(x = "Private Indicator", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

futBre <- data.frame(table(main_all$`Future Breach`))
colnames(futBre) <- c("futureBreach", "freq")
plot_futBre <- ggplot(futBre, aes(x=futureBreach, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("blue","lightblue")) +
  labs(x = "Future Breach", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

plot_specialty | plot_insScheme
plot_itemPrior | plot_medCard / plot_prvtInd | plot_futBre


orderDes_all <- data.frame(table(main_all$`Sub Department`))
colnames(orderDes_all) <- c("orderDes", "freq")
plot_orderDes_all <- ggplot(orderDes_all, aes(x=orderDes, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("blue","lightblue")) +
  labs(x = "Order Type in All orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

orderDes_schd <- data.frame(table(main_schd$orderDes))
colnames(orderDes_schd) <- c("orderDes", "freq")
plot_orderDes_schd <- ggplot(orderDes_schd, aes(x=orderDes, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("blue","lightblue")) +
  labs(x = "Order Type in Scheduled orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

orderDes_cpt <- data.frame(table(main_cpt$orderDes))
colnames(orderDes_cpt) <- c("orderDes", "freq")
plot_orderDes_cpt <- ggplot(orderDes_cpt, aes(x=orderDes, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("blue","lightblue")) +
  labs(x = "Order Type in Completed orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

plot_orderDes_all + plot_orderDes_schd + plot_orderDes_cpt


locationGrp_all <- data.frame(table(main_all$`Order Location Group`))
colnames(locationGrp_all) <- c("locationGrp", "freq")
plot_locationGrp_all <- ggplot(locationGrp_all, aes(x=locationGrp, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("blue","lightblue")) +
  labs(x = "Order Location Group in All orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

locationGrp_cpt <- data.frame(table(main_cpt$`Ordering Location Group`))
colnames(locationGrp_cpt) <- c("locationGrp", "freq")
plot_locationGrp_cpt <- ggplot(locationGrp_cpt, aes(x=locationGrp, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("blue","lightblue")) +
  labs(x = "Ordering Location Group in Completed orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

plot_locationGrp_all| plot_locationGrp_cpt


episodeType_all <- data.frame(table(main_all$`Episode Type`))
colnames(episodeType_all) <- c("episodeType", "freq")
plot_episodeType_all <- ggplot(episodeType_all, aes(x=episodeType, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("blue","lightblue")) +
  labs(x = "Episode Type in All orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

episodeType_schd <- data.frame(table(main_schd$`Episode Type`))
colnames(episodeType_schd) <- c("episodeType", "freq")
plot_episodeType_schd <- ggplot(episodeType_schd, aes(x=episodeType, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("blue","lightblue")) +
  labs(x = "Episode Type in Scheduled orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

episodeType_cpt <- data.frame(table(main_cpt$`Episode Type`))
colnames(episodeType_cpt) <- c("episodeType", "freq")
plot_episodeType_cpt <- ggplot(episodeType_cpt, aes(x=episodeType, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("blue","lightblue")) +
  labs(x = "Episode Type in Completed orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

plot_episodeType_all+ plot_episodeType_schd+ plot_episodeType_cpt


numOrder_all <- data.frame(table(main_all$`No Order Items`))
colnames(numOrder_all) <- c("numOrder", "freq")
plot_numOrder_all <- ggplot(numOrder_all, aes(x=numOrder, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("blue","lightblue")) +
  labs(x = "Number of Order items in All orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

numOrder_schd <- data.frame(table(main_schd$`No Order Items`))
colnames(numOrder_schd) <- c("numOrder", "freq")
plot_numOrder_schd <- ggplot(numOrder_schd, aes(x=numOrder, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("blue","lightblue")) +
  labs(x = "Number of Order items in Scheduled orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

numOrder_cpt <- data.frame(table(main_cpt$`No Orders`))
colnames(numOrder_cpt) <- c("numOrder", "freq")
plot_numOrder_cpt <- ggplot(numOrder_cpt, aes(x=numOrder, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("blue","lightblue")) +
  labs(x = "Number of Order items in Completed orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

plot_numOrder_all+ plot_numOrder_schd+ plot_numOrder_cpt


orderDay_all <- data.frame(table(main_all$orderDay))
colnames(orderDay_all) <- c("orderDay", "freq")
plot_orderDay_all <- ggplot(orderDay_all, aes(x=orderDay, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("yellow","lightyellow")) +
  labs(x = "Order Day in All orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

orderDay_schd <- data.frame(table(main_schd$orderDay))
colnames(orderDay_schd) <- c("orderDay", "freq")
plot_orderDay_schd <- ggplot(orderDay_schd, aes(x=orderDay, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("yellow","lightyellow")) +
  labs(x = "Order Day in Scheduled orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

orderDay_cpt <- data.frame(table(main_cpt$orderDay))
colnames(orderDay_cpt) <- c("orderDay", "freq")
plot_orderDay_cpt <- ggplot(orderDay_cpt, aes(x=orderDay, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("yellow","lightyellow")) +
  labs(x = "Order Day in Completed orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

plot_orderDay_all+ plot_orderDay_schd+ plot_orderDay_cpt

orderMonth_all <- data.frame(table(main_all$orderMonth))
colnames(orderMonth_all) <- c("orderMonth", "freq")
plot_orderMonth_all <- ggplot(orderMonth_all, aes(x=orderMonth, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("yellow","lightyellow")) +
  labs(x = "Order Month in All orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

orderMonth_schd <- data.frame(table(main_schd$orderMonth))
colnames(orderMonth_schd) <- c("orderMonth", "freq")
plot_orderMonth_schd <- ggplot(orderMonth_schd, aes(x=orderMonth, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("yellow","lightyellow")) +
  labs(x = "Order Month in Scheduled orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

orderMonth_cpt <- data.frame(table(main_cpt$orderMonth))
colnames(orderMonth_cpt) <- c("orderMonth", "freq")
plot_orderMonth_cpt <- ggplot(orderMonth_cpt, aes(x=orderMonth, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkblue", bars.fill = c("yellow","lightyellow")) +
  labs(x = "Order Month in Completed orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

plot_orderMonth_all+ plot_orderMonth_schd+ plot_orderMonth_cpt


schdDay_all <- data.frame(table(main_all$schdDay))
colnames(schdDay_all) <- c("schdDay", "freq")
plot_schdDay_all <- ggplot(schdDay_all, aes(x=schdDay, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkgreen", bars.fill = c("green","lightgreen")) +
  labs(x = "Scheduled Day in All orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

schdDay_schd <- data.frame(table(main_schd$schdDay))
colnames(schdDay_schd) <- c("schdDay", "freq")
plot_schdDay_schd <- ggplot(schdDay_schd, aes(x=schdDay, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkgreen", bars.fill = c("green","lightgreen")) +
  labs(x = "Scheduled Day in Scheduled orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

schdDay_cpt <- data.frame(table(main_cpt$cptDay))
colnames(schdDay_cpt) <- c("cptDay", "freq")
plot_schdDay_cpt <- ggplot(schdDay_cpt, aes(x=cptDay, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkgreen", bars.fill = c("green","lightgreen")) +
  labs(x = "Completed Day in Completed orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

rstDay_cpt <- data.frame(table(main_cpt$rstDay))
colnames(rstDay_cpt) <- c("rstDay", "freq")
plot_rstDay_cpt <- ggplot(rstDay_cpt, aes(x=rstDay, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkgreen", bars.fill = c("green","lightgreen")) +
  labs(x = "Result Day in Completed orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

plot_schdDay_all+ plot_schdDay_schd+ plot_schdDay_cpt+ plot_rstDay_cpt


schdMonth_all <- data.frame(table(main_all$schdMonth))
colnames(schdMonth_all) <- c("schdMonth", "freq")
plot_schdMonth_all <- ggplot(schdMonth_all, aes(x=schdMonth, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkgreen", bars.fill = c("green","lightgreen")) +
  labs(x = "Scheduled Month in All orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

schdMonth_schd <- data.frame(table(main_schd$schdMonth))
colnames(schdMonth_schd) <- c("schdMonth", "freq")
plot_schdMonth_schd <- ggplot(schdMonth_schd, aes(x=schdMonth, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkgreen", bars.fill = c("green","lightgreen")) +
  labs(x = "Scheduled Month in Scheduled orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

schdMonth_cpt <- data.frame(table(main_cpt$cptMonth))
colnames(schdMonth_cpt) <- c("cptMonth", "freq")
plot_schdMonth_cpt <- ggplot(schdMonth_cpt, aes(x=cptMonth, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkgreen", bars.fill = c("green","lightgreen")) +
  labs(x = "Completed Month in Completed orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

rstMonth_cpt <- data.frame(table(main_cpt$rstMonth))
colnames(rstMonth_cpt) <- c("rstMonth", "freq")
plot_rstMonth_cpt <- ggplot(rstMonth_cpt, aes(x=rstMonth, y=freq)) +
  stat_pareto(point.color = "red", line.color = "darkgreen", bars.fill = c("green","lightgreen")) +
  labs(x = "Result Month in Completed orders", y= "Frequency") +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

plot_schdMonth_all+ plot_schdMonth_schd+ plot_schdMonth_cpt+ plot_rstMonth_cpt


## Two variables
orderMonthYear_all <- data.frame(table(factor(main_all$orderMonth), factor(main_all$orderYear)))
colnames(orderMonthYear_all) <- c("month","year","freq")
plot_orderMonthYear_all <- ggplot(orderMonthYear_all, aes(x = factor(month), y = freq, color = year, group = year)) +
  geom_point(size = 3) +
  geom_line(aes(linetype = year)) +
  labs(title = "All orders", subtitle = "Episode counts of Order month over years", 
    x = "Order Month", y = "Episode Count", color = "Year") +
  scale_y_continuous(labels = scales::number) +
  theme(text=element_text(size=8), axis.title = element_text(size=10), axis.text.x = element_text(angle = 90, vjust = .5))

orderMonthYear_schd <- data.frame(table(factor(main_schd$orderMonth), factor(main_schd$orderYear)))
colnames(orderMonthYear_schd) <- c("month","year","freq")
plot_orderMonthYear_schd <- ggplot(orderMonthYear_schd, aes(x = factor(month), y = freq, color = year, group = year)) +
  geom_point(size = 3) +
  geom_line(aes(linetype = year)) +
  labs(title = "Scheduled orders", subtitle = "Episode counts of Order month over years",
    x = "Order Month", y = "Episode Count", color = "Year") +
  scale_y_continuous(labels = scales::number) +
  theme(text=element_text(size=8), axis.title = element_text(size=10), axis.text.x = element_text(angle = 90, vjust = .5))

orderMonthYear_cpt <- data.frame(table(factor(main_cpt$orderMonth), factor(main_cpt$orderYear)))
colnames(orderMonthYear_cpt) <- c("month","year","freq")
plot_orderMonthYear_cpt <- ggplot(orderMonthYear_cpt, aes(x = factor(month), y = freq, color = year, group = year)) +
  geom_point(size = 3) +
  geom_line(aes(linetype = year)) +
  labs(title = "Completed orders", subtitle = "Episode counts of Order month over years",
    x = "Order Month", y = "Episode Count", color = "Year") +
  scale_y_continuous(labels = scales::number) +
  theme(text=element_text(size=8), axis.title = element_text(size=10), axis.text.x = element_text(angle = 90, vjust = .5))

plot_orderMonthYear_all + plot_orderMonthYear_schd + plot_orderMonthYear_cpt


schdMonthYear_all <- data.frame(table(factor(main_all$schdMonth), factor(main_all$schdYear)))
colnames(schdMonthYear_all) <- c("month","year","freq")
plot_schdMonthYear_all <- ggplot(schdMonthYear_all, aes(x = factor(month), y = freq, color = year, group = year)) +
  geom_point(size = 3) +
  geom_line(aes(linetype = year)) +
  labs(title = "All orders", subtitle = "Episode counts of Scheduled month over years", 
    x = "Scheduled Month", y = "Episode Count", color = "Year") +
  scale_y_continuous(labels = scales::number) +
  theme(text=element_text(size=8), axis.title = element_text(size=10), axis.text.x = element_text(angle = 90, vjust = .5))

schdMonthYear_schd <- data.frame(table(factor(main_schd$orderMonth), factor(main_schd$orderYear)))
colnames(schdMonthYear_schd) <- c("month","year","freq")
plot_schdMonthYear_schd <- ggplot(schdMonthYear_schd, aes(x = factor(month), y = freq, color = year, group = year)) +
  geom_point(size = 3) +
  geom_line(aes(linetype = year)) +
  labs(title = "Scheduled orders", subtitle = "Episode counts of Scheduled month over years",
    x = "Scheduled Month", y = "Episode Count", color = "Year") +
  scale_y_continuous(labels = scales::number) +
  theme(text=element_text(size=8), axis.title = element_text(size=10), axis.text.x = element_text(angle = 90, vjust = .5))

schdMonthYear_cpt <- data.frame(table(factor(main_cpt$cptMonth), factor(main_cpt$cptYear)))
colnames(schdMonthYear_cpt) <- c("month","year","freq")
plot_schdMonthYear_cpt <- ggplot(schdMonthYear_cpt, aes(x = factor(month), y = freq, color = year, group = year)) +
  geom_point(size = 3) +
  geom_line(aes(linetype = year)) +
  labs(title = "Completed orders", subtitle = "Episode counts of Completed month over years",
    x = "Completed Month", y = "Episode Count", color = "Year") +
  scale_y_continuous(labels = scales::number) +
  theme(text=element_text(size=8), axis.title = element_text(size=10), axis.text.x = element_text(angle = 90, vjust = .5))

rstMonthYear_cpt <- data.frame(table(factor(main_cpt$rstMonth), factor(main_cpt$rstYear)))
colnames(rstMonthYear_cpt) <- c("month","year","freq")
plot_rstMonthYear_cpt <- ggplot(rstMonthYear_cpt, aes(x = factor(month), y = freq, color = year, group = year)) +
  geom_point(size = 3) +
  geom_line(aes(linetype = year)) +
  labs(title = "Completed orders", subtitle = "Episode counts of Result month over years",
    x = "Result Month", y = "Episode Count", color = "Year") +
  scale_y_continuous(labels = scales::number) +
  theme(text=element_text(size=8), axis.title = element_text(size=10), axis.text.x = element_text(angle = 90, vjust = .5))

plot_schdMonthYear_all + plot_schdMonthYear_schd + plot_schdMonthYear_cpt + plot_rstMonthYear_cpt

## Create control charts
### Order Date
cc_orderMonthYear_all <- data.frame(table(main_all$orderMonthYear))
colnames(cc_orderMonthYear_all) <- c("monthYear", "freq")

library(qcc)
qcc(cc_orderMonthYear_all$freq, type = "u", sizes = cc_orderMonthYear_all$freq, labels=cc_orderMonthYear_all$monthYear, plot=T)
qcc(cc_orderMonthYear_all$freq, type = "c", labels = cc_orderMonthYear_all$monthYear, plot=T)

library(qicharts)
set.seed(7)
qic(y = freq, n = freq, x = monthYear, data = cc_orderMonthYear_all, chart = 'u', multiply = 1000, main='Rate of orders - u chart', ylab='Rate of orders in month-year unit', xlab='Month-Year', runvals = T, linevals = T) #if taken sample size as patients No
qic(y = freq, x = monthYear, data = cc_orderMonthYear_all, chart = 'run', main='Count of orders - run chart', ylab='Count of orders in month unit', xlab='Month-Year', runvals = T, linevals = T) #if taken sample size as days per month


cc_orderMonthYear_schd <- data.frame(table(main_schd$orderMonthYear))
colnames(cc_orderMonthYear_schd) <- c("monthYear", "freq")

qcc(cc_orderMonthYear_schd$freq, type = "u", sizes = cc_orderMonthYear_schd$freq, labels=cc_orderMonthYear_schd$monthYear, plot=T)
qcc(cc_orderMonthYear_schd$freq, type = "c", labels = cc_orderMonthYear_schd$monthYear, plot=T)

set.seed(7)
qic(y = freq, n = freq, x = monthYear, data = cc_orderMonthYear_schd, chart = 'u', multiply = 1000, main='Rate of orders - u chart', ylab='Rate of orders in month-year unit', xlab='Month-Year', runvals = T, linevals = T) #if taken sample size as patients No
qic(y = freq, x = monthYear, data = cc_orderMonthYear_schd, chart = 'run', main='Count of orders - run chart', ylab='Count of orders in month unit', xlab='Month-Year', runvals = T, linevals = T) #if taken sample size as days per month


cc_orderMonthYear_cpt <- data.frame(table(main_cpt$orderMonthYear))
colnames(cc_orderMonthYear_cpt) <- c("monthYear", "freq")

qcc(cc_orderMonthYear_cpt$freq, type = "u", sizes = cc_orderMonthYear_cpt$freq, labels=cc_orderMonthYear_cpt$monthYear, plot=T)
qcc(cc_orderMonthYear_cpt$freq, type = "c", labels = cc_orderMonthYear_cpt$monthYear, plot=T)

set.seed(7)
qic(y = freq, n = freq, x = monthYear, data = cc_orderMonthYear_cpt, chart = 'u', multiply = 1000, main='Rate of orders - u chart', ylab='Rate of orders in month-year unit', xlab='Month-Year', runvals = T, linevals = T) #if taken sample size as patients No
qic(y = freq, x = monthYear, data = cc_orderMonthYear_cpt, chart = 'run', main='Count of orders - run chart', ylab='Count of orders in month unit', xlab='Month-Year', runvals = T, linevals = T) #if taken sample size as days per month

### Scheduled Date
schdMonthYear_all <- data.frame(table(main_all$schdMonthYear))
colnames(schdMonthYear_all) <- c("monthYear", "freq")

qcc(schdMonthYear_all$freq, type = "u", sizes = schdMonthYear_all$freq, labels = schdMonthYear_all$monthYear, plot=T)
qcc(schdMonthYear_all$freq, type = "c", labels = schdMonthYear_all$monthYear, plot=T)

set.seed(7)
qic(y = freq, n = freq, x = monthYear, data = schdMonthYear_all, chart = 'u', multiply = 1000, main='Rate of scheduled order - u chart', ylab='Rate of schedules in month-year unit', xlab='Month-Year', runvals = T, linevals = T)
qic(y = freq, x = monthYear, data = schdMonthYear_all, chart = 'run', main='Count of schedules - run chart', ylab='Count of schedules in month-year unit', xlab='Month-Year', runvals = T, linevals = T)

schdMonthYear_schd <- data.frame(table(main_schd$schdMonthYear))
colnames(schdMonthYear_schd) <- c("monthYear", "freq")

qcc(schdMonthYear_schd$freq, type = "u", sizes = schdMonthYear_schd$freq, labels = schdMonthYear_schd$monthYear, plot=T)
qcc(schdMonthYear_schd$freq, type = "c", labels = schdMonthYear_schd$monthYear, plot=T)

set.seed(7)
qic(y = freq, n = freq, x = monthYear, data = schdMonthYear_schd, chart = 'u', multiply = 1000, main='Rate of scheduled order - u chart', ylab='Rate of schedules in month-year unit', xlab='Month-Year', runvals = T, linevals = T)
qic(y = freq, x = monthYear, data = schdMonthYear_schd, chart = 'run', main='Count of schedules - run chart', ylab='Count of schedules in month-year unit', xlab='Month-Year', runvals = T, linevals = T)

schdMonthYear_cpt <- data.frame(table(main_cpt$cptMonthYear))
colnames(schdMonthYear_cpt) <- c("monthYear", "freq")

qcc(schdMonthYear_cpt$freq, type = "u", sizes = schdMonthYear_cpt$freq, labels = schdMonthYear_cpt$monthYear, plot=T)
qcc(schdMonthYear_cpt$freq, type = "c", labels = schdMonthYear_cpt$monthYear, plot=T)

set.seed(7)
qic(y = freq, n = freq, x = monthYear, data = schdMonthYear_cpt, chart = 'u', multiply = 1000, main='Rate of scheduled order - u chart', ylab='Rate of schedules in month-year unit', xlab='Month-Year', runvals = T, linevals = T)
qic(y = freq, x = monthYear, data = schdMonthYear_cpt, chart = 'run', main='Count of schedules - run chart', ylab='Count of schedules in month-year unit', xlab='Month-Year', runvals = T, linevals = T)

rstMonthYear_cpt <- data.frame(table(main_cpt$rstMonthYear))
colnames(rstMonthYear_cpt) <- c("monthYear", "freq")

qcc(rstMonthYear_cpt$freq, type = "u", sizes = rstMonthYear_cpt$freq, labels = rstMonthYear_cpt$monthYear, plot=T)
qcc(rstMonthYear_cpt$freq, type = "c", labels = rstMonthYear_cpt$monthYear, plot=T)

set.seed(7)
qic(y = freq, n = freq, x = monthYear, data = rstMonthYear_cpt, chart = 'u', multiply = 1000, main='Rate of scheduled order - u chart', ylab='Rate of schedules in month-year unit', xlab='Month-Year', runvals = T, linevals = T)
qic(y = freq, x = monthYear, data = rstMonthYear_cpt, chart = 'run', main='Count of schedules - run chart', ylab='Count of schedules in month-year unit', xlab='Month-Year', runvals = T, linevals = T)


# ggplot(main_processed, aes(x = main_processed$daysDiff_attendanceAppoint)) +
#   geom_histogram(binwidth = 2, color = "black", aes(y=..density..,fill=..count..)) +
#   scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C") +
#   geom_density(color = "blue", fill = "lightblue", alpha = 0.5) +  # Add density curve
#   labs(x = "Difference of days between Attendance and Appointment date", y = "Density") +  # Customize axis labels
#   stat_function(fun=dnorm, color="red", args=list(mean=mean(main_processed$daysDiff_attendanceAppoint,na.rm = T), sd=sd(main_processed$daysDiff_attendanceAppoint,na.rm = T))) +
#   theme_minimal()  # Use a minimal theme


# Two variables
library(tidyverse)
library(plotly)
library(patchwork)

dept_specialty <- data.frame(table(main_all$`Sub Department`, main_all$`Ordering Specialty Description`))
colnames(dept_specialty) <- c("subDept","specialty","freq")
dept_specialty <- dept_specialty %>%
  arrange(desc(freq)) %>%
  slice(1:45)
dept_specialty_plot <- ggplot(dept_specialty, aes(x = reorder(specialty, -freq), y = freq, fill = subDept)) +
  geom_col( position = "dodge", show.legend=F) +
  labs(x = "Specialty") +
  scale_fill_brewer(palette = "Pastel1") +
  theme(text=element_text(size=8), axis.title = element_text(size=10), axis.text.x = element_text(angle = -90, vjust = .5))


dept_orderGrp <- data.frame(table(main_all$`Sub Department`, main_all$`Order Location Group`))
colnames(dept_orderGrp) <- c("subDept","orderGrp","freq")
dept_orderGrp <- dept_orderGrp %>%
  arrange(desc(freq)) %>%
  slice(1:10)
dept_orderGrp_plot <- ggplot(dept_orderGrp, aes(x = reorder(orderGrp, -freq), y = freq, fill = subDept)) +
  geom_col(position = "dodge") +
  labs(x = "Order Location Group") +
  scale_fill_brewer(palette = "Pastel1") +
  theme(text=element_text(size=8), axis.title = element_text(size=10), axis.text.x = element_text(angle = -90, vjust = .5), legend.position = c(.8,.8))


dept_episode <- data.frame(table(main_all$`Sub Department`, main_all$`Episode Type`))
colnames(dept_episode) <- c("subDept","episodeType","freq")
dept_episode <- dept_episode %>%
  arrange(desc(freq)) %>%
  slice(1:4)
dept_episode_plot <- ggplot(dept_episode, aes(x = reorder(episodeType, -freq), y = freq, fill = subDept)) +
  geom_col(position = "dodge", show.legend=F) +
  labs(x = "Episode Type") +
  scale_fill_brewer(palette = "Pastel1") +
  theme(text=element_text(size=8), axis.title = element_text(size=10), axis.text.x = element_text(angle = -90, vjust = .5))


dept_mediCardHolder <- data.frame(table(main_all$`Sub Department`, main_all$`Medical Card Holder`))
colnames(dept_mediCardHolder) <- c("subDept","mediCardHolder","freq")
dept_mediCardHolder <- dept_mediCardHolder %>%
  arrange(desc(freq)) %>%
  slice(1:2)
dept_mediCardHolder_plot <- ggplot(dept_mediCardHolder, aes(x = reorder(mediCardHolder, -freq), y = freq, fill = subDept)) +
  geom_col(position = "dodge", show.legend=F) +
  labs(x = "Medical Card Holder") +
  scale_fill_brewer(palette = "Pastel1") +
  theme(text=element_text(size=8), axis.title = element_text(size=10), axis.text.x = element_text(angle = 90, vjust = .5))


dept_privateIn <- data.frame(table(main_all$`Sub Department`, main_all$`Private Indicator`))
colnames(dept_privateIn) <- c("subDept","privateIndicator","freq")
dept_privateIn <- dept_privateIn %>%
  arrange(desc(freq)) %>%
  slice(1:2)
dept_privateIn_plot <- ggplot(dept_privateIn, aes(x = reorder(privateIndicator, -freq), y = freq, fill = subDept)) +
  geom_col(position = "dodge", show.legend=F) +
  labs(x = "Private Indicator") +
  scale_fill_brewer(palette = "Pastel1") +
  theme(text=element_text(size=8), axis.title = element_text(size=10), axis.text.x = element_text(angle = -90, vjust = .5), legend.position = c(.8,.8))


dept_insuSch <- data.frame(table(main_all$`Sub Department`, main_all$`Insurance Scheme`))
colnames(dept_insuSch) <- c("subDept","insuranceScheme","freq")
dept_insuSch <- dept_insuSch %>%
  arrange(desc(freq)) %>%
  slice(1:15)
dept_insuSch_plot <- ggplot(dept_insuSch, aes(x = reorder(insuranceScheme, -freq), y = freq, fill = subDept)) +
  geom_col(position = "dodge") +
  labs(x = "Insurance Scheme") +
  scale_fill_brewer(palette = "Pastel1") +
  theme(text=element_text(size=8), axis.title = element_text(size=10), axis.text.x = element_text(angle = -90, vjust = .5), legend.position = c(.8,.8))


dept_itemPrior <- data.frame(table(main_all$`Sub Department`, main_all$`Item Priority`))
colnames(dept_itemPrior) <- c("subDept","itemPriority","freq")
dept_itemPrior <- dept_itemPrior %>%
  arrange(desc(freq)) %>%
  slice(1:6)
dept_itemPrior_plot <- ggplot(dept_itemPrior, aes(x = reorder(itemPriority, -freq), y = freq, fill = subDept)) +
  geom_col(position = "dodge", show.legend=F) +
  labs(x = "Item Priority") +
  scale_fill_brewer(palette = "Pastel1") +
  theme(text=element_text(size=8), axis.title = element_text(size=10), axis.text.x = element_text(angle = -90, vjust = .5))


dept_itemNo <- data.frame(table(main_all$`Sub Department`, main_all$`No Order Items`))
colnames(dept_itemNo) <- c("subDept","numOrderItems","freq")
dept_itemNo <- dept_itemNo %>%
  arrange(desc(freq)) %>%
  slice(1:15)
dept_itemNo_plot <- ggplot(dept_itemNo, aes(x = reorder(numOrderItems, -freq), y = freq, fill = subDept)) +
  geom_col(position = "dodge") +
  labs(x = "Number of Order Items") +
  scale_fill_brewer(palette = "Pastel1") +
  theme(text=element_text(size=8), axis.title = element_text(size=10), axis.text.x = element_text(angle = -90, vjust = .5), legend.position = c(.8,.8))


dept_futuBr <- data.frame(table(main_all$`Sub Department`, main_all$`Future Breach`))
colnames(dept_futuBr) <- c("subDept","futureBreach","freq")
dept_futuBr <- dept_futuBr %>%
  arrange(desc(freq)) %>%
  slice(1:4)
dept_futuBr_plot <- ggplot(dept_futuBr, aes(x = reorder(futureBreach, -freq), y = freq, fill = subDept)) +
  geom_col(position = "dodge", show.legend=F) +
  labs(x = "Number of Future Breach") +
  scale_fill_brewer(palette = "Pastel1") +
  theme(text=element_text(size=8), axis.title = element_text(size=10), axis.text.x = element_text(angle = -90, vjust = .5), legend.position = c(.8,.8))


dept_specialty_plot
dept_episode_plot|dept_orderGrp_plot
dept_itemPrior_plot + dept_futuBr_plot / dept_itemNo_plot
dept_insuSch_plot| dept_mediCardHolder_plot + dept_privateIn_plot


## Factors by order time
dept_orderDate <- data.frame(table(main_all$`Sub Department`, main_all$`Order Date`))
colnames(dept_orderDate) <- c("subDept","orderDate", "freq")

dept_orderDate <- dept_orderDate %>%
  mutate(
    orderDay = weekdays(as.Date(orderDate,format="%d/%m/%Y")),
    orderMonth = format(as.Date(orderDate,format="%d/%m/%Y","%m"))
    )

ggplot(dept_orderDate, aes(x = orderDay, y = freq, group = subDept)) +
  geom_line(aes(color=subDept, linetype=subDept)) + 
  geom_point() +
  labs(title = "Specialty & Order Day 2020-2023",
       x = "Order Day", y= "Episode Frequency") +
  theme_fivethirtyeight() +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

dept_schdDate <- data.frame(table(main_all$`Sub Department`, main_all$`Schedule Date`))
colnames(dept_schdDate) <- c("subDept","schdDate","freq")
ggplot(dept_schdDate, aes(x = orderGrp, y = freq, group = subDept)) +
  geom_bar(aes(color=subDept, linetype=subDept)) + 
  geom_point() +
  labs(title = "Radiology Types & Order Location Group 2020-2023",
       x = "Order Location Group", y= "Episode Frequency") +
  theme_fivethirtyeight() +
  theme(axis.text = element_text(angle=90, hjust=1, vjust=.5))

deptTime <- data.frame(table(main_all$`Sub Department`, main_all$`Order MonthYear`))
recordTypeBooked_tb$bookedMonthYear <- as.yearmon(paste(year(recordTypeBooked_tb$Var2), month(recordTypeBooked_tb$Var2)), "%Y %m") #change date from char format to numeric by using library(zoo)
#recordTypeBooked_tb$bookedMonthYear <- year(recordTypeBooked_tb$Var2) * 100 + month(recordTypeBooked_tb$Var2)

### values in x, y axis need to be in numerical format
recordTypeBooked_tb %>%
  group_by(bookedMonthYear) %>%
  mutate(sum_booking = sum(Freq, na.rm=T)) %>%
  slice(1) %>% #attendance
  ungroup() %>%
  ggplot(aes(x=bookedMonthYear)) +
  geom_point(aes(y=Freq, color=Var1)) +
  geom_line(aes(y=Freq, color=Var1), linewidth=.5, alpha=.8) +
  scale_y_continuous(labels = scales::number) +
  labs(title = "Number of Attendances over Booked Date",
       subtitle = "How do Record Types differ by Booked Date?",
       x = "Month-Year", y = "Total No.", color = "Record Types") +
  theme_fivethirtyeight() +
  theme(axis.title = element_text(), axis.text.x = element_text(angle = -90, vjust = .5))

recordTypeBooked_tb %>%
  group_by(bookedMonthYear) %>%
  mutate(sum_booking = sum(Freq, na.rm=T)) %>%
  slice(2) %>% #cancellation
  ungroup() %>%
  ggplot(aes(x=bookedMonthYear)) +
  geom_point(aes(y=Freq, color=Var1)) +
  geom_line(aes(y=Freq, color=Var1), linewidth=.5, alpha=.8) +
  scale_y_continuous(labels = scales::number) +
  labs(title = "Number of Cancellations over Booked Date",
       subtitle = "How do Record Types differ by Booked Date?",
       x = "Month-Year", y = "Total No.", color = "Record Types") +
  theme_fivethirtyeight() +
  theme(axis.title = element_text(), axis.text.x = element_text(angle = -90, vjust = .5))

recordTypeBooked_tb %>%
  group_by(bookedMonthYear) %>%
  mutate(sum_booking = sum(Freq, na.rm=T)) %>%
  slice(3) %>% #dna
  ungroup() %>%
  ggplot(aes(x=bookedMonthYear)) +
  geom_point(aes(y=Freq, color=Var1)) +
  geom_line(aes(y=Freq, color=Var1), linewidth=.5, alpha=.8) +
  scale_y_continuous(labels = scales::number) +
  labs(title = "Number of DNAs over Booked Date",
       subtitle = "How do Record Types differ by Booked Date?",
       x = "Month-Year", y = "Total No.", color = "Record Types") +
  theme_fivethirtyeight() +
  theme(axis.title = element_text(), axis.text.x = element_text(angle = -90, vjust = .5))

# recordTypeBooked_tb %>%
#   group_by(bookedMonthYear) %>%
#   mutate(sum_booking = sum(Freq, na.rm=T)) %>%
#   slice(1) %>%
#   ungroup() %>%
#   ggplot(aes(x=bookedMonthYear,y=Freq, group=interaction(bookedMonthYear,Var1))) +
#   geom_boxplot() +
#   labs(title = "Number of Record Types over Booked Date",
#        x = "Month-Year", y = "Total No.", color = "Record Types") +
#   theme_fivethirtyeight() +
#   theme(axis.title = element_text(), axis.text.x = element_text(angle = -90, vjust = .5))

## Appointment date
recordTypeAppt_tb <- data.frame(table(main_processed$Record.Type, main_processed$Appointment.Date))
recordTypeAppt_tb$apptMonthYear <- as.yearmon(paste(year(recordTypeAppt_tb$Var2), month(recordTypeAppt_tb$Var2)), "%Y %m") #change date from char format to numeric by using library(zoo)

### values in x, y axis need to be in numerical format
recordTypeAppt_tb %>%
  group_by(apptMonthYear) %>%
  mutate(sum_booking = sum(Freq, na.rm=T)) %>%
  slice(2) %>% #start with cancellation as no appt date for attendance
  ungroup() %>%
  ggplot(aes(x=apptMonthYear, y=Freq, color=Var1)) +
  geom_point(aes(y=Freq, color=Var1)) +
  geom_line(aes(y=Freq, color=Var1), linewidth=.5, alpha=.8) +
  scale_y_continuous(labels = scales::number) +
  labs(title = "Number of Cancellations over Appointment Time",
       subtitle = "How do Record Types differ by Appointment Time?",
       x = "Month-Year", y = "Number of Record Types", color = "Record Types") +
  theme_fivethirtyeight() +
  theme(axis.title = element_text(), axis.text.x = element_text(angle = -90, vjust = .5))

recordTypeAppt_tb %>%
  group_by(apptMonthYear) %>%
  mutate(sum_booking = sum(Freq, na.rm=T)) %>%
  slice(3) %>% #dna
  ungroup() %>%
  ggplot(aes(x=apptMonthYear, y=Freq, color=Var1)) +
  geom_point(aes(y=Freq, color=Var1)) +
  geom_line(aes(y=Freq, color=Var1), linewidth=.5, alpha=.8) +
  scale_y_continuous(labels = scales::number) +
  labs(title = "Number of DNAs over Appointment Time",
       subtitle = "How do Record Types differ by Appointment Time?",
       x = "Month-Year", y = "Number of Record Types", color = "Record Types") +
  theme_fivethirtyeight() +
  theme(axis.title = element_text(), axis.text.x = element_text(angle = -90, vjust = .5))


## Attendance date
recordTypeAtd_tb <- data.frame(table(main_processed$Record.Type,main_processed$Attendance.Date,main_processed$New.Attendances))
recordTypeAtd_tb$atdMonthYear <- as.yearmon(paste(year(recordTypeAtd_tb$Var2), month(recordTypeAtd_tb$Var2)), "%Y %m") #change date from char format to numeric by using library(zoo)

### values in x, y axis need to be in numerical format
recordTypeAtd_tb %>%
  group_by(atdMonthYear) %>%
  mutate(sum_booking = sum(Freq, na.rm=T)) %>%
  slice(1) %>% #attendances, no attendance date for cancellation/DNA
  ungroup() %>%
  ggplot(aes(x=atdMonthYear, y=Freq, color=Var1)) +
  geom_point(aes(y=Freq, color=Var1)) +
  geom_line(aes(y=Freq, color=Var1), linewidth=.5, alpha=.8) +
  scale_y_continuous(labels = scales::number) +
  labs(title = "Number of Attendances over Attendance Time",
       subtitle = "How do Record Types differ by Attendance Time?",
       x = "Month-Year", y = "Number of Record Types", color = "Record Types") +
  theme_fivethirtyeight() +
  theme(axis.title = element_text(), axis.text.x = element_text(angle = -90, vjust = .5))

recordTypeAtd_tb %>%
  group_by(atdMonthYear) %>%
  mutate(sum_booking = sum(Freq, na.rm=T)) %>%
  slice(1) %>% #new attendances
  ungroup() %>%
  ggplot(aes(x=atdMonthYear, y=Freq, color=Var3)) +
  geom_point(aes(y=Freq, color=Var3)) +
  geom_line(aes(y=Freq, color=Var3), linewidth=.5, alpha=.8) +
  scale_y_continuous(labels = scales::number) +
  labs(title = "Number of New Attendances over Attendance Time",
       x = "Month-Year", y = "Number of Record Types", color = "Record Types") +
  theme_fivethirtyeight() +
  theme(axis.title = element_text(), axis.text.x = element_text(angle = -90, vjust = .5)) 

recordTypeAtd_tb %>%
  group_by(atdMonthYear) %>%
  mutate(sum_booking = sum(Freq, na.rm=T)) %>%
  slice(2) %>% #return attendances
  ungroup() %>%
  ggplot(aes(x=atdMonthYear, y=Freq, color=Var3)) +
  geom_point(aes(y=Freq, color=Var3)) +
  geom_line(aes(y=Freq, color=Var3), linewidth=.5, alpha=.8) +
  scale_y_continuous(labels = scales::number) +
  labs(title = "Number of Return Attendances over Attendance Time",
       x = "Month-Year", y = "Number of Record Types", color = "Record Types") +
  theme_fivethirtyeight() +
  theme(axis.title = element_text(), axis.text.x = element_text(angle = -90, vjust = .5))

## Indicator
indicator_tb <- data.frame(table(main_processed$No.Cancels,main_processed$Attendance.Date,main_processed$Cancelled.Indicator,main_processed$Rebooked.Indicator))
# library(reshape2)
# indicator_tb <- rename(indicator_tb, c(Var1="Cancels",Var2="atdDate",Var3="")) #check the old and new name of variables to match
indicator_tb$atdMonthYear <- as.yearmon(paste(year(recordTypeAtd_tb$Var2), month(recordTypeAtd_tb$Var2)), "%Y %m") #change date from char format to numeric by using library(zoo)

### values in x, y axis need to be in numerical format
# indicator_tb %>%
#   group_by(atdMonthYear) %>%
#   mutate(sum_booking = sum(Freq, na.rm=T)) %>%
#   slice(1) %>% #attendances, no attendance date for cancellation/DNA
#   ungroup() %>%
#   ggplot(aes(x=atdMonthYear, y=Freq, color=Var3)) +
#   geom_point(aes(y=Freq, color=Var3)) +
#   geom_line(aes(y=Freq, color=Var3), linewidth=.5, alpha=.8) +
#   scale_y_continuous(labels = scales::number) +
#   labs(title = "Number of Cancelled Indicator over Attendance Time",
#        x = "Month-Year", y = "Number of Cancelled Indicator", color = "Cancelled indicator") +
#   theme_fivethirtyeight() +
#   theme(axis.title = element_text(), axis.text.x = element_text(angle = -90, vjust = .5))

```


# Correlation of outcome and predictor (nominal and nominal)
## Episodes and factors
```{r correlation, total}
 
 ### Radiology Type epidoses
#library(dplyr)
CrossTable(main_all$`Sub Department`, main_all$`Ordering Specialty Description`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Sub Department`, main_all$`Order Location Group`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Sub Department`, main_all$`Episode Type`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Sub Department`, main_all$`Insurance Scheme`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Sub Department`, main_all$`Item Priority`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Sub Department`, main_all$`Medical Card Holder`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Sub Department`, main_all$`Private Indicator`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Sub Department`, main_all$schdTime, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Sub Department`, main_all$`Scheduled MonthYear`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Sub Department`, main_all$schdDay, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Sub Department`, main_all$schdMonth, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Sub Department`, main_all$schdYear, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Sub Department`, main_all$`Order MonthYear`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Sub Department`, main_all$orderDay, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Sub Department`, main_all$orderMonth, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Sub Department`, main_all$orderYear, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Sub Department`, main_all$Gender, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Sub Department`, main_all$`No Order Items`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)


### Specialty episodes
CrossTable(main_all$`Ordering Specialty Description`, main_all$`Order Location Group`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Ordering Specialty Description`, main_all$`Episode Type`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Ordering Specialty Description`, main_all$`Insurance Scheme`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Ordering Specialty Description`, main_all$`Item Priority`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Ordering Specialty Description`, main_all$`Medical Card Holder`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Ordering Specialty Description`, main_all$`Private Indicator`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Ordering Specialty Description`, main_all$schdTime, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Ordering Specialty Description`, main_all$`Scheduled MonthYear`, digits=2, fisher=F, chisq=TRUE, expected=TRUE) #not enough sample size in each group
CrossTable(main_all$`Ordering Specialty Description`, main_all$schdDay, digits=2, fisher=F, chisq=TRUE, expected=TRUE) #not enough sample size in each group
CrossTable(main_all$`Ordering Specialty Description`, main_all$schdMonth, digits=2, fisher=F, chisq=TRUE, expected=TRUE) #not enough sample size in each group
CrossTable(main_all$`Ordering Specialty Description`, main_all$schdYear, digits=2, fisher=F, chisq=TRUE, expected=TRUE) #not enough sample size in each group

CrossTable(main_all$`Ordering Specialty Description`, main_all$`Order MonthYear`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Ordering Specialty Description`, main_all$orderDay, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Ordering Specialty Description`, main_all$orderMonth, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Ordering Specialty Description`, main_all$orderYear, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Ordering Specialty Description`, main_all$Gender, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Ordering Specialty Description`, main_all$`No Order Items`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)


### Order Location Group episodes
CrossTable(main_all$`Order Location Group`, main_all$`Episode Type`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Order Location Group`, main_all$`Insurance Scheme`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Order Location Group`, main_all$`Item Priority`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Order Location Group`, main_all$`Medical Card Holder`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Order Location Group`, main_all$`Private Indicator`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Order Location Group`, main_all$schdTime, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Order Location Group`, main_all$`Scheduled MonthYear`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Order Location Group`, main_all$schdDay, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Order Location Group`, main_all$schdMonth, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Order Location Group`, main_all$schdYear, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Order Location Group`, main_all$`Order MonthYear`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Order Location Group`, main_all$orderDay, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Order Location Group`, main_all$orderMonth, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Order Location Group`, main_all$orderYear, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Order Location Group`, main_all$Gender, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Order Location Group`, main_all$`No Order Items`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)


### Episode Type episodes
CrossTable(main_all$`Episode Type`, main_all$`Insurance Scheme`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Episode Type`, main_all$`Item Priority`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Episode Type`, main_all$`Medical Card Holder`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Episode Type`, main_all$`Private Indicator`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Episode Type`, main_all$schdTime, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Episode Type`, main_all$`Scheduled MonthYear`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Episode Type`, main_all$schdDay, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Episode Type`, main_all$schdMonth, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Episode Type`, main_all$schdYear, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Episode Type`, main_all$`Order MonthYear`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Episode Type`, main_all$orderDay, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Episode Type`, main_all$orderMonth, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Episode Type`, main_all$orderYear, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Episode Type`, main_all$Gender, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Episode Type`, main_all$`No Order Items`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)


### Insurance Scheme episodes
CrossTable(main_all$`Insurance Scheme`, main_all$`Item Priority`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Insurance Scheme`, main_all$`Medical Card Holder`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Insurance Scheme`, main_all$`Private Indicator`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Insurance Scheme`, main_all$schdTime, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Insurance Scheme`, main_all$`Scheduled MonthYear`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Insurance Scheme`, main_all$schdDay, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Insurance Scheme`, main_all$schdMonth, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Insurance Scheme`, main_all$schdYear, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Insurance Scheme`, main_all$`Order MonthYear`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Insurance Scheme`, main_all$orderDay, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Insurance Scheme`, main_all$orderMonth, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Insurance Scheme`, main_all$orderYear, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Insurance Scheme`, main_all$Gender, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Insurance Scheme`, main_all$`No Order Items`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

### Item Priority episodes
CrossTable(main_all$`Item Priority`, main_all$`Medical Card Holder`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Item Priority`, main_all$`Private Indicator`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Item Priority`, main_all$schdTime, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Item Priority`, main_all$`Scheduled MonthYear`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Item Priority`, main_all$schdDay, digits=2, fisher=F, chisq=TRUE, expected=TRUE) #not enough sample size in each group
CrossTable(main_all$`Item Priority`, main_all$schdMonth, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Item Priority`, main_all$schdYear, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Item Priority`, main_all$`Order MonthYear`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Item Priority`, main_all$orderDay, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Item Priority`, main_all$orderMonth, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Item Priority`, main_all$orderYear, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Item Priority`, main_all$Gender, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Item Priority`, main_all$`No Order Items`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)


### Medical Card Holder episodes
CrossTable(main_all$`Medical Card Holder`, main_all$`Private Indicator`, digits=2, fisher=T, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Medical Card Holder`, main_all$schdTime, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Medical Card Holder`, main_all$`Scheduled MonthYear`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Medical Card Holder`, main_all$schdDay, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Medical Card Holder`, main_all$schdMonth, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Medical Card Holder`, main_all$schdYear, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Medical Card Holder`, main_all$`Order MonthYear`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Medical Card Holder`, main_all$orderDay, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Medical Card Holder`, main_all$orderMonth, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Medical Card Holder`, main_all$orderYear, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Medical Card Holder`, main_all$Gender, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Medical Card Holder`, main_all$`No Order Items`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)


### Private Indicator episodes
CrossTable(main_all$`Private Indicator`, main_all$schdTime, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Private Indicator`, main_all$`Scheduled MonthYear`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Private Indicator`, main_all$schdDay, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Private Indicator`, main_all$schdMonth, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Private Indicator`, main_all$schdYear, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Private Indicator`, main_all$`Order MonthYear`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Private Indicator`, main_all$orderDay, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Private Indicator`, main_all$orderMonth, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Private Indicator`, main_all$orderYear, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_all$`Private Indicator`, main_all$Gender, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$`Private Indicator`, main_all$`No Order Items`, digits=2, fisher=F, chisq=TRUE, expected=TRUE)


### Order & Schedule Date
CrossTable(main_all$orderDay, main_all$schdDay, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_all$orderMonth, main_all$schdMonth, digits=2, fisher=F, chisq=TRUE, expected=TRUE)


### & difference of days
bartlett.test(main_all$daysDiff_orderSchd,main_all$orderDay)
kruskal.test(main_all$daysDiff_orderSchd ~ main_all$orderDay, data=main_all)
dunn_result <- dunn.test(as.numeric(main_all$daysDiff_orderSchd), g=main_all$orderDay, method="bonferroni")

bartlett.test(main_all$daysDiff_orderSchd,main_all$orderMonth)
kruskal.test(main_all$daysDiff_orderSchd ~ main_all$orderMonth, data=main_all)
dunn_result <- dunn.test(as.numeric(main_all$daysDiff_orderSchd), g=main_all$orderMonth, method="bonferroni")

bartlett.test(main_all$daysDiff_orderSchd,main_all$schdDay)
kruskal.test(main_all$daysDiff_orderSchd ~ main_all$schdDay, data=main_all)
dunn_result <- dunn.test(as.numeric(main_all$daysDiff_orderSchd), g=main_all$schdDay, method="bonferroni")

bartlett.test(main_all$daysDiff_orderSchd,main_all$schdMonth)
kruskal.test(main_all$daysDiff_orderSchd ~ main_all$schdMonth, data=main_all)
dunn_result <- dunn.test(as.numeric(main_all$daysDiff_orderSchd), g=main_all$schdMonth, method="bonferroni")

bartlett.test(main_all$daysDiff_orderSchd,main_all$schdTime)
kruskal.test(main_all$daysDiff_orderSchd ~ main_all$schdTime, data=main_all)
dunn_result <- dunn.test(main_all$daysDiff_orderSchd, g=main_all$schdTime, method="bonferroni")


## Record Type & Patient characteristics relevance
CrossTable(main_processed$Gender, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Age.at.Attendance.Cat.HSE, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE) #age group
bartlett.test(main_processed$Age.at.Attendance,main_processed$Record.Type) # unequal variances
kruskal.test(main_processed$Age.at.Attendance ~ main_processed$Record.Type, data=main_processed)
dunn_result <- dunn.test(main_processed$Age.at.Attendance, g=main_processed$Record.Type, method="bonferroni") #run library(dunn.test) for this test

CrossTable(main_processed$Area.of.Residence_recode, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$addressDiff, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

```

## Cancellation & DNA correlation
* Clinic relevance: Consultant, Insurance scheme, Eligibility, Hospital catchment, Clinic type, Clinic code, Referral source, Booking Type
* Date relevance: booked Day, booked Month-Year, appointment Day, appointment Month-Year, daysDiff_AppointBooked, attendance Day, attendance Month-Year
* Patient relevance: Gender, Age at attendance, Area of residence, address difference
* Cancellation group: Reason for cancellation, Rebooked indicator

```{r correlation, cancellation & DNA}
# cancellation (No.Cancels=1) & DNA (No.Cancels=0)

## clinic relevance
CrossTable(main_processed$Clinic.Type_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Clinic.Code, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$NurseFlag, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referral.Source_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
# CrossTable(main_processed$Referring.Hospital, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Consultant_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Insurance.Scheme_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Eligibility_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Booking.Type_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Hospital.Catchment_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)


## date relevance
### difference between Booked and Appointment factors in Cancellation

CrossTable(main_processed$bookedDay, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$bookedMonthYear, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$appointmentDay, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$appointmentMonthYear, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Rebooked.Indicator, main_processed$No.Cancels, digits=2, fisher=T, chisq=TRUE, expected=TRUE)

leveneTest(daysDiff_AppointBooked ~ as.factor(No.Cancels), data=main_processed) #leveneTest is Ha
t.test(daysDiff_AppointBooked ~ No.Cancels, var.equal=F, data=main_processed)

## patient characteristics relevance
CrossTable(main_processed$Gender, main_processed$No.Cancels, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Age.at.Attendance.Cat.HSE, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # age group
leveneTest(Age.at.Attendance ~ as.factor(No.Cancels), data=main_processed)
t.test(Age.at.Attendance ~ No.Cancels, var.equal=FALSE, data=main_processed) #leveneTest is Ha

CrossTable(main_processed$Area.of.Residence_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # remove Na or impute where no residence
CrossTable(main_processed$addressDiff, main_processed$No.Cancels, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Reason.for.Cancellation_recode, main_processed$Cancellation.Group, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Cancellation.Group, main_processed$Rebooked.Indicator, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Reason.for.Cancellation_recode, main_processed$Rebooked.Indicator, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
```


# New Attendance correlation
* Clinic relevance: Consultant, Insurance scheme, Eligibility, Hospital catchment, Clinic type, Clinic code, Nurse flag, Referral source, Booking Type
* Date relevance: daysDiff_attendanceBooked daysDiff_AppointBooked
* Patient relevance: Gender, Age at attendance, Area of residence
* Cancellation group: Reason for cancellation, Rebooked indicator

```{r correlation, new attendance}
## clinic relevance
CrossTable(main_processed$Clinic.Type_recode, main_processed$New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Clinic.Code, main_processed$New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$NurseFlag, main_processed$New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referral.Source_recode, main_processed$New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
#CrossTable(main_processed$Referring.Hospital, main_processed$New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Consultant_recode, main_processed$New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Insurance.Scheme_recode, main_processed$New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Eligibility_recode, main_processed$New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Booking.Type_recode, main_processed$New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Hospital.Catchment_recode, main_processed$New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)


## date relevance
CrossTable(main_processed$bookedDay, main_processed$New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$bookedMonthYear, main_processed$New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Attendance.Day, main_processed$New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Attendance.MonthYear, main_processed$New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

leveneTest(daysDiff_attendanceBooked ~ as.factor(New.Attendances), data=main_processed) #leveneTest is Ha
t.test(daysDiff_attendanceBooked ~ New.Attendances, var.equal=F, data=main_processed)

## patient characteristics relevance
CrossTable(main_processed$Gender, main_processed$New.Attendances, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Age.at.Attendance.Cat.HSE, main_processed$New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # age group
leveneTest(Age.at.Attendance ~ as.factor(New.Attendances), data=main_processed)
t.test(Age.at.Attendance ~ New.Attendances, var.equal=FALSE, data=main_processed) #leveneTest is Ha
wilcox.test(main_processed$Age.at.Attendance ~ main_processed$New.Attendances)

CrossTable(main_processed$Area.of.Residence_recode, main_processed$New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # remove Na or impute where no residence
CrossTable(main_processed$addressDiff, main_processed$New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
```
# Cancellation
```{r cancellation description}
# convert the non-numeric variables to numeric values (the lower the number, the higher frequency)
main_processed$Referral.Source_numeric <- mapvalues(main_processed$Referral.Source_recode, from = c("CLINIC","EMERGENCY DEPT","GP","Elsew outside Mater","WARD","Elsew of Mater","OTHER CONSULTANT"), to = c(1:7))
main_processed$Clinic.Type_numeric <- mapvalues(main_processed$Clinic.Type_recode, from = c("GENERAL","SPINErelated","MUSCULOSKELETALrelated","PODIATRY","UPPER_LIMBrelated","NotLocatedInMater","BACK_PAINrelated","NTPFfund"), to = c(1:8))
main_processed$Consultant_numeric <- mapvalues(main_processed$Consultant_recode, from = c("OHEIRE","MOROP","COLGAN","SYNNOT","XX","MORRI","LYONSF","BRIAIN","MARA","TIMLIN","ONEISH","BUTLER","CASSID","DODDSM","HYNESD","CASHMA","MURMAR","LYNCSA","MCSORK","ORTCON","CARMOO","FRA"), to = c(1:22))
main_processed$Insurance.Scheme_numeric <- mapvalues(main_processed$Insurance.Scheme_recode, from = c("U","D","V","B","I","S","G","O","E","P","J","H","A","C","M"), to = c(1:15))
main_processed$Eligibility_numeric <- mapvalues(main_processed$Eligibility_recode, from = c("NON MEDICAL CARD","MEDICAL CARD","ELIGIBILITY UNKNOWN","EXEMPT","RESEARCH/NATIONAL PROG.","ACUTE UNCLASSIFIED","NON ACUTE UNCLASSIFIED"), to = c(1:7))
main_processed$Booking.Type_numeric <- mapvalues(main_processed$Booking.Type_recode, from = c("RETURN","NEW","WARD"), to = c(1:3))
main_processed$Hospital.Catchment_numeric <- mapvalues(main_processed$Hospital.Catchment_recode, from = c("National","Mater","Connolly","Beaumont","James","Vincents","Tallaght","International"), to = c(1:8))
main_processed$appointmentDay_numeric <- mapvalues(main_processed$appointmentDay, from = c("Wednesday","Monday","Thursday","Tuesday","Friday","Sunday"), to = c(1:6))
main_processed$appointmentMonthYear_numeric <- mapvalues(main_processed$appointmentMonthYear, from = c("Mar 2020","Jan 2021","Mar 2022","Apr 2020","May 2022","Nov 2021","Sep 2022","Sep 2020","Apr 2022","Sep 2021","Aug 2022","Jan 2022","Jun 2022","Jul 2022","Feb 2022","Dec 2021","Jul 2021","Oct 2021","Jan 2023","Nov 2022","Aug 2021","May 2023","May 2021","Oct 2023","Nov 2023","Jun 2021","Feb 2021","Feb 2020","Oct 2022","Mar 2021","Apr 2023","Sep 2023","Aug 2023","Oct 2020","Jul 2023","Apr 2021","Mar 2023","Nov 2020","Dec 2022","Jun 2020","Aug 2020","May 2020","Dec 2023","Dec 2020","Jun 2023","Feb 2023","Jul 2020","Jan 2020"), to = c(1:48))
main_processed$bookedDay_numeric <- mapvalues(main_processed$bookedDay, from = c("Monday","Tuesday","Sunday","Wednesday","Saturday","Friday","Thursday"), to = c(1:7))
main_processed$bookedMonthYear_numeric <- mapvalues(main_processed$bookedMonthYear, from = c("Jan 2020","Feb 2020","Sep 2020","Mar 2020","Jul 2020","Aug 2020","Oct 2020","Nov 2020","Jun 2020","May 2020","Apr 2020","Dec 2020"), to = c(1:12))
main_processed$Gender_numeric <- mapvalues(main_processed$Gender, from = c("Male","Female","Unknown"), to = c(1:3))
main_processed$Area.of.Residence_numeric <- mapvalues(main_processed$Area.of.Residence_recode, from = c("DUBLIN NTH","EASTERN & MIDLAND REGION (excl.Dublin)","DUBLIN STH","SOUTHERN REGION","NORTHERN WESTERN REGION","UNKNOWN","OUTSIDE IRELAND"), to = c(1:7))
main_processed$Rebooked.Indicator_numeric <- mapvalues(main_processed$Rebooked.Indicator, from = c("Yes","No"), to = c(1,0))
main_processed$Cancellation.Group_numeric <- mapvalues(main_processed$Cancellation.Group, from = c("Hospital","Patient","DNA","Validation"), to = c(1:4))
main_processed$Reason.for.Cancellation_numeric <- mapvalues(main_processed$Reason.for.Cancellation_recode, from = c("No show","By Patient","By Cslt/AN/Tech","By Hospital","By Covid","By Patient-health conditions"), to = c(1:6))

write.csv(main_processed[,c("Gender_numeric","Age.at.Attendance","Area.of.Residence_numeric","addressDiff","No.Cancels","Referral.Source_numeric","Clinic.Type_numeric","Consultant_numeric","Insurance.Scheme_numeric","Eligibility_numeric","Hospital.Catchment_numeric","Booking.Type_numeric","Rebooked.Indicator_numeric","Cancellation.Group_numeric","Reason.for.Cancellation_numeric","appointmentDay_numeric","appointmentMonthYear_numeric","bookedDay_numeric","bookedMonthYear_numeric","daysDiff_AppointBooked")],"spineDetails_cancel.csv")

main_processed_cancel <- read.csv("spineDetails_cancel.csv")
main_processed_cancel <- subset(main_processed_cancel, is.na(main_processed_cancel$No.Cancels)==F)

main_processed_cancel <- main_processed_cancel %>% mutate_if(is.character,as.numeric)
cor(main_processed_cancel, method = "spearman")
library(corrplot)
corrplot(cor(main_processed_cancel))

gg_cancellationGroup <- ggplot(main_processed,aes(x=Cancellation.Group)) +
  labs(x = "Cancellation Group") +
  scale_x_discrete(limits=c("Hospital","Patient","DNA","Validation")) +
  geom_bar(colour="blue", fill="lightblue")
gg_cancellationGroup

gg_cancelReason <- ggplot(main_processed,aes(x=Reason.for.Cancellation_recode)) +
  labs(x = "Reason for Cancellation") +
  scale_x_discrete(limits=c("No show","By Patient","By Cslt/AN/Tech","By Hospital","By Covid","By Patient-health conditions"), guide = guide_axis(n.dodge = 2)) +
  geom_bar(colour="blue", fill="lightblue")
gg_cancelReason

```

# Logistic Regression model
## Build baseline model of cancellations with predictors
* strong correlation between (Referral source and Booking type), (Clinic type and Booking type), (Consultant and Appointment day), (Consultant and Clinic code)
* moderate correlation between (Appointment day and Clinic code), (Clinic type and Clinic code), (Clinic type and Referral source), (Clinic type and No.Cancels), (Clinic type and Age)
* weak correlation between (Booking type and Age), (Booking type and Clinic code)

1. Model 1: No.Cancels ~ Clinic.Type_numeric + Referral.Source_numeric + Consultant_numeric + Insurance.Scheme_numeric + Eligibility_numeric + Booking.Type_numeric + Hospital.Catchment_numeric + Rebooked.Indicator_numeric + Reason.for.Cancellation_numeric
* AIC: 14333
* AUC: 0.91
* nagelkerke R squared: 0.6
* Confusion matrix: accuracy (0.84), precision (0.32), recall (0.1), prevalence (0.23), detection rate (0.18)

2. Model 2: No.Cancels ~ appointmentDay_numeric + appointmentMonthYear_numeric + bookedDay_numeric + bookedMonthYear_numeric + daysDiff_AppointBooked
* AIC: 26316
* AUC: 0.61
* nagelkerke R squared: 0.04
* Confusion matrix: accuracy (0.5), precision (0.77), recall (1), prevalence (0.23), detection rate (0)

3. Model 3: No.Cancels ~ Gender_numeric + Age.at.Attendance + Area.of.Residence_numeric + addressDiff
* AIC: 26518
* AUC: 0.59
* nagelkerke R squared: 0.028
* Confusion matrix: accuracy (0.5), precision (0.997), recall (0.77), prevalence (0.23), detection rate (0.002)

4. Model: No.Cancels ~ Gender_numeric + Age.at.Attendance + Area.of.Residence_numeric + addressDiff + Referral.Source_numeric + Clinic.Type_numeric + Consultant_numeric + Insurance.Scheme_numeric + Eligibility_numeric + Hospital.Catchment_numeric + Booking.Type_numeric + appointmentDay_numeric + appointmentMonthYear_numeric + bookedDay_numeric + bookedMonthYear_numeric
* AIC: 14031
* AUC: 0.91
* nagelkerke R squared: 0.61
* Confusion matrix: accuracy (0.81), precision (0.92), recall (0.88), prevalence (0.23), detection rate (0.17)

***
> 
+ AIC the smallest AIC provides the best model
+ AUC (area under the ROC curve) the closer to 1 the more correct predictions
+ predict: predict the values based on the previous data behaviors and thus by fitting that data to the model
+ plogis: Logistic Cumulative Distribution Function
+ Cox and Snell R square: Analysis_Survival_Cox Regression. The coefficients in a Cox regression relate to hazard; a positive coefficient indicates a worse prognosis and a negative coefficient indicates a protective effect of the variable with which it is associated
+ nagelkerke: a measure of goodness of fit in logistic regression analysis, a modification of the Cox and Snell R Square. Ranges [0,1], a common rule of thumb (<= 0.2: weak relationship, 0.2-0.4: moderate, >= 0.4: strong relationship).
+ confusionMatrix: matrix between actual and predicted values
+ vif = 1/(1-Ri^2) = 1/tolerance. Vif >4 or tolearance <0.25: multicollinearity might exist; vif >10 or tolerance <0.1: signigicant multicollinearity that needs to be corrected. Vif interpret if model has problems estimating the coefficient

_variables need to be recoded as numeric to run any regression_

<!-- ```{r model of cancellation} -->

<!-- # Create training and test dataset samples  -->
<!-- sample <- sample(c(TRUE,FALSE), nrow(main_processed_cancel), replace=TRUE, prob=c(0.7,0.3)) -->
<!-- train <- main_processed_cancel[sample, ] -->
<!-- test <- main_processed_cancel[!sample, ] -->

<!-- # Fit the logistic regression model -->
<!-- ## with Clinic relevance -->
<!-- # map probabilities to log-odds, predicted probabilities are within the [0, 1] range -->
<!-- logmodel1 <- glm(formula = No.Cancels ~ Clinic.Type_numeric + Referral.Source_numeric + Consultant_numeric + Insurance.Scheme_numeric + Eligibility_numeric + Booking.Type_numeric + Hospital.Catchment_numeric + Rebooked.Indicator_numeric + Reason.for.Cancellation_numeric, family = binomial(link = "logit"), data = train) -->

<!-- summary(logmodel1) -->

<!-- exp(coefficients(logmodel1)) -->

<!-- # Assess Model Fit -->
<!-- nagelkerke(logmodel1) #library(rcompanion) -->

<!-- # Calculate the VIF values of each variable to see if multicollinearity is a problem -->
<!-- vif(logmodel1) #library(regclass), library(car) -->

<!-- # Calculate probability of cancellation for each individual in test dataset -->
<!-- ## Obtain predicted probabilities: continuous values (not factors) -->
<!-- predicted1 <- predict(logmodel1, test, type=c("response")) #library(rbenchmark) -->

<!-- ## Find the optimal probability -->
<!-- # library(InformationValue) -->
<!-- # Warning in install.packages : -->
<!-- #   unable to access index for repository https://cran.rstudio.com/src/contrib: -->
<!-- #   cannot open URL 'https://cran.rstudio.com/src/contrib/PACKAGES' -->
<!-- # Warning in install.packages : -->
<!-- #   package ‘InformationValue’ is not available for this version of R -->

<!-- # optimal <-optimalCutoff(test$No.Cancels,predicted1)[1] -->
<!-- # optimal -->

<!-- ## Convert predicted probabilities to binary predictions -->
<!-- binary_predicted1 <- ifelse(predicted1 >= 0.5, 1, 0) #threshold=0.5 -->

<!-- ## Create confusion matrix to show predictions compared to the actual defaults  -->
<!-- confusionMatrix(factor(binary_predicted1), factor(test$No.Cancels)) #library(caret), test$No.Cancels represents the actual response variable, binary_predictions are the binary predictions based on the threshold -->
<!-- confusion_matrix(logmodel1) #library(regclass) -->
<!-- confusion_matrix(logmodel1, test) #library(regclass) -->

<!-- ## Calculate the sensitivity, specificity and total misclassification error if not shown in confusionMatrix -->
<!-- # sensitivity(factor(binary_predicted1), factor(test$No.Cancels)) -->
<!-- # specificity(factor(binary_predicted1), factor(test$No.Cancels)) -->
<!-- # misClassError(factor(binary_predicted1), factor(test$No.Cancels), threshold=optimal) -->

<!-- ## Plot ROC curve which displays the % of True positivity predicted by the model as the prediction probability cutoff is [0,1] -->
<!-- # plot.roc(binary_predicted1, test$No.Cancels) #library(pROC) plot.ROC or plotROC -->

<!-- # lroc(logmodel1,graph=T) #for AUC but has a very loooong $diagnostic.table -->


<!-- ## with Date relevance -->
<!-- logmodel2 <- glm(formula = No.Cancels ~ appointmentDay_numeric + appointmentMonthYear_numeric + bookedDay_numeric + bookedMonthYear_numeric + daysDiff_AppointBooked, family = binomial(link = "logit"), data = train) -->

<!-- summary(logmodel2) -->

<!-- # exp(coefficients(logmodel2)) -->

<!-- nagelkerke(logmodel2) -->

<!-- # Obtain predicted probabilities: continuous values (not factors) -->
<!-- predicted2 <- predict(logmodel2, test, type=c("response")) #library(rbenchmark) -->
<!-- # Convert predicted probabilities to binary predictions -->
<!-- binary_predicted2 <- ifelse(predicted2 >= 0.5, 1, 0) #threshold=0.5 -->
<!-- # Create confusion matrix, library(caret) -->
<!-- confusionMatrix(factor(binary_predicted2), factor(test$No.Cancels)) #test$No.Cancels represents the actual response variable, binary_predictions are the binary predictions based on the threshold -->
<!-- confusion_matrix(logmodel2) #library(regclass) -->
<!-- confusion_matrix(logmodel2, test) #library(regclass) -->

<!-- vif(logmodel2) -->


<!-- ## with Patient relevance -->
<!-- logmodel3 <- glm(formula = No.Cancels ~ Gender_numeric + Age.at.Attendance + Area.of.Residence_numeric + addressDiff, family = binomial(link = "logit"), data = train) -->

<!-- summary(logmodel3) -->

<!-- # exp(coefficients(logmodel3)) -->

<!-- nagelkerke(logmodel3) -->

<!-- # Obtain predicted probabilities: continuous values (not factors) -->
<!-- predicted3 <- predict(logmodel3, test, type=c("response")) #library(rbenchmark) -->
<!-- # Convert predicted probabilities to binary predictions -->
<!-- binary_predicted3 <- ifelse(predicted3 >= 0.5, 1, 0) #threshold=0.5 -->
<!-- # Create confusion matrix, library(caret) -->
<!-- confusionMatrix(factor(binary_predicted3), factor(test$No.Cancels)) #test$No.Cancels represents the actual response variable, binary_predictions are the binary predictions based on the threshold -->
<!-- confusion_matrix(logmodel3) #library(regclass) -->
<!-- confusion_matrix(logmodel3, test) #library(regclass) -->

<!-- vif(logmodel3) -->


<!-- ## with all predictors -->
<!-- logmodel <- glm(formula = No.Cancels ~ Gender_numeric + Age.at.Attendance + Area.of.Residence_numeric + addressDiff + Referral.Source_numeric + Clinic.Type_numeric + Consultant_numeric + Insurance.Scheme_numeric + Eligibility_numeric + Hospital.Catchment_numeric + Booking.Type_numeric + Rebooked.Indicator_numeric + Reason.for.Cancellation_numeric + appointmentDay_numeric + appointmentMonthYear_numeric + bookedDay_numeric + bookedMonthYear_numeric + daysDiff_AppointBooked, family = binomial(link = "logit"), data = train) -->

<!-- summary(logmodel) -->

<!-- exp(coefficients(logmodel)) -->

<!-- nagelkerke(logmodel) -->

<!-- # Obtain predicted probabilities: continuous values (not factors) -->
<!-- predicted <- predict(logmodel, test, type=c("response")) #library(rbenchmark) -->
<!-- # Convert predicted probabilities to binary predictions -->
<!-- binary_predicted <- ifelse(predicted >= 0.5, 1, 0) #threshold=0.5 -->
<!-- # Create confusion matrix, library(caret) -->
<!-- confusionMatrix(factor(binary_predicted), factor(test$No.Cancels)) #test$No.Cancels represents the actual response variable, binary_predictions are the binary predictions based on the threshold -->
<!-- confusion_matrix(logmodel) #library(regclass) -->
<!-- confusion_matrix(logmodel, test) #library(regclass) -->

<!-- vif(logmodel) -->

<!-- #library(epiDisplay), give plot plus AUC -->
<!-- logistic.display(logmodel) -->
<!-- lroc <- lroc(logmodel, title=TRUE, cex.main=1, cex.lab=1, col.lab="blue", cex.axis=1,  -->
<!-- lwd=3) -->
<!-- lroc1 <- lroc(logmodel1, add=TRUE, line.col="brown", lty=2) -->
<!-- lroc2 <- lroc(logmodel2, add=TRUE, line.col="darkgreen", lty=2) -->
<!-- lroc3 <- lroc(logmodel3, add=TRUE, line.col="purple", lty=2) -->
<!-- legend("bottomright",legend=c("all predictors", "clinic relevance", "date relevance", "patient relevance"), -->
<!--         lty=1:2, col=c("red","brown","darkgreen","purple"), bg="white") -->
<!-- lrtest(logmodel,logmodel1) #library(lmtest) -->
<!-- lrtest(logmodel,logmodel2) -->
<!-- lrtest(logmodel,logmodel3) -->

<!-- ``` -->
<!-- # Comparing factors in models -->
<!-- ```{r comparing models} -->
<!-- # anova(logmodel1, logmodel2, logmodel3, logmodel, test="Chisq") #run if there is other ML models -->
<!-- #library(survey) -->
<!-- regTermTest(logmodel,"Referral.Source_numeric") -->
<!-- regTermTest(logmodel,"Clinic.Type_numeric") -->
<!-- regTermTest(logmodel,"Consultant_numeric") -->
<!-- regTermTest(logmodel,"Insurance.Scheme_numeric") -->
<!-- regTermTest(logmodel,"Eligibility_numeric") -->
<!-- regTermTest(logmodel,"Booking.Type_numeric") -->
<!-- regTermTest(logmodel,"Hospital.Catchment_numeric") -->
<!-- regTermTest(logmodel,"appointmentDay_numeric") -->
<!-- regTermTest(logmodel,"appointmentMonthYear_numeric") -->
<!-- regTermTest(logmodel,"bookedDay_numeric") -->
<!-- regTermTest(logmodel,"bookedMonthYear_numeric") -->
<!-- regTermTest(logmodel,"Gender_numeric") -->
<!-- # regTermTest(logmodel,"Age.at.Attendance") -->
<!-- regTermTest(logmodel,"Area.of.Residence_numeric") -->
<!-- regTermTest(logmodel,"addressDiff") -->

<!-- # Find feature/ variable importance from the model -->
<!-- varImp(logmodel) #library(caret) -->

<!-- # Report model outcome -->
<!-- library(report) -->
<!-- report(logmodel) -->
<!-- ``` -->


<!-- # Decision Tree model -->
<!-- ## Model of cancellations with predictors -->
<!-- * strong correlation between (Referral source and Booking type), (Clinic type and Booking type), (Consultant and Appointment day), (Consultant and Clinic code) -->

<!-- ```{r Decision Tree} -->
<!-- # Create training and test data -->

<!-- ## Define the columns to exclude -->
<!-- cols_to_exclude <- c("Record.Type","NurseFlag","Medical.Record.Number","Attendance.Day","Attendance.MonthYear","Attendance.Date", "Attendance.Type_recode","Attendance.Year","Attendance.Month","Age.at.Attendance.Cat.HSE","Pathway.Number","Present.Address","Home.Address","Appointment.Date","Referring.Hospital","Booked.Date", "No.Attendances","New.Attendances","Cancellation.Group","Reason.for.Cancellation_recode","No.DNAs","daysDiff_attendanceAppoint","daysDiff_attendanceBooked") -->

<!-- ## Subset the data frame by excluding the specified columns -->
<!-- main_processed_cancel_dt <- main_processed[, !names(main_processed) %in% cols_to_exclude] -->
<!-- main_processed_cancel_dt <- subset(main_processed_cancel_dt, is.na(main_processed_cancel_dt$No.Cancels)==F) -->

<!-- sample_dt <- sample(c(TRUE,FALSE), nrow(main_processed_cancel_dt), replace=TRUE, prob=c(0.7,0.3)) -->
<!-- train_dt <- main_processed_cancel_dt[sample_dt, ] -->
<!-- test_dt <- main_processed_cancel_dt[!sample_dt, ] -->

<!-- # Train the model -->
<!-- X <- train_dt[, -which(names(train_dt) == "No.Cancels")] -->
<!-- y <- train_dt$No.Cancels -->

<!-- # Fit the decision tree model -->
<!-- cancel_dt <- rpart(y ~ ., data = X, method = "class",cp=0.05) #cp is the complexity parameter, split that not decreasing the overall lack of fit by a factor of cp is pruned, the default value of cp is 0.01 -->
<!-- summary(cancel_dt) -->

<!-- # Plot the decision tree -->
<!-- rpart.plot(cancel_dt, extra=104) -->
<!-- cancel_dt$variable.importance -->

<!-- # Predict the model with actual defaults in test data -->
<!-- cancel_pred_dt <- predict(cancel_dt, test_dt, type="class") -->
<!-- print(cancel_pred_dt) -->

<!-- # Evaluate the model -->
<!-- CrossTable(test_dt$No.Cancels, cancel_pred_dt, -->
<!--            prop.chisq = FALSE, prob.c = FALSE, prop.r = FALSE, -->
<!--            dnn = c('actual default','predicted default')) -->
<!-- table_cancel <- data.frame(value = as.factor(test_dt$No.Cancels), pred = cancel_pred_dt) -->
<!-- library(yardstick) -->
<!-- class_metrics <- metric_set(accuracy,precision,recall) #metric_set is function of library(yardstick) -->
<!-- class_metrics(table_cancel, truth = value, estimate = pred) -->

<!-- ``` -->

# Build baseline model of new attendances with predictors

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
