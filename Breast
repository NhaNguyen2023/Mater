---
title: "BreastCancer_Query_5_years"
author: "NhaNguyen"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


```{r load working space}
# Load environment
rm(list = ls())
library(readr)
library('dplyr')
library(ggplot2)
library(sqldf)
library("Rcmdr")  #continuous var
library(moments)  #skewness,kurtosis
library("plyr")   #categorical var
library(gridExtra)  #graph
library(car)  #Scatterplot matrix
library(gmodels)  #Evaluate the model, chi square correlation
library(Hmisc)  #Imputate missing values
#library(DMwR) #Compute the accuracy of imputation, but need to install the other packages
library(stats)  #multiple regression lm() function, lapply function
library(PerformanceAnalytics) #chart.Correlation (Scatterplot)
library(C50)
library(dataQualityR)
library(AppliedPredictiveModeling)  #Scatterplot
library(caret)  #classification & regression training

# Load file
breast <- read_csv("~/U/DataMgmt_Breast/BreastCancer_Query_5_years.csv")
write_csv(breast[,c("status","scale")],"~/U/DataMgmt_Breast/breastCancer.csv")
#write_csv(breast_append[,c("status","scale")],"~/...",append = T)
head(read_csv("~/U/DataMgmt_Breast/breastCancer.csv"))
breastCancer <- read_csv("~/U/DataMgmt_Breast/breastCancer.csv")
```


```{r inspection}
# Inspecting data
str(breastCancer)
head(breastCancer)
any(is.na(breastCancer))
colSums(is.na(breastCancer))
breastCancer$Parameter <- str_replace_all(breastCancer$Parameter, c(" " = "_"))
print(breastCancer)
```


```{r transformation}
# Transforming data

## Outcome description
breastCancer$cat_status_5y <- breastCancer$stutus_5_years
breastCancer$cat_status_studyCutoff <- breastCancer$Vital_status_recode_(study_cutoff_used)

## Predictor description (categorical)
print (is.factor(breastCancer$Total_number_of_in_situ/malignant_tumors_for_patient)
print (is.factor(breastCancer$Radiation_recode)
print (is.factor(breastCancer$Radiation_sequence_with_surgery)
print (is.factor(breastCancer$COD_to_site_recode)
print (is.factor(breastCancer$Race)
print (is.factor(breastCancer$Diagnosis_year)
print (is.factor(breastCancer$Last_fu_year)

## if not factor, apply the factor function
breastCancer$factor_totalMalignantTumors <- factor(breastCancer$Total_number_of_in_situ/malignant_tumors_for_patient)

## Transform categorical to numeric for running model if necessary
<!
breastCancer$cat_HER2 <- breastCancer$Derived_HER2_Recode_(2010+)
breastCancer$con_HER2[breastCancer$cat_HER2 = "Positive"] <- 3
breastCancer$con_HER2[breastCancer$cat_HER2 = "Boderline"] <- 2
breastCancer$con_HER2[breastCancer$cat_HER2 = "Unknown"] <- 1
breastCancer$con_HER2[breastCancer$cat_HER2 = "Negative"] <- 0
-->

## Data frame for nominal/ binary values of variables
cbind(table(breastCancer$cat_status_5y),prop.table(table(breastCancer$cat_status_5y)))
cbind(table(breastCancer$cat_status_studyCutoff),prop.table(table(breastCancer$cat_status_studyCutoff)))
cbind(table(breastCancer$),prop.table(table(breastCancer$)))
cbind(table(breastCancer$),prop.table(table(breastCancer$)))
cbind(table(breastCancer$),prop.table(table(breastCancer$)))
cbind(table(breastCancer$),prop.table(table(breastCancer$)))
cbind(table(breastCancer$),prop.table(table(breastCancer$)))
cbind(table(breastCancer$),prop.table(table(breastCancer$)))
cbind(table(breastCancer$),prop.table(table(breastCancer$)))
cbind(table(breastCancer$),prop.table(table(breastCancer$)))
cbind(table(breastCancer$),prop.table(table(breastCancer$)))
cbind(table(breastCancer$),prop.table(table(breastCancer$)))
breastCancer_tab <- table(breastCancer$, breastCancer$,)
addmargins(breastCancer)
prop.table(breastCancer)

cat("# # # The combined data table\n") # print a header
print(breastCancer_tab) # print the result

## Predictor description (numeric)
summary(breastCancer)
numSummary(breastCancer$Age_at_diagnosis)
numSummary(breastCancer$Regional_nodes_positive_(1988+))
numSummary(breastCancer$CS_tumor_size_(2004-2015))
numSummary(breastCancer$Regional_nodes_examined_(1988+))
numSummary(breastCancer$interva_years)


```{r normality}
# Creating graphs
count_status_5y <- table(breastCancer$cat_status_5y)
barplot(count_status_5y)

count_vital_status <- table(breastCancer$cat_status_studyCutoff)
barplot(count_vital_status)

gg <- ggplot(breastCancer, aes(x=breastCancer$Age_at_diagnosis))
gg <- gg + labs(x = "Age at diagnosis")
gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density..,fill=..count..))
gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(breastCancer$Age_at_diagnosis,na.rm = T), sd=sd(breastCancer$Age_at_diagnosis,na.rm = T)))
gg
qqnorm(breastCancer$Age_at_diagnosis)
qqline(breastCancer$Age_at_diagnosis, col=2)
boxplot(breastCancer$Age_at_diagnosis)
skewness((breastCancer$Age_at_diagnosis),na.rm = T)
kurtosis((breastCancer$Age_at_diagnosis),na.rm = T)

breastCancer_sub <- breastCancer
cutoffabove_breastCancer <- 50 + 1.5*IQR(breastCancer$Age_at_diagnosis,na.rm = T)
cutoffbelow_breastCancer <- 50 - 1.5*IQR(breastCancer$Age_at_diagnosis,na.rm = T)
breastCancer_sub <- subset(breastCancer, Age_at_diagnosis <= cutoffabove_breastCancer & Age_at_diagnosis >= cutoffbelow_breastCancer)
summary(breastCancer_sub$Age_at_diagnosis)
q1 <- qplot(x = Age_at_diagnosis, data = breastCancer, colour=I("red"), fill=I("white")) +
  theme_bw() +
  theme(
    plot.background = element_blank()
    ,panel.grid.major = element_blank()
    ,panel.grid.minor = element_blank()
    ,panel.border = element_blank()
  ) +
  theme(axis.line = element_line(color = 'red'))
q2 <- qplot(x = Age_at_diagnosis, data = breastCancer_sub, colour=I("blue"), fill=I("white")) + 
  scale_x_continuous(limits = c(12.5,87.5)) +
  theme_bw() +
  theme(
    plot.background = element_blank()
    ,panel.grid.major = element_blank()
    ,panel.grid.minor = element_blank()
    ,panel.border = element_blank()
  ) +
  theme(axis.line = element_line(color = 'blue'))
grid.arrange(q1, q2, ncol=1)



gg <- ggplot(efs, aes(x=efs$con_mental_workload))
gg <- gg + labs(x = "Mental workload score")
gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density..,fill=..count..))
gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(efs$con_mental_workload,na.rm = T), sd=sd(efs$con_mental_workload,na.rm = T)))
gg
qqnorm(efs$con_mental_workload)
qqline(efs$con_mental_workload, col=2)
boxplot(efs$con_mental_workload)
skewness((efs$con_mental_workload),na.rm = T)
kurtosis((efs$con_mental_workload),na.rm = T)

efs_sub <- efs
cutoffabove_efs <- 50 + 1.5*IQR(efs$con_mental_workload,na.rm = T)
cutoffbelow_efs <- 50 - 1.5*IQR(efs$con_mental_workload,na.rm = T)
efs_sub <- subset(efs, con_mental_workload <= cutoffabove_efs & con_mental_workload >= cutoffbelow_efs)
summary(efs_sub$con_mental_workload)
q5 <- qplot(x = con_mental_workload, data = efs, colour=I("red"), fill=I("white")) +
  theme_bw() +
  theme(
    plot.background = element_blank()
    ,panel.grid.major = element_blank()
    ,panel.grid.minor = element_blank()
    ,panel.border = element_blank()
  ) +
  theme(axis.line = element_line(color = 'red'))
q6 <- qplot(x = con_mental_workload, data = efs_sub, colour=I("blue"), fill=I("white")) + 
  scale_x_continuous(limits = c(12.5,87.5)) +
  theme_bw() +
  theme(
    plot.background = element_blank()
    ,panel.grid.major = element_blank()
    ,panel.grid.minor = element_blank()
    ,panel.border = element_blank()
  ) +
  theme(axis.line = element_line(color = 'blue'))
grid.arrange(q5, q6, ncol=1)


shapiro.test(nasa$con_mental_workload)
shapiro.test(wp$con_mental_workload)
shapiro.test(efs$con_mental_workload)

shapiro.test(log(nasa$con_mental_workload))
shapiro.test(sqrt(nasa$con_mental_workload))
hist(sqrt(nasa$con_mental_workload))
#kolmogorov-smirnov
```

```{correlation}
## Correlation of outcome and predictor (nominal and nominal)
crosstable(breastCancer$cat_status_studyCutoff, beastCancer$cat_status_5y, fisher=TRUE, chisq=TRUE, expected=TRUE)
crosstable(breastCancer$Total_number_of_in_situ/malignant_tumors_for_patient, beastCancer$cat_status_5y, fisher=TRUE, chisq=TRUE, expected=TRUE)
crosstable(breastCancer$, beastCancer$cat_status_5y, fisher=TRUE, chisq=TRUE, expected=TRUE)
crosstable(breastCancer$, beastCancer$cat_status_5y, fisher=TRUE, chisq=TRUE, expected=TRUE)
crosstable(breastCancer$, beastCancer$cat_status_5y, fisher=TRUE, chisq=TRUE, expected=TRUE)
crosstable(breastCancer$, beastCancer$cat_status_5y, fisher=TRUE, chisq=TRUE, expected=TRUE)
crosstable(breastCancer$, beastCancer$cat_status_5y, fisher=TRUE, chisq=TRUE, expected=TRUE)
crosstable(breastCancer$, beastCancer$cat_status_5y, fisher=TRUE, chisq=TRUE, expected=TRUE)
crosstable(breastCancer$, beastCancer$cat_status_5y, fisher=TRUE, chisq=TRUE, expected=TRUE)
crosstable(breastCancer$, beastCancer$cat_status_5y, fisher=TRUE, chisq=TRUE, expected=TRUE)
crosstable(breastCancer$, beastCancer$cat_status_5y, fisher=TRUE, chisq=TRUE, expected=TRUE)
crosstable(breastCancer$, beastCancer$cat_status_5y, fisher=TRUE, chisq=TRUE, expected=TRUE)
crosstable(breastCancer$, beastCancer$cat_status_5y, fisher=TRUE, chisq=TRUE, expected=TRUE)

## Correlation of outcome and predictor (nominal and scale) # if scale is parametric (normal distribution)
leveneTest(Age_at_diagnosis~cat_status_5y, data=breastCancer)
t.test(Age_at_diagnosis~cat_status_5y, var.equal=TRUE, data=breastCancer)

## Correlation of outcome and predictor (nominal and ordinal) # if scale is nonparametric (not normal distribution)
wilcox.test(breastCancer$cat_status_5y~breastCancer$Age_at_diagnosis)
```

```{r train & test set}

## Impute values
impute(nasa$con_mental_workload, median)
nasa$con_mental_workload[is.na(nasa$con_mental_workload)] <- median(nasa$con_mental_workload, na.rm = T)
any(is.na(nasa$con_mental_workload))
impute(efs$con_mental_workload, median)
efs$con_mental_workload[is.na(efs$con_mental_workload)] <- median(efs$con_mental_workload, na.rm = T)
any(is.na(efs$con_mental_workload))
## Randomise the Data 
nasa <- nasa[sample(1:nrow(nasa)), ]
wp <- wp[sample(1:nrow(wp)), ]
efs <- efs[sample(1:nrow(efs)), ]
## Split the data into train and test 70:30
train_nasa <- nasa[1:161,] 
test_nasa <- nasa[162:230,]
train_wp <- wp[1:154,] 
test_wp <- wp[155:217,]
train_efs <- efs[1:167,] 
test_efs <- efs[168:237,]

## Check zero & near zero-variance
nzv_nasa <- nearZeroVar(nasa[,13:20], saveMetrics = T)
nzv_nasa[nzv_nasa$nzv,][1:10,]
nzv_wp <- nearZeroVar(wp[,13:22], saveMetrics = T)
nzv_wp[nzv_wp$nzv,][1:10,]
nzv_efs <- nearZeroVar(efs[,13:34], saveMetrics = T)
nzv_efs[nzv_efs$nzv,][1:10,]

# Scatter plot matrix
## put histograms on the diagonal
panel.hist <- function(x, ...)
{
  usr <- par("usr"); on.exit(par(usr))
  par(usr = c(usr[1:2], 0, 1.5) )
  h <- hist(x, plot = FALSE)
  breaks <- h$breaks; nB <- length(breaks)
  y <- h$counts; y <- y/max(y)
  rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
## put (absolute) correlations on the upper panels, with size proportional to the correlations.
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
  usr <- par("usr"); on.exit(par(usr))
  par(usr = c(0, 1, 0, 1))
  r <- abs(cor(x, y))
  txt <- format(c(r, 0.123456789), digits = digits)[1]
  txt <- paste0(prefix, txt)
  if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
  text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(~con_mental_workload+con_mental+con_physical+con_temporal+con_performance+con_frustration+con_effort, data=train_nasa, main="Scatter plot matrix for NASA_MWL",
      panel = panel.smooth,
      cex = 1.5, pch = 24, bg = "light blue",
      diag.panel = panel.hist, cex.labels = 2, font.labels = 2,
      lower.panel = panel.smooth, upper.panel = panel.cor)
pairs(~con_mental_workload+con_solving_deciding+con_response_selection+con_task_space+con_verbal_material+con_visual_resources+con_auditory_resources+con_manual_response+con_speech_response, data=train_wp, main="Scatter plot matrix for WP_MWL",
      panel = panel.smooth,
      cex = 1.5, pch = 24, bg = "light blue",
      diag.panel = panel.hist, cex.labels = 2, font.labels = 2,
      lower.panel = panel.smooth, upper.panel = panel.cor)
pairs(~con_mental_workload+con_mental_demand+con_parallelism+con_temporal_demand+con_manual_Activity+con_visual_attention+con_effort+con_solving_deciding+con_frustration+con_context_bias+con_task_space+con_motivation+con_verbal_material+con_skill+con_auditory_attention+con_physical_demand+con_speech_response+con_utility+con_past_knowledge_expertise+con_arousal+con_performance, data=train_efs, main="Scatter plot matrix for EFS_MWL",
      panel = panel.smooth,
      cex = 1.5, pch = 24, bg = "light blue",
      diag.panel = panel.hist, cex.labels = 2, font.labels = 2,
      lower.panel = panel.smooth, upper.panel = panel.cor)

train_nasa.num <- train_nasa[, sapply(train_nasa, is.numeric)]
chart.Correlation(train_nasa.num, histogram = T)
train_wp.num <- train_wp[, sapply(train_wp, is.numeric)]
chart.Correlation(train_wp.num, histogram = T)
train_efs.num <- train_efs[, sapply(train_efs, is.numeric)]
chart.Correlation(train_efs.num, histogram = T)
# corrplot(M, method) ; M <- corr(nasa)
```

```{r Linear Regression model}
# Multiple Regression modeling
## Linear Regression
nasa_model_reg01 <- glm(formula = con_mental_workload ~ con_mental+con_physical+con_performance+con_frustration+con_temporal+con_effort, data = nasaTrain01) 
summary(nasa_model_reg01)

wp_model_reg <- glm(formula = con_mental_workload ~ con_solving_deciding+con_response_selection+con_task_space+con_verbal_material+con_visual_resources+con_auditory_resources+con_manual_response+con_speech_response, data = wpTrain) 
summary(wp_model_reg)

efs_model_reg <- glm(formula = con_mental_workload ~ con_mental_demand+con_parallelism+con_temporal_demand+con_manual_Activity+con_visual_attention+con_effort+con_solving_deciding+con_frustration+con_context_bias+con_task_space+con_motivation+con_verbal_material+con_skill+con_auditory_attention+con_physical_demand+con_speech_response+con_utility+con_past_knowledge_expertise+con_arousal+con_performance, data = efsTrain) 
summary(efs_model_reg)

### Making predictions
nasa_pred_reg01 <- predict(nasa_model_reg01, nasaTest01)
nasa.reg01 <- data.frame(R2 = R2(nasa_pred_reg01, nasaTest01$con_mental_workload),RMSE = RMSE(nasa_pred_reg01, nasaTest01$con_mental_workload))
nasa.reg <- rbind(nasa.reg01,nasa.reg02,nasa.reg03,nasa.reg04,nasa.reg05,nasa.reg06,nasa.reg07,nasa.reg08,nasa.reg09,nasa.reg10)
nasa.reg$scale <- "nasa"

wp_pred_reg <- predict(wp_model_reg, wpTest)


efs_pred_reg <- predict(efs_model_reg, efsTest)
t.test(efsTest$con_mental_workload, efs_pred_reg, paired = T)
# efs.mse <- mse(efsTest$con_mental_workload, efs_pred_reg)

nasa_reg <- data.frame(nasa_pred_reg,nasaTest$con_mental_workload,nasaTest$scale)
wp_reg <- data.frame(wp_pred_reg,wpTest$con_mental_workload,wpTest$scale)
efs_reg <- data.frame(efs_pred_reg,efsTest$con_mental_workload,efsTest$scale)
mwl_reg <- rbind(nasa_reg,wp_reg)
mwl_reg <- rbind(mwl_reg,efs_reg)
colnames(mwl_reg) <- c("predicted","actual","scale")

### RMSE out of lm() result
RSS1 <- c(crossprod(nasa_model_reg$residuals))
MSE1 <- RSS1 / length(nasa_model_reg$residuals)
RMSE1 <- sqrt(MSE1)
sig2_1 <- RSS1 / nasa_model_reg$df.residual

RSS2 <- c(crossprod(wp_model_reg$residuals))
MSE2 <- RSS2 / length(wp_model_reg$residuals)
RMSE2 <- sqrt(MSE2)
sig2_2 <- RSS2 / wp_model_reg$df.residual

RSS3 <- c(crossprod(efs_model_reg$residuals))
MSE3 <- RSS3 / length(efs_model_reg$residuals)
RMSE3 <- sqrt(MSE3)
sig2_3 <- RSS3 / efs_model_reg$df.residual

anova(nasa_model_reg, wp_model_reg, efs_model_reg, test='Chisq')

ggplot(aes(x=scale, y=predicted, color=scale, fill=I("white")), data=nasa_reg) +
  geom_boxplot() +
  geom_hline(aes(yintercept = median(age)), colour = 'black') +
  theme_bw() +
  theme(
    plot.background = element_blank()
    ,panel.grid.major = element_blank()
    ,panel.grid.minor = element_blank()
    ,panel.border = element_blank()
    ,text = element_text(size=18)
  ) +
  theme(axis.line = element_line(color = 'black')) +
  ggtitle('R-squared Boxplot by Mental workload measures')

write_csv(nasaTest[,c("mental_workload","scale")],"~/Documents/03_Dissertation/mentalWorkload.csv")
write_csv(wpTest[,c("mental_workload","scale")],"~/Documents/03_Dissertation/mentalWorkload.csv",append = T)
write_csv(efsTest[,c("mental_workload","scale")],"~/Documents/03_Dissertation/mentalWorkload.csv",append = T)
head(read_csv("~/Documents/03_Dissertation/mentalWorkload.csv"))
mwl <- read_csv("~/Documents/03_Dissertation/mentalWorkload.csv")


## Logistic Regression
### Transforming target value & modeling
#### NASA
nasa_model_log <- glm(formula = mental_workload_recode ~ con_mental+con_physical+con_performance+con_frustration+con_temporal+con_effort, 
                      data = nasaTrain, family = binomial(link='logit'))
summary(nasa_model_log)

#### WP
wp_model_log <- glm(formula = mental_workload_recode ~ con_solving_deciding+con_response_selection+con_task_space+con_verbal_material+con_visual_resources+con_auditory_resources+con_manual_response+con_speech_response, 
                    data = wpTrain, family = binomial(link='logit'))
summary(wp_model_log)

#### EFS
efs_model_log <- glm(formula = mental_workload_recode ~ con_mental_demand+con_parallelism+con_temporal_demand+con_manual_Activity+con_visual_attention+con_effort+con_solving_deciding+con_frustration+con_context_bias+con_task_space+con_motivation+con_verbal_material+con_skill+con_auditory_attention+con_physical_demand+con_speech_response+con_utility+con_past_knowledge_expertise+con_arousal+con_performance, 
                     data = efsTrain, family = binomial(link='logit'))
summary(efs_model_log)

### Making predictions
#### NASA
exp(coefficients(nasa_model_log))
predicted1 <- plogis(predict(nasa_model_log, nasaTest))
#### WP
exp(coefficients(wp_model_log))
predicted2 <- plogis(predict(wp_model_log, wpTest))
#### EFS
exp(coefficients(efs_model_log))
predicted3 <- plogis(predict(efs_model_log, efsTest))

### Displaying results
#### NASA
nagelkerke(nasa_model_log)
confusionMatrix(nasa_model_log$mental_workload_recode, predicted, threshold = 0.8)
sensitivity(nasa_model_log$mental_workload_recode, predicted, threshold = 0.8)
specificity(nasa_model_log$mental_workload_recode, predicted, threshold = 0.5)
vif(nasa_model_log)
#### WP
nagelkerke(wp_model_log)
confusionMatrix(wp_model_log$mental_workload_recode, predicted, threshold = 0.8)
sensitivity(wp_model_log$mental_workload_recode, predicted, threshold = 0.8)
specificity(wp_model_log$mental_workload_recode, predicted, threshold = 0.5)
vif(wp_model_log)
#### EFS
nagelkerke(efs_model_log)
confusionMatrix(efs_model_log$mental_workload_recode, predicted, threshold = 0.8)
sensitivity(efs_model_log$mental_workload_recode, predicted, threshold = 0.8)
specificity(efs_model_log$mental_workload_recode, predicted, threshold = 0.5)
vif(efs_model_log)

anova(nasa_model_log, wp_model_log, efs_model_log,test = "Chisq")

## Building the model
nasa_model_lr <- lm(con_mental_workload ~ price + bore + horsepower*city_mpg*highway_mpg + 
                   wheel_base*length*width*curb_weight*engine_size, data = train_nasa)
wp_model_lr <- lm(con_mental_workload ~ normalized_losses + bore + horsepower*city_mpg*highway_mpg + 
                    wheel_base*length*width*curb_weight*engine_size, data = train_wp)
efs_model_lr <- lm(con_mental_workload ~ normalized_losses + bore + horsepower*city_mpg*highway_mpg + 
                    wheel_base*length*width*curb_weight*engine_size, data = train_efs)
## Making predictions
nasa_pred_lr <- predict(nasa_model_lr, test_nasa)
wp_pred_lr <- predict(wp_model_lr, test_wp)
efs_pred_lr <- predict(efs_model_lr, test_efs)
print(nasa_pred_lr)
print(wp_pred_lr)
print(efs_pred_lr)
## Displaying results
summary(nasa_model_lr)
summary(wp_model_lr)
summary(efs_model_lr)
## RMSE out of lm() result
RSS1 <- c(crossprod(nasa_model_lr$residuals))
MSE1 <- RSS1 / length(nasa_model_lr$residuals)
RMSE1 <- sqrt(MSE1)
sig2_1 <- RSS1 / nasa_model_lr$df.residual

RSS2 <- c(crossprod(wp_model_lr$residuals))
MSE2 <- RSS2 / length(wp_model_lr$residuals)
RMSE2 <- sqrt(MSE2)
sig2_2 <- RSS2 / wp_model_lr$df.residual

RSS3 <- c(crossprod(efs_model_lr$residuals))
MSE3 <- RSS3 / length(efs_model_lr$residuals)
RMSE3 <- sqrt(MSE3)
sig2_3 <- RSS3 / efs_model_lr$df.residual

```

```{r Decision Tree model}
# Train the model
nasa_model_dt <- C5.0(train_nasa, train_nasa$default)
wp_model_dt <- C5.0(train_wp, train_wp$default)
efs_model_dt <- C5.0(train_efs, train_efs$default)
summary(nasa_model_dt)
summary(wp_model_dt)
summary(efs_model_dt)
nasa_pred_dt <- predict(nasa_model_dt, test_nasa, type = "class")
wp_pred_dt <- predict(wp_model_dt, test_wp, type = "class")
efs_pred_dt <- predict(efs_model_dt, test_efs, type = "class")
print(nasa_pred_dt)
print(wp_pred_dt)
print(efs_pred_dt)
#sum(credit_pred == credit_test) / length(credit_pred)

# Evaluate the model
CrossTable(test_nasa$default, nasa_pred_dt,
           prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
           dnn = c('actual default', 'predicted default'))
CrossTable(test_wp$default, wp_pred_dt,
           prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
           dnn = c('actual default', 'predicted default'))
CrossTable(test_efs$default, efs_pred_dt,
           prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
           dnn = c('actual default', 'predicted default'))
```

```{r comparing}

```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
