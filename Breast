---
title: "breastPatientsDetail"
output: html_document
date: "2024-02-07"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Data Source: Mater Dive Port 7
# Load the file
```{r load working space, echo=FALSE}
## Load environment
rm(list = ls())
print(getwd())
setwd("C:/Users/User/Documents/RStudio/BreastDivePort_PatientsDetail")
print(getwd())

#library(dataQualityR) #package is not available for this version of R
library(stringr)
library(readr)
library(tidyverse) #table (frequency and proportion), install.packages("tidyverse")
library(tidyr) # CrossTable
library(dplyr) # CrossTable, install.packages("dplyr")
library(ggplot2)
library(qcc) #install
library(sqldf)
# library(Rcmdr)  #continuous var, numSummary function, install.packages("Rcmdr") ##not running if in hurry
library(gridExtra)  #graph

library(Hmisc)  #Imputate missing values
#library(DMwR) #Compute the accuracy of imputation, but need to install the other packages

library(psych) #install, describeBy
library(moments)  #skewness,kurtosis
library(plyr)   #categorical var, install.packages("plyr")
library(pastecs) #stat.desc
library(semTools) 
library(car)  #leveneTest, Scatterplot matrix

library(dunn.test) #install, non-parametric post-hoc test after Kruskal-Wallis
library(stats)  #multiple regression lm() function, lapply function
library(PerformanceAnalytics) #chart.Correlation (Scatterplot)

library(caret) #classification & regression training, confusionMatrix, varImp
library(rbenchmark) #plogis
library(rcompanion) #nagelkerke
library(regclass) #vif
# library(C50)
library(AppliedPredictiveModeling) #Scatterplot, install.packages('AppliedPredictiveModeling')
# library(rpart)
# library(rpart.plot)
library(pROC)  #cross validation
library(gmodels)  #Evaluate the model, CrossTable correlation, install.packages("gmodels")
library(epiDisplay) #plot with AUC for model prediction
library(survey) #comparing models, regTermTest
library(rattle)
library(RColorBrewer)

## Load file
main <- read.csv("BreastPatientsDetail_Clinic.csv")
main <- subset(main, Attendance.Year < 2024)
#sample <- main %>% group_by(main$Record.Type)
#samplePatients <- sample_frac(main,0.1,replace = F)

## Input variables
head(main)
View(main)
str(main)
summary(main)
allMissing = is.na(main)
counts = colSums(allMissing)
counts [counts>0]
#main_transform <- transform(main, score = as.numeric(score), sum_click = as.numeric(sum_click))
print(is.data.frame(main))


## Transforming data
# main_group <- main_processed %>% group_by(main_processed$Medical.Record.Number) #library(moments)
# main_group$freq_MRN_recode <- ifelse(count(main_group$Medical.Record.Number >= 34)==1,1,0)
#library(plyr)
main$Referral.Source_recode <- mapvalues(main$Referral.Source, from = c("C : CLINIC","G : GP","W : WARD","N : BREAST CHECK (NBSP)","H : OTHER HOSPITAL","S : SELF","O : OTHER CONSULTANT","R : ROOMS","A : EMERGENCY DEPT","B : HEALTH BOARD REFERRAL","F : FAMILY PLANNING","K : ED SMITHFIELD","V : VASCULAR LAB","X : HEALTH CENTRE REFERRAL","Q : REFERRED FROM CAWT INITIATIVE","D : DENTIST"), to = c("CLINIC","GP","WARD","BREAST CHECK (NBSP)","Elsewhere outside Mater","Elsewhere outside Mater","OTHER CONSULTANT","Elsewhere of Mater","EMERGENCY DEPT","Elsewhere outside Mater","Elsewhere of Mater","Elsewhere of Mater","Elsewhere of Mater","Elsewhere outside Mater","Elsewhere outside Mater","Elsewhere of Mater"))

main$Eligibility_recode <- mapvalues(main$Eligibility, from = c("02 : CAT 2 (NON MEDICAL CARD)","01 : CAT 1 (MEDICAL CARD)","08 : ELIGIBILITY UNKNOWN","12 : DAY CASE - EXEMPT STAT. CHG.","19 : STAFF EXEMPT-STATUTORY CHARGE","35 : INFECTIOUS OR SUSPECTED INFECT","11 : ANTI D/RESEARCH/TRIAL","23 : NATIONAL COLORECTAL SCREENING","16 : NTPF - EXEMPT STAT. CHG.","06 : NON EU-VISITOR","24 : DIABETIC RETINA TREATMENT","07 : RTA","17 : ARMY - EXEMPT STAT. CHG.","10 : UK/NI - EXEMPT STAT.CHG.","21 : THE GOVERNOR - PRISONERS","13 : LONG STAY - EXEMPT STAT. CHG.","25 : UKRAINIAN CITIZEN","20 : HAA CARD HEALTH AMENDMENT ACT","18 : EHIC - EXEMPT STAT. CHG.","05 : EU-VISITOR NO EHIC","26 : U16 EXEMPT STAT. CHARGE","30 : PENDING PATIENT DETAILS"), to = c("CAT 2 (NON MEDICAL CARD)","CAT 1 (MEDICAL CARD)","ELIGIBILITY UNKNOWN","EXEMPT","EXEMPT","ACUTE UNCLASSIFIED","RESEARCH/NATIONAL PROG.","RESEARCH/NATIONAL PROG.","EXEMPT","CAT 2 (NON MEDICAL CARD)","NON ACUTE UNCLASSIFIED","ACUTE UNCLASSIFIED","EXEMPT","EXEMPT","EXEMPT","EXEMPT","EXEMPT","RESEARCH/NATIONAL PROG.","EXEMPT","CAT 2 (NON MEDICAL CARD)","EXEMPT","CAT 2 (NON MEDICAL CARD)"))

dublin_nth <- c("0100","0101","0103","0105","0107","0109","0111","0113","0115","0117")
dublin_sth <- c("0200","0202","0204","0206","0208","0210","0212","0214","0216","0218","0220","0222","0224")
outside_irl <- c("3303","3310","3350","3501","3600")
other_eastern.midland_region <- c("2300","3100","2200","2400","0300","0500","2500","0400")
northern.western_region <- c("2900","3000","2600","2000","2700","1900","2800","2100")
southern_region <- c("0700","0600","1000","1700","1200","1300","1500","1600","0800","1101")
main <- main %>%     #library(plyr)
 mutate(Area.of.Residence_recode = case_when(
  substring(main$Area.of.Residence,0,4) %in% dublin_nth ~ "DUBLIN NTH",
  substring(main$Area.of.Residence,0,4) %in% dublin_sth ~ "DUBLIN STH",
  substring(main$Area.of.Residence,0,4) %in% other_eastern.midland_region ~ "EASTERN & MIDLAND REGION (excl.Dublin,Meath)",
  substring(main$Area.of.Residence,0,4) %in% northern.western_region ~ "NORTHERN WESTERN REGION",
  substring(main$Area.of.Residence,0,4) %in% southern_region ~ "SOUTHERN REGION",
  substring(main$Area.of.Residence,0,4) %in% outside_irl ~ "OUTSIDE IRELAND",
  substring(main$Area.of.Residence,0,4) == "3200" ~ "Meath",
  substring(main$Area.of.Residence,0,4) == "0000" ~ "UNKNOWN",
  TRUE ~ "Other counties"
))
head (main$Area.of.Residence_recode,10)
table(main$Area.of.Residence_recode)

main$Booking.Type_recode <- ifelse(main$Booking.Type == ":", ifelse(!duplicated(main$Medical.Record.Number), "N : NEW", "R : RETURN"), main$Booking.Type)

# main$Referring.Hospital <-

### Date calculation from Appointment/ Booking to Attendance
main$Attendance.Date <- as.Date(main$Attendance.Date, format="%d/%m/%y")

main$Appointment.Date <- as.POSIXct(main$Appointment.Date...Time,format="%Y%m%d %H:%M:%S",tz=Sys.timezone())
main$Appointment.Date <- as.Date(main$Appointment.Date, format="%d/%m/%y")
main$appointmentMonthYear <- substring(main$Appointment.Date,0,7)
main$appointmentDay <- weekdays(main$Appointment.Date)

main$Booked.Date <- as.POSIXct(main$Booked.Date,format="%Y/%m/%d",tz=Sys.timezone())
main$Booked.Date_new <- as.Date(main$Booked.Date, format="%d/%m/%y")
main$bookedMonthYear <- substring(main$Booked.Date,0,7)
main$bookedDay <- weekdays(main$Booked.Date)

main$daysDiff_attendanceAppoint <- difftime(main$Appointment.Date,main$Attendance.Date,units="days")
main$daysDiff_attendanceBooked <- difftime(main$Booked.Date,main$Attendance.Date,units="days")
main$daysDiff_AppointBooked <- difftime(main$Appointment.Date,main$Booked.Date,units="days")

main$addressDiff <- ifelse(main$Present.Address == main$Home.Address, 0, 1)

main$Rebooked.Indicator <- main$Rebooked.Indicator..HIS.

write.csv(main[,c("Record.Type","Clinic.Code","Clinic.Type","NurseFlag","Medical.Record.Number","Gender","Attendance.Day","Attendance.MonthYear","Attendance.Date","Attendance.Type.Description","Attendance.Year","Attendance.Month","Referral.Source_recode","Consultant","Insurance.Scheme","Eligibility_recode","Age.at.Attendance","Age.at.Attendance.Cat.HSE","Pathway.Number","Present.Address","Home.Address","Appointment.Date","appointmentMonthYear","appointmentDay","Area.of.Residence_recode","Referring.Hospital","Booking.Type_recode","Booked.Date_new","bookedMonthYear","bookedDay","Cancellation.Group","Reason.for.Cancellation.Desc","Rebooked.Indicator","Hospital.Catchment","No.Attendances","No.New.Attendances","No.Cancels","No.DNAs","daysDiff_attendanceAppoint","daysDiff_attendanceBooked","daysDiff_AppointBooked","addressDiff")],"breastDetails.csv")

main_processed <- read.csv("breastDetails.csv")
# main_processed <- as.matrix(main_processed) #convert data frame main_processed to matrix to replace NaN values
# main_processed <- replace(main_processed, is.nan(main_processed), 9999)
# main_processed_tibble <- as_tibble(main_processed) #library(tidyverse), tibble never changes [the type of the inputs, the names of variables], it only recycles inputs of length 1, and never creates row.names()

```


# Inspecting data
```{r inspection}

str(main_processed)
summary(main_processed)
head(main_processed)
any(is.na(main_processed))
colSums(is.na(main_processed))
```


# Creating descriptive statistics
```{r descriptive statistics}

## Outcome description
unique(main_processed$Record.Type)
cbind(sort(table(main_processed$Record.Type=="Attendance"),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Record.Type=="Attendance")),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$Record.Type=="Cancellation"),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Record.Type=="Cancellation")),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$Record.Type=="DNA"),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Record.Type=="DNA")),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$Record.Type=="Future Booking"),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Record.Type=="Future Booking")),5),deparse.level=2,decreasing=TRUE))
table(main_processed$Record.Type,main_processed$Attendance.MonthYear)

## Predictor description (categorical)
### Data frame for nominal/ binary values of variables
unique(main_processed$Clinic.Code)
unique(main_processed$Clinic.Type)
unique(main_processed$NurseFlag)
#unique(main_processed$Medical.Record.Number)
unique(main_processed$Gender)
unique(main_processed$Attendance.Day)
unique(main_processed$Attendance.MonthYear)
unique(main_processed$Attendance.Type.Description)
unique(main_processed$Attendance.Year)
unique(main_processed$Attendance.Month)
unique(main_processed$Referral.Source_recode)
unique(main_processed$Consultant)
unique(main_processed$Insurance.Scheme)
unique(main_processed$Eligibility_recode)
unique(main_processed$Age.at.Attendance.Cat.HSE)
unique(main_processed$Area.of.Residence_recode)
unique(main_processed$Referring.Hospital)
unique(main_processed$Booking.Type_recode)
unique(main_processed$Cancellation.Group)
unique(main_processed$Reason.for.Cancellation.Desc)
unique(main_processed$Rebooked.Indicator)
unique(main_processed$Hospital.Catchment)


options(digits=2)
cbind(sort(table(main_processed$Clinic.Type),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Clinic.Type)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Clinic.Code),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Clinic.Code)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$NurseFlag),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$NurseFlag)),5),deparse.level=2,decreasing=TRUE))

head(cbind(sort(table(main_processed$Medical.Record.Number),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Medical.Record.Number)),5),deparse.level=2,decreasing=TRUE)),10) #group freq of MRN at 34

cbind(sort(table(main_processed$Referral.Source_recode),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Referral.Source_recode)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Referring.Hospital),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Referring.Hospital)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Consultant),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Consultant)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Insurance.Scheme),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Insurance.Scheme)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Eligibility_recode),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Eligibility_recode)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Booking.Type_recode),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Booking.Type_recode)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$bookedDay),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$bookedDay)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$bookedMonthYear),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$bookedMonthYear)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$appointmentDay),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$appointmentDay)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$appointmentMonthYear),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$appointmentMonthYear)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Attendance.Type.Description),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Attendance.Type.Description)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Attendance.Day),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Attendance.Day)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$Attendance.MonthYear),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Attendance.MonthYear)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$Attendance.Month),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Attendance.Month)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$Attendance.Year),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Attendance.Year)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$No.Attendances),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$No.Attendances)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$No.New.Attendances),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$No.New.Attendances)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$No.Cancels),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$No.Cancels)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Cancellation.Group),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Cancellation.Group)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Reason.for.Cancellation.Desc),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Reason.for.Cancellation.Desc)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Rebooked.Indicator),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Rebooked.Indicator)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Hospital.Catchment),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Hospital.Catchment)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Gender),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Gender)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Area.of.Residence_recode),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Area.of.Residence_recode)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$addressDiff),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$addressDiff)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Age.at.Attendance.Cat.HSE),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Age.at.Attendance.Cat.HSE)),5),deparse.level=2,decreasing=TRUE))


## Predictor description (numeric)
summary(main_processed$Age.at.Attendance)
stat.desc(main_processed$Age.at.Attendance, basic=F)
skew(main_processed$Age.at.Attendance)
kurtosis(main_processed$Age.at.Attendance)

summary(main_processed$daysDiff_attendanceAppoint)
stat.desc(main_processed$daysDiff_attendanceAppoint, basic=F)
skew(main_processed$daysDiff_attendanceAppoint)
kurtosis(main_processed$daysDiff_attendanceAppoint)

summary(main_processed$daysDiff_attendanceBooked)
stat.desc(main_processed$daysDiff_attendanceBooked, basic=F)
skew(main_processed$daysDiff_attendanceBooked)
kurtosis(main_processed$daysDiff_attendanceBooked)

summary(main_processed$daysDiff_AppointBooked)
stat.desc(main_processed$daysDiff_AppointBooked, basic=F)
skew(main_processed$daysDiff_AppointBooked)
kurtosis(main_processed$daysDiff_AppointBooked)

```


```{r plot, echo=FALSE}
# Creating graphs
hist(main_processed$Age.at.Attendance)
boxplot(main_processed$Age.at.Attendance,horizontal = T)

set.seed(123)
## Create the histogram with ggplot
gg <- ggplot(main_processed, aes(x=main_processed$Age.at.Attendance))
gg <- gg + labs(x = "Age at Attendance")
gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density..,fill=..count..))
gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
gg <- gg + stat_function(fun=dnorm, color="red", args=list(mean=mean(main_processed$Age.at.Attendance,na.rm = T), sd=sd(main_processed$Age.at.Attendance,na.rm = T)))
gg

hist(main_processed$daysDiff_attendanceAppoint)
boxplot(main_processed$daysDiff_attendanceAppoint,horizontal = T)

# ggplot(main_processed, aes(x = main_processed$daysDiff_attendanceAppoint)) +
#   geom_histogram(binwidth = 2, color = "black", aes(y=..density..,fill=..count..)) +
#   scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C") +
#   geom_density(color = "blue", fill = "lightblue", alpha = 0.5) +  # Add density curve
#   labs(x = "Difference of days between Attendance and Appointment date", y = "Density") +  # Customize axis labels
#   stat_function(fun=dnorm, color="red", args=list(mean=mean(main_processed$daysDiff_attendanceAppoint,na.rm = T), sd=sd(main_processed$daysDiff_attendanceAppoint,na.rm = T))) +
#   theme_minimal()  # Use a minimal theme

hist(main_processed$daysDiff_attendanceBooked)
boxplot(main_processed$daysDiff_attendanceBooked,horizontal = T)

# d <- ggplot(main_processed, aes(x = reorder(Clinic.Type, -count(Clinic.Type)), y=count(Clinic.Type))) +
#   geom_bar(color = "blue", fill="lightblue")
# d

```


# Correlation of outcome and predictor (nominal and nominal)
## Total No. correlation
```{r correlation, total}
 
 ## Record Type & Clinic relevance
CrossTable(main_processed$Clinic.Type, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Clinic.Code, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$NurseFlag, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referral.Source_recode, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referring.Hospital, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Consultant, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Insurance.Scheme, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Eligibility_recode, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Booking.Type_recode, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Hospital.Catchment, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$bookedDay, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$bookedMonthYear, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)


## Record Type & Attendance relevance
CrossTable(main_processed$Attendance.Day, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Attendance.Month, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Attendance.Year, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Attendance.MonthYear, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Attendance.Type.Description, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

## Record Type & difference of days
bartlett.test(main_processed$daysDiff_attendanceAppoint,main_processed$Record.Type)
kruskal.test(main_processed$daysDiff_attendanceAppoint ~ main_processed$Record.Type, data=main_processed)
dunn_result <- dunn.test(main_processed$daysDiff_attendanceAppoint, g=main_processed$Record.Type, method="bonferroni")

bartlett.test(main_processed$daysDiff_attendanceBooked,main_processed$Record.Type)
kruskal.test(main_processed$daysDiff_attendanceBooked ~ main_processed$Record.Type, data=main_processed)
dunn_result <- dunn.test(main_processed$daysDiff_attendanceBooked, g=main_processed$Record.Type, method="bonferroni")


## Record Type & Patient characteristics relevance
CrossTable(main_processed$Gender, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Age.at.Attendance.Cat.HSE, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE) #age group
bartlett.test(main_processed$Age.at.Attendance,main_processed$Record.Type) # unequal variances
kruskal.test(main_processed$Age.at.Attendance ~ main_processed$Record.Type, data=main_processed)
dunn_result <- dunn.test(main_processed$Age.at.Attendance, g=main_processed$Record.Type, method="bonferroni") #run library(dunn.test) for this test

CrossTable(main_processed$Area.of.Residence_recode, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$addressDiff, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

```

## Cancellation & DNA correlation
```{r correlation, cancellation & DNA}
# cancellation (No.Cancels=1) & DNA (No.Cancels=0)
## clinic relevance
CrossTable(main_processed$Clinic.Type, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Clinic.Code, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$NurseFlag, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referral.Source_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
# CrossTable(main_processed$Referring.Hospital, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Consultant, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Insurance.Scheme, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Eligibility_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Booking.Type_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Hospital.Catchment, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$bookedDay, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

main_processed_subset <- subset(main_processed, year(main_processed$Booked.Date_new) > 2019) #create the subset for cancellations (from the hospital) have started since CoVID
CrossTable(main_processed_subset$bookedMonthYear, main_processed_subset$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$appointmentDay, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$appointmentMonthYear, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

## booking relevance
### difference between Booked and Appointment factors in Cancellation
CrossTable(main_processed$Rebooked.Indicator, main_processed$No.Cancels, digits=2, fisher=T, chisq=TRUE, expected=TRUE)

leveneTest(daysDiff_AppointBooked ~ as.factor(No.Cancels), data=main_processed) #leveneTest is Ha
t.test(daysDiff_AppointBooked ~ No.Cancels, var.equal=F, data=main_processed)

## patient characteristics relevance
CrossTable(main_processed$Gender, main_processed$No.Cancels, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Age.at.Attendance.Cat.HSE, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # age group
leveneTest(Age.at.Attendance ~ as.factor(No.Cancels), data=main_processed)
t.test(Age.at.Attendance ~ No.Cancels, var.equal=FALSE, data=main_processed) #leveneTest is Ha

CrossTable(main_processed$Area.of.Residence_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # remove Na or impute where no residence
CrossTable(main_processed$addressDiff, main_processed$No.Cancels, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Reason.for.Cancellation.Desc, main_processed$Cancellation.Group, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Cancellation.Group, main_processed$Rebooked.Indicator, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Reason.for.Cancellation.Desc, main_processed$Rebooked.Indicator, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
```


# Do not attend correlation
```{r correlation, DNA}
## clinic relevance
CrossTable(main_processed$Clinic.Type, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Clinic.Code, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$NurseFlag, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referral.Source_recode, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
#CrossTable(main_processed$Referring.Hospital, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Consultant, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Insurance.Scheme, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Eligibility_recode, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Booking.Type_recode, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Hospital.Catchment, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$bookedDay, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$bookedMonthYear, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$appointmentDay, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$appointmentMonthYear, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

## booking relevance
### days difference between Appointment and Booked date
leveneTest(daysDiff_AppointBooked ~ as.factor(No.DNAs), data=main_processed) #leveneTest is Ha
t.test(daysDiff_AppointBooked ~ No.DNAs, var.equal=F, data=main_processed)

## patient characteristics relevance
CrossTable(main_processed$Gender, main_processed$No.DNAs, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Age.at.Attendance.Cat.HSE, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # age group
leveneTest(Age.at.Attendance ~ as.factor(No.DNAs), data=main_processed)
t.test(Age.at.Attendance ~ No.DNAs, var.equal=FALSE, data=main_processed) #leveneTest is Ha

CrossTable(main_processed$Area.of.Residence_recode, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # remove Na or impute where no residence
CrossTable(main_processed$addressDiff, main_processed$No.DNAs, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)
```


# New Attendance correlation
```{r correlation, new attendance}
## clinic relevance
CrossTable(main_processed$Clinic.Type, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Clinic.Code, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$NurseFlag, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referral.Source_recode, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
#CrossTable(main_processed$Referring.Hospital, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Consultant, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Insurance.Scheme, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Eligibility_recode, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Booking.Type_recode, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Hospital.Catchment, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$bookedDay, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$bookedMonthYear, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)


## difference between New Attendance and booking
leveneTest(daysDiff_attendanceBooked ~ as.factor(No.New.Attendances), data=main_processed) #leveneTest is Ha
t.test(daysDiff_attendanceBooked ~ No.New.Attendances, var.equal=F, data=main_processed)

## patient characteristics relevance
CrossTable(main_processed$Gender, main_processed$No.New.Attendances, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Age.at.Attendance.Cat.HSE, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # age group
leveneTest(Age.at.Attendance ~ as.factor(No.New.Attendances), data=main_processed)
t.test(Age.at.Attendance ~ No.New.Attendances, var.equal=FALSE, data=main_processed) #leveneTest is Ha
wilcox.test(main_processed$Age.at.Attendance ~ main_processed$No.New.Attendances)

CrossTable(main_processed$Area.of.Residence_recode, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # remove Na or impute where no residence
CrossTable(main_processed$addressDiff, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
```

# Build baseline model of cancellations with predictors
### the smallest AIC provides the best model
### AUC (area under the ROC curve) the closer to 1 the more correct predictions
### predict: predict the values based on the previous data behaviors and thus by fitting that data to the model
### plogis: Logistic Cumulative Distribution Function
### Cox and Snell R square: Analysis_Survival_Cox Regression. The coefficients in a Cox regression relate to hazard; a positive coefficient indicates a worse prognosis and a negative coefficient indicates a protective effect of the variable with which it is associated
### nagelkerke: a measure of goodness of fit in logistic regression analysis, a modification of the Cox and Snell R Square. Ranges [0,1], a common rule of thumb (<= 0.2: weak relationship, 0.2-0.4: moderate, >= 0.4: strong relationship).
### confusionMatrix: matrix between actual and predicted values
### vif >= 5-10 is large: model has problems estimating the coefficient

```{r model of cancellation}

# convert the non-numeric variables to numeric values (the lower the number, the higher frequency)
main_processed$Referral.Source_numeric <- mapvalues(main_processed$Referral.Source_recode, from = c("CLINIC","GP","WARD","BREAST CHECK (NBSP)","Elsewhere outside Mater","OTHER CONSULTANT","Elsewhere of Mater","EMERGENCY DEPT"), to = c(1:8))
main_processed$Clinic.Type_numeric <- mapvalues(main_processed$Clinic.Type, from = c("SBC : SYMPTOMATIC BREAST CLINIC","TRI : TRIPLE ASSESSMENT CLINIC","MED : MEDICAL","FRA : FAMILY RISK ASSESSMENT","GEN : GENERAL"), to = c(1:5))
main_processed$Consultant_numeric <- mapvalues(main_processed$Consultant, from = c("WALSSI : WALSH MS SIUN","BARRYM : BARRY MR. MITCHELL JOHN","KELLM : KELL PROFESSOR MALCOLM","STOKES : STOKES PROF. MAURICE","HEENEY : HEENEY MS. ANNA"), to = c(1:5))
main_processed$Insurance.Scheme_numeric <- mapvalues(main_processed$Insurance.Scheme, from = c("U : UNKNOWN","D : MEDICAL CARD HOLDER","V : VHI","B : LAYA HEALTHCARE","I : IRISH LIFE HEALTH","S : SELF","G : GARDA SCHEME","O : OTHER","E : E.S.B. SCHEME","P : PRISON OFFICERS","J : GLOHEALTH","H : HOSPITAL SATURDAY FUND","A : ARMY SCHEME","C : BLUE CROSS","M : MEDISHIELD"), to = c(1:15))
main_processed$Eligibility_numeric <- mapvalues(main_processed$Eligibility_recode, from = c("CAT 2 (NON MEDICAL CARD)","CAT 1 (MEDICAL CARD)","ELIGIBILITY UNKNOWN","EXEMPT","RESEARCH/NATIONAL PROG.","ACUTE UNCLASSIFIED","NON ACUTE UNCLASSIFIED"), to = c(1:7))
main_processed$Booking.Type_numeric <- mapvalues(main_processed$Booking.Type_recode, from = c("R : RETURN","N : NEW","W : WARD"), to = c(1:3))
main_processed$Hospital.Catchment_numeric <- mapvalues(main_processed$Hospital.Catchment, from = c("National Catchment","Mater Catchment","Connolly Catchment","Beaumont Catchment","James Catchment","Vincents Catchment","Tallaght Catchment","International Catchment"), to = c(1:8))
main_processed$appointmentDay_numeric <- mapvalues(main_processed$appointmentDay, from = c("Tuesday","Friday","Monday","Thursday","Wednesday"), to = c(1:5))
main_processed$appointmentMonthYear_numeric <- mapvalues(main_processed$appointmentMonthYear, from = c("2021-08","2021-09","2021-11","2022-06","2021-07","2022-11","2022-03","2022-05","2023-08","2023-09","2022-02","2021-10","2022-08","2022-10","2022-09","2022-07","2020-10","2021-06","2023-05","2023-11","2020-11","2021-12","2022-01","2023-07","2020-03","2023-01","2022-04","2023-06","2020-09","2023-03","2021-03","2021-01","2023-10","2021-05","2023-04","2020-12","2023-02","2023-12","2021-04","2021-02","2020-07","2020-08","2022-12","2020-04","2020-06","2020-02","2020-05","2020-01"), to = c(1:48))
main_processed$bookedDay_numeric <- mapvalues(main_processed$bookedDay, from = c("Tuesday","Monday","Wednesday","Thursday","Friday","Saturday","Sunday"), to = c(1:7))
main_processed$bookedMonthYear_numeric <- mapvalues(main_processed$bookedMonthYear, from = c("2022-10","2021-09","2020-11","2020-08","2020-07","2021-08","2022-05","2020-09","2021-03","2020-01","2022-06","2020-02","2022-03","2020-10","2021-07","2022-07","2022-09","2021-10","2020-06","2021-04","2021-02","2023-05","2021-06","2023-01","2023-04","2023-03","2022-02","2021-05","2022-11","2021-11","2023-06","2023-07","2021-12","2022-04","2022-01","2023-02","2022-08","2023-08","2020-12","2022-12","2023-09","2023-11","2021-01","2023-10","2020-05","2020-03","2019-12","2020-04","2023-12","2019-11","2019-08","2019-07","2019-10","2019-09","2019-01","2019-02","2019-06","2019-03","2019-05","2019-04","2017-08"), to = c(1:61))
main_processed$Gender_numeric <- mapvalues(main_processed$Gender, from = c("Male","Female","Unknown"), to = c(1:3))
main_processed$Area.of.Residence_numeric <- mapvalues(main_processed$Area.of.Residence_recode, from = c("DUBLIN NTH","EASTERN & MIDLAND REGION (excl.Dublin,Meath)","Meath","NORTHERN WESTERN REGION","DUBLIN STH","SOUTHERN REGION","UNKNOWN","OUTSIDE IRELAND"), to = c(1:8))

write.csv(main_processed[,c("Gender_numeric","Age.at.Attendance","Area.of.Residence_numeric","addressDiff","No.Cancels","Referral.Source_numeric","Clinic.Code","Clinic.Type_numeric","Consultant_numeric","Insurance.Scheme_numeric","Eligibility_numeric","Hospital.Catchment_numeric","Booking.Type_numeric","appointmentDay_numeric","appointmentMonthYear_numeric","bookedDay_numeric","bookedMonthYear_numeric")],"breastDetails_cancel.csv")

main_processed_cancel <- read.csv("breastDetails_cancel.csv")
main_processed_cancel <- subset(main_processed_cancel, is.na(main_processed_cancel$No.Cancels)==F)

# main_processed_cancel[] <- lapply(main_processed_cancel,as.numeric)
cor(main_processed_cancel, method = "spearman")
library(corrplot)
corrplot(cor(main_processed_cancel))

sample <- sample(c(TRUE,FALSE), nrow(main_processed_cancel), replace=TRUE, prob=c(0.7,0.3))
train <- main_processed_cancel[sample, ]
test <- main_processed_cancel[!sample, ]


## with Clinic relevance
logmodel1 <- glm(formula = No.Cancels ~ Clinic.Code + Clinic.Type_numeric + Referral.Source_numeric + Consultant_numeric + Insurance.Scheme_numeric + Eligibility_numeric + Booking.Type_numeric + Hospital.Catchment_numeric, family = binomial(link = "logit"), data = train)
summary(logmodel1)

exp(coefficients(logmodel1))

nagelkerke(logmodel1) #library(rcompanion)
confusion_matrix(logmodel1) #library(regclass)
confusion_matrix(logmodel1, test) #library(regclass)

predicted1 <- qlogis(predict(logmodel1, test, type=c("terms"))) #library(rbenchmark)
# names
# logmodel1 <- factor(logmodel1, levels=c("0","1"))
# predicted1 <- factor(predicted1, levels=c("0","1"))
# confusionMatrix(predicted1, logmodel1, threshold=0.8) #library(caret)
# sensitivity(main_processed$No.Cancels, predicted1, threshold=0.8)
# specificity(main_processed$No.Cancels, predicted1, threshold=0.8)

vif(logmodel1) #library(regclass)


## with Date relevance
logmodel2 <- glm(formula = No.Cancels ~ appointmentDay_numeric + appointmentMonthYear_numeric + bookedDay_numeric + bookedMonthYear_numeric, family = binomial(link = "logit"), data = train)
summary(logmodel2)

# exp(coefficients(logmodel2))

nagelkerke(logmodel2)
confusion_matrix(logmodel2) #library(regclass)
confusion_matrix(logmodel2, test) #library(regclass)

# predicted2 <- plogis(predict(logmodel2, main_processed))
# confusionMatrix(main_processed$No.Cancels, predicted2, thresholder=0.8)
# sensitivity(main_processed$No.Cancels, predicted2, thresholder=0.8)
# specificity(main_processed$No.Cancels, predicted2, thresholder=0.8)

vif(logmodel2)


## with Patient relevance
logmodel3 <- glm(formula = No.Cancels ~ Gender_numeric + Age.at.Attendance + Area.of.Residence_numeric + addressDiff, family = binomial(link = "logit"), data = train)
summary(logmodel3)

# exp(coefficients(logmodel3))

nagelkerke(logmodel3)
confusion_matrix(logmodel3) #library(regclass)
confusion_matrix(logmodel3, test) #library(regclass)

# predicted3 <- plogis(predict(logmodel3, main_processed))
# confusionMatrix(main_processed$No.Cancels, predicted3, thresholder=0.8)
# sensitivity(main_processed$No.Cancels, predicted3, thresholder=0.8)
# specificity(main_processed$No.Cancels, predicted3, thresholder=0.8)

vif(logmodel3)


## with all predictors
logmodel <- glm(formula = No.Cancels ~ Gender_numeric + Age.at.Attendance + Area.of.Residence_numeric + addressDiff + Referral.Source_numeric + Clinic.Code + Clinic.Type_numeric + Consultant_numeric + Insurance.Scheme_numeric + Eligibility_numeric + Hospital.Catchment_numeric + Booking.Type_numeric + appointmentDay_numeric + appointmentMonthYear_numeric + bookedDay_numeric + bookedMonthYear_numeric, family = binomial(link = "logit"), data = train)
summary(logmodel)

exp(coefficients(logmodel))

nagelkerke(logmodel)
confusion_matrix(logmodel) #library(regclass)
# confusion_matrix(logmodel, test) #library(regclass)

# predicted <- plogis(predict(logmodel, main_processed))
# confusionMatrix(main_processed$No.Cancels, predicted, thresholder=0.8)
# sensitivity(main_processed$No.Cancels, predicted, thresholder=0.8)
# specificity(main_processed$No.Cancels, predicted, thresholder=0.8)

vif(logmodel)

#library(epiDisplay), give plot plus AUC
logistic.display(logmodel)
lroc <- lroc(logmodel, title=TRUE, cex.main=1, cex.lab=1, col.lab="blue", cex.axis=1, 
lwd=3)
lroc1 <- lroc(logmodel1, add=TRUE, line.col="brown", lty=2)
lroc2 <- lroc(logmodel2, add=TRUE, line.col="darkgreen", lty=2)
lroc3 <- lroc(logmodel3, add=TRUE, line.col="purple", lty=2)
legend("bottomright",legend=c("all predictors", "clinic relevance", "date relevance", "patient relevance"),
        lty=1:2, col=c("red","brown","darkgreen","purple"), bg="white")
lrtest(logmodel,logmodel1) #library(lmtest)
lrtest(logmodel,logmodel2)
lrtest(logmodel,logmodel3)

```
# Comparing factors in models
```{r comparing models}
# anova(logmodel1, logmodel2, logmodel3, logmodel, test="Chisq") #run if there is other ML models
#library(survey)
regTermTest(logmodel,"Referral.Source_numeric")
regTermTest(logmodel,"Clinic.Code")
regTermTest(logmodel,"Clinic.Type_numeric")
regTermTest(logmodel,"Consultant_numeric")
regTermTest(logmodel,"Insurance.Scheme_numeric")
regTermTest(logmodel,"Eligibility_numeric")
regTermTest(logmodel,"Booking.Type_numeric")
regTermTest(logmodel,"Hospital.Catchment_numeric")
regTermTest(logmodel,"appointmentDay_numeric")
regTermTest(logmodel,"appointmentMonthYear_numeric")
regTermTest(logmodel,"bookedDay_numeric")
regTermTest(logmodel,"bookedMonthYear_numeric")
regTermTest(logmodel,"Gender_numeric")
# regTermTest(logmodel,"Age.at.Attendance")
regTermTest(logmodel,"Area.of.Residence_numeric")
regTermTest(logmodel,"addressDiff")

#library(caret)
varImp(logmodel)
```

# Build baseline model of new attendances with predictors

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
