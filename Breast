---
title: "breastPatientsDetail"
output:
  html_document: default
  pdf_document: default
date: "2024-02-07"
updated: "today"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Data Source: Mater Dive Port 7
# Load library package
```{r load working space, echo=FALSE}
## Load working environment
rm(list = ls())
print(getwd())
setwd("C:/Users/User/Documents/RStudio/BreastDivePort_PatientsDetail")
print(getwd())

#library(dataQualityR) #package is not available for this version of R
library(stringr)
library(readr)
library(tidyverse) #table (frequency and proportion), install.packages("tidyverse")
library(tidyr) # CrossTable
library(dplyr) # CrossTable, install.packages("dplyr")
library(ggplot2)
library(qcc) #install
library(sqldf)
# library(Rcmdr)  #continuous var, numSummary function, install.packages("Rcmdr") ##not running if in hurry
library(gridExtra)  #graph

library(Hmisc)  #Imputate missing values
#library(DMwR) #Compute the accuracy of imputation, but need to install the other packages

library(psych) #install, describeBy
library(moments)  #skewness,kurtosis
library(plyr)   #categorical var, install.packages("plyr")
library(pastecs) #stat.desc
library(semTools)
library(car)  #leveneTest, Scatterplot matrix

library(dunn.test) #install, non-parametric post-hoc test after Kruskal-Wallis
library(stats)  #multiple regression lm() function, lapply function
library(PerformanceAnalytics) #chart.Correlation (Scatterplot)

library(caret) #classification & regression training, confusionMatrix, varImp
library(rbenchmark) #plogis
library(rcompanion) #nagelkerke
library(regclass) #vif
# library(C50)
library(AppliedPredictiveModeling) #Scatterplot, install.packages('AppliedPredictiveModeling')
library(rpart)
library(rpart.plot)
library(pROC)  #cross validation
library(gmodels)  #Evaluate the model, CrossTable correlation, install.packages("gmodels")
library(epiDisplay) #plot with AUC for model prediction
library(survey) #comparing models, regTermTest
library(rattle)
library(RColorBrewer)
```

# Load file & some variables values
* Re-code values of Referral.Source, Eligibility, Area.of.Residence, Booking.Type, Reason.for.Cancellation
* Calculate difference of dates, difference of Home and Present address

```{r load file, echo=TRUE}
main <- read.csv("BreastPatientsDetail_Clinic.csv")
main <- subset(main, Attendance.Year < 2024)

## View variable types
main %>% glimpse() #glimpse from library(dplyr)
head(main)
#sample <- main %>% group_by(main$Record.Type)
#samplePatients <- sample_frac(main,0.1,replace = F)

## Remove NAs or impute NAs if necessary
allMissing = is.na(main)
counts = colSums(allMissing)
counts [counts>0]
# main <- na.omit(main)

print(is.data.frame(main))

## Transforming data
# main_group <- main_processed %>% group_by(main_processed$Medical.Record.Number) #library(moments)
# main_group$freq_MRN_recode <- ifelse(count(main_group$Medical.Record.Number >= 34)==1,1,0)

#library(plyr)
main$Clinic.Type_recode <- mapvalues(main$Clinic.Type, from = c("SBC : SYMPTOMATIC BREAST CLINIC","TRI : TRIPLE ASSESSMENT CLINIC","MED : MEDICAL","FRA : FAMILY RISK ASSESSMENT","GEN : GENERAL"), to = c("SBC","TRI","MED","FRA","GEN"))

main$Consultant_recode <- mapvalues(main$Consultant, from = c("WALSSI : WALSH MS SIUN","BARRYM : BARRY MR. MITCHELL JOHN","KELLM : KELL PROFESSOR MALCOLM","STOKES : STOKES PROF. MAURICE","HEENEY : HEENEY MS. ANNA"), to = c("WALSSI","BARRYM","KELLM","STOKES","HEENEY"))

main$Insurance.Scheme_recode <- mapvalues(main$Insurance.Scheme, from = c("U : UNKNOWN","D : MEDICAL CARD HOLDER","V : VHI","G : GARDA SCHEME","I : IRISH LIFE HEALTH","S : SELF","B : LAYA HEALTHCARE","O : OTHER","J : GLOHEALTH","E : E.S.B. SCHEME","C : BLUE CROSS","P : PRISON OFFICERS","H : HOSPITAL SATURDAY FUND","A : ARMY SCHEME","M : MEDISHIELD"), to = c("U","D","V","G","I","S","B","O","J","E","C","P","H","A","M"))

main$Hospital.Catchment_recode <- mapvalues(main$Hospital.Catchment, from = c("Mater Catchment","National Catchment","Connolly Catchment","James Catchment","Tallaght Catchment","Beaumont Catchment","International Catchment","Vincents Catchment"), to = c("Mater","National","Connolly","James","Tallaght","Beaumont","International","Vincents"))

main$Attendance.Type_recode <- mapvalues(main$Attendance.Type.Description, from = c("WALK IN - NEW","ADD ON - NEW","WALK IN - RETURN","ADD ON - RETURN","Return Home Visit","Return Virtual Phone","VIRTUAL NEW","New Virtual Phone","New Virtual Video","Return Virtual Video"), to = c("NEW","NEW","RETURN","RETURN","RETURN","VIRTUAL(New_Return)","VIRTUAL(New_Return)","VIRTUAL(New_Return)","VIRTUAL(New_Return)","VIRTUAL(New_Return)"))

main$Referral.Source_recode <- mapvalues(main$Referral.Source, from = c("C : CLINIC","G : GP","W : WARD","N : BREAST CHECK (NBSP)","H : OTHER HOSPITAL","S : SELF","O : OTHER CONSULTANT","R : ROOMS","A : EMERGENCY DEPT","B : HEALTH BOARD REFERRAL","F : FAMILY PLANNING","K : ED SMITHFIELD","V : VASCULAR LAB","X : HEALTH CENTRE REFERRAL","Q : REFERRED FROM CAWT INITIATIVE","D : DENTIST"), to = c("CLINIC","GP","WARD","BREAST CHECK","Elsew outside Mater","Elsew outside Mater","OTHER CONSULTANT","Elsew of Mater","EMERGENCY DEPT","Elsew outside Mater","Elsew of Mater","Elsew of Mater","Elsew of Mater","Elsew outside Mater","Elsew outside Mater","Elsew of Mater"))

main$Eligibility_recode <- mapvalues(main$Eligibility, from = c("02 : CAT 2 (NON MEDICAL CARD)","01 : CAT 1 (MEDICAL CARD)","08 : ELIGIBILITY UNKNOWN","12 : DAY CASE - EXEMPT STAT. CHG.","19 : STAFF EXEMPT-STATUTORY CHARGE","35 : INFECTIOUS OR SUSPECTED INFECT","11 : ANTI D/RESEARCH/TRIAL","23 : NATIONAL COLORECTAL SCREENING","16 : NTPF - EXEMPT STAT. CHG.","06 : NON EU-VISITOR","24 : DIABETIC RETINA TREATMENT","07 : RTA","17 : ARMY - EXEMPT STAT. CHG.","10 : UK/NI - EXEMPT STAT.CHG.","21 : THE GOVERNOR - PRISONERS","13 : LONG STAY - EXEMPT STAT. CHG.","25 : UKRAINIAN CITIZEN","20 : HAA CARD HEALTH AMENDMENT ACT","18 : EHIC - EXEMPT STAT. CHG.","05 : EU-VISITOR NO EHIC","26 : U16 EXEMPT STAT. CHARGE","30 : PENDING PATIENT DETAILS"), to = c("NON MEDICAL CARD","MEDICAL CARD","ELIGIBILITY UNKNOWN","EXEMPT","EXEMPT","ACUTE UNCLASSIFIED","RESEARCH/NATIONAL PROG.","RESEARCH/NATIONAL PROG.","EXEMPT","NON MEDICAL CARD","NON ACUTE UNCLASSIFIED","ACUTE UNCLASSIFIED","EXEMPT","EXEMPT","EXEMPT","EXEMPT","EXEMPT","RESEARCH/NATIONAL PROG.","EXEMPT","NON MEDICAL CARD","EXEMPT","NON MEDICAL CARD"))

dublin_nth <- c("0100","0101","0103","0105","0107","0109","0111","0113","0115","0117")
dublin_sth <- c("0200","0202","0204","0206","0208","0210","0212","0214","0216","0218","0220","0222","0224")
outside_irl <- c("3303","3310","3350","3501","3600")
other_eastern.midland_region <- c("2300","3100","2200","2400","0300","0500","2500","0400")
northern.western_region <- c("2900","3000","2600","2000","2700","1900","2800","2100")
southern_region <- c("0700","0600","1000","1700","1200","1300","1500","1600","0800","1101")
main <- main %>%     #library(plyr)
 mutate(Area.of.Residence_recode = case_when(
  substring(main$Area.of.Residence,0,4) %in% dublin_nth ~ "DUBLIN NTH",
  substring(main$Area.of.Residence,0,4) %in% dublin_sth ~ "DUBLIN STH",
  substring(main$Area.of.Residence,0,4) %in% other_eastern.midland_region ~ "EASTERN & MIDLAND REGION (excl.Dublin,Meath)",
  substring(main$Area.of.Residence,0,4) %in% northern.western_region ~ "NORTHERN WESTERN REGION",
  substring(main$Area.of.Residence,0,4) %in% southern_region ~ "SOUTHERN REGION",
  substring(main$Area.of.Residence,0,4) %in% outside_irl ~ "OUTSIDE IRELAND",
  substring(main$Area.of.Residence,0,4) == "3200" ~ "Meath",
  substring(main$Area.of.Residence,0,4) == "0000" ~ "UNKNOWN",
  TRUE ~ "Other counties"
))
head (main$Area.of.Residence_recode,10)
table(main$Area.of.Residence_recode)

main$Booking.Type_recode <- ifelse(main$Booking.Type == ":", ifelse(!duplicated(main$Medical.Record.Number), "N : NEW", "R : RETURN"), main$Booking.Type)
main$Booking.Type_recode <- mapvalues(main$Booking.Type_recode, from = c("N : NEW","R : RETURN","W : WARD"), to =c("NEW","RETURN","WARD"))

main$Reason.for.Cancellation_recode <- mapvalues(main$Reason.for.Cancellation.Desc, from = c("NO SHOW","Patient no longer requires A","TEMPLATE / BOOKING DIARY AMEND","Appt brought forward by Hosp","Clinic reduced on Cons Instru","PERSONAL/FAMILY REASONS","PATIENT CANCELLED APPOINTMENT","Covid 19 Outbreak Hosp Canc","Appt issued incorrectly by hosp","PATIENT ILL","APP CANCELLED - AWAIT RESULTS","PATIENT ON HOLIDAYS","Appt date time not suitable","appointment deferred as per ANP instruction","CONSULTANT ABSENT ANNUAL LEAVE","BOOKING DIARY MANAGEMENT","EARLIER PRIVATE APPOINTMENT","TIME BLOCKED OUT","Covid 19 Outbreak Pat Canc","PATIENT IN OTHER HEALTH CARE","Appointment deferred as per Consultant instruction","inappropriate appointment","Patient requested earlier appt","PATIENT CANCELLED NO REASON","Patient deceased","EARLIER APPOINTMENT IN OTHER PUBLIC HOSPITAL","PATIENT FORGOT APPOINTMENT","PT INDICATES APPT NO REQUIRED","PATIENT INPATIENT MMUH","DEATH IN FAMILY","Adverse weather","PAT ATTENDED OPD AT MMUH","transfer to new consultant","PATIENT ATTEND OPD AT MMUH","ED Requested earlier appointment","CONSULTANT ABSENT - SICK LEAVE","patient attends GP for care","tferred to family hx breast","Consultant on Secondment","GP REQUEST EARLIER APPOINTMENT","validation cancelled by pt","ANOTHER CLINIC SAME DAY","CHRISTMAS PERIOD CLOSURE","CONSULTANT AT MEET/CONFER/EXAM","CONSULTANT RETIREMENT"), to = c("No show","By Patient","By Hospital","By Hospital","By Consultant/Advanced Nurse","By Patient","By Patient","By Covid","By Hospital","By Patient-health conditions","By Hospital","By Patient","By Patient","By Consultant/Advanced Nurse","By Consultant/Advanced Nurse","By Hospital","By Patient","By Hospital","By Covid","By Patient-health conditions","By Consultant/Advanced Nurse","By Patient","By Patient","By Patient","By Patient-health conditions","By Patient-health conditions","By Patient","By Patient","By Patient-health conditions","By Patient","By Patient","By Patient-health conditions","By Consultant/Advanced Nurse","By Patient-health conditions","By Hospital","By Consultant/Advanced Nurse","By Patient-health conditions","By Patient-health conditions","By Consultant/Advanced Nurse","By Patient-health conditions","By Patient","By Patient-health conditions","By Hospital","By Consultant/Advanced Nurse","By Consultant/Advanced Nurse"))

# main$Referring.Hospital <-

### Date calculation from Appointment/ Booking to Attendance
main$Attendance.Date <- as.Date(main$Attendance.Date, format="%d/%m/%y")

main$Appointment.Date <- as.POSIXct(main$Appointment.Date...Time,format="%Y%m%d %H:%M:%S",tz=Sys.timezone())
main$Appointment.Date <- as.Date(main$Appointment.Date, format="%d/%m/%y")
main$appointmentMonthYear <- substring(main$Appointment.Date,0,7)
main$appointmentDay <- weekdays(main$Appointment.Date)

main$Booked.Date <- as.POSIXct(main$Booked.Date,format="%Y/%m/%d",tz=Sys.timezone())
main$Booked.Date_new <- as.Date(main$Booked.Date, format="%d/%m/%y")
main$bookedMonthYear <- substring(main$Booked.Date,0,7)
main$bookedDay <- weekdays(main$Booked.Date)

main$daysDiff_attendanceAppoint <- difftime(main$Appointment.Date,main$Attendance.Date,units="days")
main$daysDiff_attendanceBooked <- difftime(main$Booked.Date,main$Attendance.Date,units="days")
main$daysDiff_AppointBooked <- difftime(main$Appointment.Date,main$Booked.Date,units="days")

main$addressDiff <- ifelse(main$Present.Address == main$Home.Address, 0, 1)

main$Rebooked.Indicator <- main$Rebooked.Indicator..HIS.

## Create dataset for modelling
# main.df <- main %>% select(-rownames,-) #when there are multiple files to combine with same variables

write.csv(main[,c("Record.Type","Clinic.Code","Clinic.Type_recode","NurseFlag","Medical.Record.Number","Gender","Attendance.Day","Attendance.MonthYear","Attendance.Date","Attendance.Type_recode","Attendance.Year","Attendance.Month","Referral.Source_recode","Consultant_recode","Insurance.Scheme_recode","Eligibility_recode","Age.at.Attendance","Age.at.Attendance.Cat.HSE","Pathway.Number","Present.Address","Home.Address","Appointment.Date","appointmentMonthYear","appointmentDay","Area.of.Residence_recode","Referring.Hospital","Booking.Type_recode","Booked.Date_new","bookedMonthYear","bookedDay","Cancellation.Group","Reason.for.Cancellation_recode","Rebooked.Indicator","Hospital.Catchment_recode","No.Attendances","No.New.Attendances","No.Cancels","No.DNAs","daysDiff_attendanceAppoint","daysDiff_attendanceBooked","daysDiff_AppointBooked","addressDiff")],"breastDetails.csv")

main_processed <- read.csv("breastDetails.csv")

## Convert all character variables to factor
# main_processed <- main_processed %>% mutate_if(is.character,as.factor)

# main_processed_tibble <- as_tibble(main_processed) #library(tidyverse), tibble never changes [the type of the inputs, the names of variables], it only recycles inputs of length 1, and never creates row.names()

```


# Inspecting data
Inspecting new and re-coded variables
```{r inspection}

str(main_processed)
summary(main_processed)
head(main_processed)
any(is.na(main_processed))
colSums(is.na(main_processed))
```


# Creating descriptive statistics (2020-2023)

## Outcome (response variable): Record.Type (including Attendance, Cancellation, DNA)
1. Total No. of observations: 91169
2. No. of Attendance: 55297; New Attendance: 30512
3. No. of Cancellation: 27610
4. No. of DNA: 8262

## Dependable variables (with highest frequency of value):
1. Clinic relevance
* Clinic code :757 (12.79%), 1134 (12.72%)
* Clinic type: Symptomatic breast clinic (48.66%)
* M.R.N: 51 times is the highest visit
* Referral source: Clinic (52.71%)
* Consultant: WAL (27%), BAR (26%)
* Insurance scheme: Unknown (36.57%)
* Eligibility: Non medical card (53.08%)
* Booking Type: Return (57.4%)
* Hospital catchment: National catchment (57.91%)

2. Date relevance
* Attendance Day: Tuesday (26.6%)
* Attendance Month-Year: 2021-09 (2.96%)
* Attendance Month: September (10.2%)
* Attendance Year: 2021 (27%)
* Attendance Type: Return (49.64%)

* Appointment Day: Tuesday (27.8%)
* Appointment Month-Year: 2021-08 (3.42%)

* Booked Day: Tuesday (22.57%)
* Booked Month-Year: 2022-10 (2.78%)

* Days difference between Attendance and Appointment: Mean 580, Median 730 [0-1096]
* Days difference between Attendance and Booked day: Mean 506, Median 366 [<0,1112]
* Days difference between Booked day and Appointment: Mean 91, Median 25 [0-672]

3. Patient relevance
* Gender: Female (98%)
* Age at attendance cat.HSE: 45-54 (23.7%), Average 51 [0-105]
* Area of residence: Dublin north (45.3%)
* Difference of Home and Present address: No (82%)

## Cancellation (N=27610)
* Cancellation Group: Hospital (57.53%)
* Reason for cancellation: by hospital (38.62%)
* Rebooked indicator: Yes (74.5%)

```{r descriptive statistics}

## Outcome description
### Convert dependent variable (outcome, response var.) to factor type if not yet
unique(main_processed$Record.Type)
cbind(sort(table(main_processed$Record.Type),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Record.Type=="Attendance")),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$Record.Type=="Attendance"),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Record.Type=="Attendance")),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$Record.Type=="Cancellation"),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Record.Type=="Cancellation")),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$Record.Type=="DNA"),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Record.Type=="DNA")),5),deparse.level=2,decreasing=TRUE))

table(main_processed$Record.Type,main_processed$Attendance.MonthYear)

## Predictor description (categorical)

### Data frame for nominal/ binary values of variables
unique(main_processed$Clinic.Code)
unique(main_processed$Clinic.Type_recode)
unique(main_processed$NurseFlag)
#unique(main_processed$Medical.Record.Number)
unique(main_processed$Gender)
unique(main_processed$Attendance.Day)
unique(main_processed$Attendance.MonthYear)
unique(main_processed$Attendance.Type_recode)
unique(main_processed$Attendance.Year)
unique(main_processed$Attendance.Month)
unique(main_processed$Referral.Source_recode)
unique(main_processed$Consultant_recode)
unique(main_processed$Insurance.Scheme_recode)
unique(main_processed$Eligibility_recode)
unique(main_processed$Age.at.Attendance.Cat.HSE)
unique(main_processed$Area.of.Residence_recode)
unique(main_processed$Referring.Hospital)
unique(main_processed$Booking.Type_recode)
unique(main_processed$Cancellation.Group)
unique(main_processed$Reason.for.Cancellation_recode)
unique(main_processed$Rebooked.Indicator)
unique(main_processed$Hospital.Catchment_recode)


options(digits=2)
cbind(sort(table(main_processed$Clinic.Type_recode),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Clinic.Type_recode)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Clinic.Code),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Clinic.Code)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$NurseFlag),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$NurseFlag)),5),deparse.level=2,decreasing=TRUE))

head(cbind(sort(table(main_processed$Medical.Record.Number),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Medical.Record.Number)),5),deparse.level=2,decreasing=TRUE)),10) #group freq of MRN at 34

cbind(sort(table(main_processed$Referral.Source_recode),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Referral.Source_recode)),5),deparse.level=2,decreasing=TRUE))

#cbind(sort(table(main_processed$Referring.Hospital),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Referring.Hospital)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Consultant_recode),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Consultant_recode)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Insurance.Scheme_recode),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Insurance.Scheme_recode)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Eligibility_recode),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Eligibility_recode)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Booking.Type_recode),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Booking.Type_recode)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$bookedDay),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$bookedDay)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$bookedMonthYear),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$bookedMonthYear)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$appointmentDay),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$appointmentDay)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$appointmentMonthYear),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$appointmentMonthYear)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Attendance.Type_recode),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Attendance.Type_recode)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Attendance.Day),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Attendance.Day)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$Attendance.MonthYear),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Attendance.MonthYear)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$Attendance.Month),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Attendance.Month)),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$Attendance.Year),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Attendance.Year)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$No.Attendances),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$No.Attendances)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$No.New.Attendances),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$No.New.Attendances)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$No.Cancels),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$No.Cancels)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Cancellation.Group),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Cancellation.Group)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Reason.for.Cancellation_recode),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Reason.for.Cancellation_recode)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Rebooked.Indicator),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Rebooked.Indicator)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Hospital.Catchment_recode),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Hospital.Catchment_recode)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Gender),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Gender)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Area.of.Residence_recode),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Area.of.Residence_recode)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$addressDiff),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$addressDiff)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Age.at.Attendance.Cat.HSE),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Age.at.Attendance.Cat.HSE)),5),deparse.level=2,decreasing=TRUE))


## Predictor description (numeric)
summary(main_processed$Age.at.Attendance)
stat.desc(main_processed$Age.at.Attendance, basic=F)
skew(main_processed$Age.at.Attendance)
kurtosis(main_processed$Age.at.Attendance)

summary(main_processed$daysDiff_attendanceAppoint)
stat.desc(main_processed$daysDiff_attendanceAppoint, basic=F)
skew(main_processed$daysDiff_attendanceAppoint)
kurtosis(main_processed$daysDiff_attendanceAppoint)

summary(main_processed$daysDiff_attendanceBooked)
stat.desc(main_processed$daysDiff_attendanceBooked, basic=F)
skew(main_processed$daysDiff_attendanceBooked)
kurtosis(main_processed$daysDiff_attendanceBooked)

summary(main_processed$daysDiff_AppointBooked)
stat.desc(main_processed$daysDiff_AppointBooked, basic=F)
skew(main_processed$daysDiff_AppointBooked)
kurtosis(main_processed$daysDiff_AppointBooked)

```


```{r plot, echo=FALSE}
# Creating graphs
hist(main_processed$Age.at.Attendance)
boxplot(main_processed$Age.at.Attendance,horizontal = T)

set.seed(123)
## Create the histogram with ggplot
gg_age <- ggplot(main_processed, aes(x=main_processed$Age.at.Attendance))
gg_age <- gg_age + labs(x = "Age at Attendance")
gg_age <- gg_age + geom_histogram(binwidth=2, colour="black", aes(y=..density..,fill=..count..))
gg_age <- gg_age + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
gg_age <- gg_age + stat_function(fun=dnorm, color="red", args=list(mean=mean(main_processed$Age.at.Attendance,na.rm = T), sd=sd(main_processed$Age.at.Attendance,na.rm = T)))
gg_age

gg_recordType <- ggplot(main_processed,aes(x=main_processed$Record.Type)) + 
  labs(x = "Record Type 2020-2023") +
  geom_bar(colour="blue", fill="lightblue")
gg_recordType

# pie(main_processed$No.New.Attendances, labels = names(main_processed$No.New.Attendances), clockwise = T, na.omit=T)
gg_newAttendance <- ggplot(main_processed,aes(x=No.New.Attendances)) +
  labs(x = "New Attendance 2020-2023") +
  geom_bar(colour="blue", fill="lightblue")
gg_newAttendance

gg_clinicType <- ggplot(main_processed, aes(x = Clinic.Type_recode)) +
  labs(x = "Clinic Type 2020-2023") +
  scale_x_discrete(limits=c("SBC","TRI","MED","FRA","GEN")) +
  geom_bar(colour = "blue", fill = "lightblue") +
  theme(legend.position = "bottom")
  scale_fill_discrete(labels=c("Symptomatic Breast Clinic","Triple Assessment Clinic","Medical","Family Risk Assessment","General"))
gg_clinicType

gg_referralSource <- ggplot(main_processed,aes(x=Referral.Source_recode)) +
  labs(x = "Referral Source") +
  scale_x_discrete(limits=c("CLINIC","GP","WARD","BREAST CHECK","Elsew outside Mater","OTHER CONSULTANT","Elsew of Mater","EMERGENCY DEPT"), guide = guide_axis(n.dodge = 2)) +
  geom_bar(colour="blue", fill="lightblue")
gg_referralSource

gg_bookingType <- ggplot(main_processed,aes(x=Booking.Type_recode)) +
  labs(x = "Booking Type") +
  scale_x_discrete(limits=c("RETURN","NEW","WARD")) +
  geom_bar(colour="blue", fill="lightblue")
gg_bookingType

gg_consultant <- ggplot(main_processed,aes(x=Consultant_recode)) +
  labs(x = "Consultant") +
  scale_x_discrete(limits=c("WALSSI","BARRYM","KELLM","STOKES","HEENEY"), guide = guide_axis(n.dodge = 2))+
  geom_bar(colour="blue", fill="lightblue")
gg_consultant

gg_clinicCode <- ggplot(main_processed,aes(x=Clinic.Code)) +
  labs(x = "Clinic Code") +
  scale_x_discrete(limits=c("757","1134","441","424","1133","771","527","526","1132","932","933","1334","934","1333","1335","1187","768","440"), guide = guide_axis(n.dodge = 2)) +
  geom_bar(colour="blue", fill="lightblue")
gg_clinicCode

gg_insuranceScheme <- ggplot(main_processed,aes(x=Insurance.Scheme_recode)) +
  labs(x = "Insurance Scheme") +
  scale_x_discrete(limits=c("U","D","V","B","I","S","G","O","E","P","J","H","A","C","M"), guide = guide_axis(n.dodge = 2)) +
  geom_bar(colour="blue", fill="lightblue")
gg_bookingType

gg_eligibility <- ggplot(main_processed,aes(x=Eligibility_recode)) +
  labs(x = "Eligibility") +
  scale_x_discrete(limits=c("NON MEDICAL CARD","MEDICAL CARD","ELIGIBILITY UNKNOWN","EXEMPT","RESEARCH/NATIONAL PROG.","ACUTE UNCLASSIFIED","NON ACUTE UNCLASSIFIED"), guide = guide_axis(n.dodge = 2)) +
  geom_bar(colour="blue", fill="lightblue")
gg_eligibility

gg_hospitalCatchment <- ggplot(main_processed,aes(x=Hospital.Catchment_recode)) +
  labs(x = "Hospital Catchment") +
  scale_x_discrete(limits=c("National","Mater","Connolly","Beaumont","James","Vincents","Tallaght","International"), guide = guide_axis(n.dodge = 2)) +
  geom_bar(colour="blue", fill="lightblue")
gg_hospitalCatchment

gg_bookedDay <- ggplot(main_processed,aes(x=bookedDay)) +
  labs(x = "Day of booking") +
  scale_x_discrete(limits=c("Tuesday","Monday","Wednesday","Thursday","Friday","Saturday","Sunday"), guide = guide_axis(n.dodge = 2)) +
  geom_bar(colour="blue", fill="lightblue")
gg_bookedDay

gg_appointmentDay <- ggplot(main_processed,aes(x=appointmentDay)) +
  labs(x = "Day of appointment") +
  scale_x_discrete(limits=c("Tuesday","Friday","Monday","Thursday","Wednesday"), guide = guide_axis(n.dodge = 2)) +
  geom_bar(colour="blue", fill="lightblue")
gg_appointmentDay

gg_attendanceDay <- ggplot(main_processed,aes(x=Attendance.Day)) +
  labs(x = "Day of attendance") +
  scale_x_discrete(limits=c("Tuesday","Friday","Thursday","Monday","Wednesday","Saturday","Sunday"), guide = guide_axis(n.dodge = 2)) +
  geom_bar(colour="blue", fill="lightblue")
gg_attendanceDay

gg_attendanceType <- ggplot(main_processed,aes(x=Attendance.Type_recode)) +
  labs(x = "Attendance Type") +
  scale_x_discrete(limits=c("RETURN","NEW","VIRTUAL(New_Return)"), guide = guide_axis(n.dodge = 2)) +
  geom_bar(colour="blue", fill="lightblue")
gg_attendanceType

gg_rebooked <- ggplot(main_processed,aes(x=Rebooked.Indicator)) +
  labs(x = "Rebooking") +
  geom_bar(colour="blue", fill="lightblue")
gg_rebooked

gg_gender <- ggplot(main_processed,aes(x=Gender)) +
  labs(x = "Gender") +
  geom_bar(colour="blue", fill="lightblue")
gg_gender

gg_addressDiff <- ggplot(main_processed,aes(x=addressDiff)) +
  labs(x = "Difference of Home and Present Address") +
  geom_bar(colour="blue", fill="lightblue")
gg_addressDiff

gg_residenceArea <- ggplot(main_processed,aes(x=Area.of.Residence_recode)) +
  labs(x = "Area of residence") +
  scale_x_discrete(limits=c("DUBLIN NTH","EASTERN & MIDLAND REGION (excl.Dublin,Meath)","Meath","NORTHERN WESTERN REGION","DUBLIN STH","SOUTHERN REGION","UNKNOWN","OUTSIDE IRELAND"), guide = guide_axis(n.dodge = 3)) +
  geom_bar(colour="blue", fill="lightblue")
gg_residenceArea


## Booked Date
bookedMonthYear <- data.frame(bookedMonthYear = na.omit(main_processed$bookedMonthYear))
class(bookedMonthYear$bookedMonthYear)
bookedMonthYear_tb <- data.frame(table(bookedMonthYear$bookedMonthYear))
colnames(bookedMonthYear_tb) <- c("month", "freq")

library(qcc)
qcc(bookedMonthYear_tb$freq, type = "u", sizes = bookedMonthYear_tb$freq, labels=bookedMonthYear_tb$month, plot=T)
qcc(bookedMonthYear_tb$freq, type = "c", labels=bookedMonthYear_tb$month, plot=T)

library(qicharts)
set.seed(7)
qic(y = freq, n = freq, x = month, data = bookedMonthYear_tb, chart = 'u', multiply = 1000, main='Rate of bookings- u chart', ylab='Rate of booking in month unit', xlab='Month-Year', runvals = T, linevals = T)
qic(y = freq, x = month, data = bookedMonthYear_tb, chart = 'run', main='Count of booking- run chart', ylab='Count of bookings in month unit', xlab='Month-Year', runvals = T, linevals = T)

## Appointment Date
appointmentMonthYear <- data.frame(appointmentMonthYear = na.omit(main_processed$appointmentMonthYear))
appointmentMonthYear_tb <- data.frame(table(appointmentMonthYear$appointmentMonthYear))
colnames(appointmentMonthYear_tb) <- c("month", "freq")

#library(qcc)
qcc(appointmentMonthYear_tb$freq, type = "u", sizes = appointmentMonthYear_tb$freq, labels=appointmentMonthYear_tb$month, plot=T)
qcc(appointmentMonthYear_tb$freq, type = "c", labels=appointmentMonthYear_tb$month, plot=T)

#library(qicharts)
set.seed(7)
qic(y = freq, n = freq, x = month, data = appointmentMonthYear_tb, chart = 'u', multiply = 1000, main='Rate of appointments- u chart', ylab='Rate of appts in month unit', xlab='Month-Year', runvals = T, linevals = T)
qic(y = freq, x = month, data = appointmentMonthYear_tb, chart = 'run', main='Count of appointments- run chart', ylab='Count of appts in month unit', xlab='Month-Year', runvals = T, linevals = T)


## Attendance Date
attendanceMonthYear <- data.frame(attendanceMonthYear = na.omit(main_processed$Attendance.MonthYear))
attendanceMonthYear_tb <- data.frame(table(attendanceMonthYear$attendanceMonthYear))
colnames(attendanceMonthYear_tb) <- c("month", "freq")

#library(qcc)
qcc(attendanceMonthYear_tb$freq, type = "u", sizes = attendanceMonthYear_tb$freq, labels = attendanceMonthYear_tb$month, plot=T)
qcc(attendanceMonthYear_tb$freq, type = "c", labels = attendanceMonthYear_tb$month, plot=T)

#library(qicharts)
set.seed(7)
qic(y = freq, n = freq, x = month, data = attendanceMonthYear_tb, chart = 'u', multiply = 1000, main='Rate of attendances- u chart', ylab='Rate of attendances in month unit', xlab='Month-Year', runvals = T, linevals = T)
qic(y = freq, x = month, data = attendanceMonthYear_tb, chart = 'run', main='Count of attendances- run chart', ylab='Count of attendances in month unit', xlab='Month-Year', runvals = T, linevals = T)


## Cancellation
cancelMonthYear_tb <- data.frame(table(main_processed$No.Cancels, main_processed$appointmentMonthYear))
cancelledMonthYear_tb <- subset(cancelMonthYear_tb, cancelMonthYear_tb$Var1==1)
dnaMonthYear_tb <- subset(cancelMonthYear_tb, cancelMonthYear_tb$Var1==0)

cancelledMonthYear_tb$cancels <- cancelledMonthYear_tb$Var1
cancelledMonthYear_tb$month <- cancelledMonthYear_tb$Var2

dnaMonthYear_tb$dna <- dnaMonthYear_tb$Var1
dnaMonthYear_tb$month <- dnaMonthYear_tb$Var2

#library(qcc)
qcc(cancelledMonthYear_tb$Freq, type = "u", sizes = cancelledMonthYear_tb$Freq, labels = cancelledMonthYear_tb$month, plot=T)
qcc(cancelledMonthYear_tb$Freq, type = "c", labels = cancelledMonthYear_tb$month, plot=T)

qcc(dnaMonthYear_tb$Freq, type = "u", sizes = dnaMonthYear_tb$Freq, labels = dnaMonthYear_tb$month, plot=T)
qcc(dnaMonthYear_tb$Freq, type = "c", labels = dnaMonthYear_tb$month, plot=T)


#library(qicharts)
set.seed(7)
qic(y = Freq, n = Freq, x = month, data = cancelledMonthYear_tb, chart = 'u', main='Rate of cancellations- u chart', ylab='Rate of cancellations in appointment month unit', xlab='Month-Year', runvals = T, linevals = T)
qic(y = Freq, x = month, data = cancelledMonthYear_tb, chart = 'run', main='Count of cancellations- run chart', ylab='Count of cancellations in month unit', xlab='Month-Year', runvals = T, linevals = T)

set.seed(7)
qic(y = Freq, n = Freq, x = month, data = dnaMonthYear_tb, chart = 'u', main='Rate of DNAs- u chart', ylab='Percentage of DNAs in appointment month unit', xlab='Month-Year', runvals = T, linevals = T)
qic(y = Freq, x = month, data = dnaMonthYear_tb, chart = 'run', main='Count of DNAs- run chart', ylab='Count of DNAs in month unit', xlab='Month-Year', runvals = T, linevals = T)

hist(main_processed$daysDiff_attendanceAppoint)
boxplot(main_processed$daysDiff_attendanceAppoint,horizontal = T)

# ggplot(main_processed, aes(x = main_processed$daysDiff_attendanceAppoint)) +
#   geom_histogram(binwidth = 2, color = "black", aes(y=..density..,fill=..count..)) +
#   scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C") +
#   geom_density(color = "blue", fill = "lightblue", alpha = 0.5) +  # Add density curve
#   labs(x = "Difference of days between Attendance and Appointment date", y = "Density") +  # Customize axis labels
#   stat_function(fun=dnorm, color="red", args=list(mean=mean(main_processed$daysDiff_attendanceAppoint,na.rm = T), sd=sd(main_processed$daysDiff_attendanceAppoint,na.rm = T))) +
#   theme_minimal()  # Use a minimal theme


hist(main_processed$daysDiff_attendanceBooked)
boxplot(main_processed$daysDiff_attendanceBooked,horizontal = T)


```


# Correlation of outcome and predictor (nominal and nominal)
## Total No. correlation
```{r correlation, total}
 
 ## Record Type & Clinic relevance
#library(dplyr)
CrossTable(main_processed$Clinic.Type_recode, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Clinic.Code, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$NurseFlag, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referral.Source_recode, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
#CrossTable(main_processed$Referring.Hospital, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Consultant_recode, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Insurance.Scheme_recode, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Eligibility_recode, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Booking.Type_recode, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Hospital.Catchment_recode, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$bookedDay, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$bookedMonthYear, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)


## Record Type & Attendance relevance
CrossTable(main_processed$Attendance.Day, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Attendance.Month, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Attendance.Year, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Attendance.MonthYear, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Attendance.Type_recode, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

## Record Type & difference of days
bartlett.test(main_processed$daysDiff_attendanceAppoint,main_processed$Record.Type)
kruskal.test(main_processed$daysDiff_attendanceAppoint ~ main_processed$Record.Type, data=main_processed)
dunn_result <- dunn.test(main_processed$daysDiff_attendanceAppoint, g=main_processed$Record.Type, method="bonferroni")

bartlett.test(main_processed$daysDiff_attendanceBooked,main_processed$Record.Type)
kruskal.test(main_processed$daysDiff_attendanceBooked ~ main_processed$Record.Type, data=main_processed)
dunn_result <- dunn.test(main_processed$daysDiff_attendanceBooked, g=main_processed$Record.Type, method="bonferroni")


## Record Type & Patient characteristics relevance
CrossTable(main_processed$Gender, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Age.at.Attendance.Cat.HSE, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE) #age group
bartlett.test(main_processed$Age.at.Attendance,main_processed$Record.Type) # unequal variances
kruskal.test(main_processed$Age.at.Attendance ~ main_processed$Record.Type, data=main_processed)
dunn_result <- dunn.test(main_processed$Age.at.Attendance, g=main_processed$Record.Type, method="bonferroni") #run library(dunn.test) for this test

CrossTable(main_processed$Area.of.Residence_recode, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$addressDiff, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

```

## Cancellation & DNA correlation
* Clinic relevance: Consultant, Insurance scheme, Eligibility, Hospital catchment, Clinic type, Clinic code, Referral source, Booking Type
* Date relevance: booked Day, booked Month-Year, appointment Day, appointment Month-Year, daysDiff_AppointBooked
* Patient relevance: Gender, Age at attendance, Area of residence, address difference
* Cancellation group: Reason for cancellation, Rebooked indicator

```{r correlation, cancellation & DNA}
# cancellation (No.Cancels=1) & DNA (No.Cancels=0)

## clinic relevance
CrossTable(main_processed$Clinic.Type_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Clinic.Code, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$NurseFlag, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referral.Source_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
# CrossTable(main_processed$Referring.Hospital, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Consultant_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Insurance.Scheme_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Eligibility_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Booking.Type_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Hospital.Catchment_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$bookedDay, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

main_processed_subset <- subset(main_processed, year(main_processed$Booked.Date_new) > 2019) #create the subset for cancellations (from the hospital) have started since CoVID
CrossTable(main_processed_subset$bookedMonthYear, main_processed_subset$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$appointmentDay, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$appointmentMonthYear, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

## booking relevance
### difference between Booked and Appointment factors in Cancellation
CrossTable(main_processed$Rebooked.Indicator, main_processed$No.Cancels, digits=2, fisher=T, chisq=TRUE, expected=TRUE)

leveneTest(daysDiff_AppointBooked ~ as.factor(No.Cancels), data=main_processed) #leveneTest is Ha
t.test(daysDiff_AppointBooked ~ No.Cancels, var.equal=F, data=main_processed)

## patient characteristics relevance
CrossTable(main_processed$Gender, main_processed$No.Cancels, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Age.at.Attendance.Cat.HSE, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # age group
leveneTest(Age.at.Attendance ~ as.factor(No.Cancels), data=main_processed)
t.test(Age.at.Attendance ~ No.Cancels, var.equal=FALSE, data=main_processed) #leveneTest is Ha

CrossTable(main_processed$Area.of.Residence_recode, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # remove Na or impute where no residence
CrossTable(main_processed$addressDiff, main_processed$No.Cancels, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Reason.for.Cancellation_recode, main_processed$Cancellation.Group, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Cancellation.Group, main_processed$Rebooked.Indicator, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Reason.for.Cancellation_recode, main_processed$Rebooked.Indicator, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
```


# New Attendance correlation
* Clinic relevance: Consultant, Insurance scheme, Eligibility, Hospital catchment, Clinic type, Clinic code, Nurse flag, Referral source, Booking Type
* Date relevance: daysDiff_attendanceBooked daysDiff_AppointBooked
* Patient relevance: Gender, Age at attendance, Area of residence
* Cancellation group: Reason for cancellation, Rebooked indicator

```{r correlation, new attendance}
## clinic relevance
CrossTable(main_processed$Clinic.Type_recode, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Clinic.Code, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$NurseFlag, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referral.Source_recode, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
#CrossTable(main_processed$Referring.Hospital, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Consultant_recode, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Insurance.Scheme_recode, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Eligibility_recode, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Booking.Type_recode, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Hospital.Catchment_recode, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$bookedDay, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$bookedMonthYear, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)


## difference between New Attendance and booking
leveneTest(daysDiff_attendanceBooked ~ as.factor(No.New.Attendances), data=main_processed) #leveneTest is Ha
t.test(daysDiff_attendanceBooked ~ No.New.Attendances, var.equal=F, data=main_processed)

## patient characteristics relevance
CrossTable(main_processed$Gender, main_processed$No.New.Attendances, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Age.at.Attendance.Cat.HSE, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # age group
leveneTest(Age.at.Attendance ~ as.factor(No.New.Attendances), data=main_processed)
t.test(Age.at.Attendance ~ No.New.Attendances, var.equal=FALSE, data=main_processed) #leveneTest is Ha
wilcox.test(main_processed$Age.at.Attendance ~ main_processed$No.New.Attendances)

CrossTable(main_processed$Area.of.Residence_recode, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # remove Na or impute where no residence
CrossTable(main_processed$addressDiff, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
```
# Cancellation
```{r cancellation description}
# convert the non-numeric variables to numeric values (the lower the number, the higher frequency)
main_processed$Referral.Source_numeric <- mapvalues(main_processed$Referral.Source_recode, from = c("CLINIC","GP","WARD","BREAST CHECK","Elsew outside Mater","OTHER CONSULTANT","Elsew of Mater","EMERGENCY DEPT"), to = c(1:8))
main_processed$Clinic.Type_numeric <- mapvalues(main_processed$Clinic.Type_recode, from = c("SBC","TRI","MED","FRA","GEN"), to = c(1:5))
main_processed$Consultant_numeric <- mapvalues(main_processed$Consultant_recode, from = c("WALSSI","BARRYM","KELLM","STOKES","HEENEY"), to = c(1:5))
main_processed$Insurance.Scheme_numeric <- mapvalues(main_processed$Insurance.Scheme_recode, from = c("U","D","V","B","I","S","G","O","E","P","J","H","A","C","M"), to = c(1:15))
main_processed$Eligibility_numeric <- mapvalues(main_processed$Eligibility_recode, from = c("NON MEDICAL CARD","MEDICAL CARD","ELIGIBILITY UNKNOWN","EXEMPT","RESEARCH/NATIONAL PROG.","ACUTE UNCLASSIFIED","NON ACUTE UNCLASSIFIED"), to = c(1:7))
main_processed$Booking.Type_numeric <- mapvalues(main_processed$Booking.Type_recode, from = c("RETURN","NEW","WARD"), to = c(1:3))
main_processed$Hospital.Catchment_numeric <- mapvalues(main_processed$Hospital.Catchment_recode, from = c("National","Mater","Connolly","Beaumont","James","Vincents","Tallaght","International"), to = c(1:8))
main_processed$appointmentDay_numeric <- mapvalues(main_processed$appointmentDay, from = c("Tuesday","Friday","Monday","Thursday","Wednesday"), to = c(1:5))
main_processed$appointmentMonthYear_numeric <- mapvalues(main_processed$appointmentMonthYear, from = c("2021-08","2021-09","2021-11","2022-06","2021-07","2022-11","2022-03","2022-05","2023-08","2023-09","2022-02","2021-10","2022-08","2022-10","2022-09","2022-07","2020-10","2021-06","2023-05","2023-11","2020-11","2021-12","2022-01","2023-07","2020-03","2023-01","2022-04","2023-06","2020-09","2023-03","2021-03","2021-01","2023-10","2021-05","2023-04","2020-12","2023-02","2023-12","2021-04","2021-02","2020-07","2020-08","2022-12","2020-04","2020-06","2020-02","2020-05","2020-01"), to = c(1:48))
main_processed$bookedDay_numeric <- mapvalues(main_processed$bookedDay, from = c("Tuesday","Monday","Wednesday","Thursday","Friday","Saturday","Sunday"), to = c(1:7))
main_processed$bookedMonthYear_numeric <- mapvalues(main_processed$bookedMonthYear, from = c("2022-10","2021-09","2020-11","2020-08","2020-07","2021-08","2022-05","2020-09","2021-03","2020-01","2022-06","2020-02","2022-03","2020-10","2021-07","2022-07","2022-09","2021-10","2020-06","2021-04","2021-02","2023-05","2021-06","2023-01","2023-04","2023-03","2022-02","2021-05","2022-11","2021-11","2023-06","2023-07","2021-12","2022-04","2022-01","2023-02","2022-08","2023-08","2020-12","2022-12","2023-09","2023-11","2021-01","2023-10","2020-05","2020-03","2019-12","2020-04","2023-12","2019-11","2019-08","2019-07","2019-10","2019-09","2019-01","2019-02","2019-06","2019-03","2019-05","2019-04","2017-08"), to = c(1:61))
main_processed$Gender_numeric <- mapvalues(main_processed$Gender, from = c("Male","Female","Unknown"), to = c(1:3))
main_processed$Area.of.Residence_numeric <- mapvalues(main_processed$Area.of.Residence_recode, from = c("DUBLIN NTH","EASTERN & MIDLAND REGION (excl.Dublin,Meath)","Meath","NORTHERN WESTERN REGION","DUBLIN STH","SOUTHERN REGION","UNKNOWN","OUTSIDE IRELAND"), to = c(1:8))
main_processed$Rebooked.Indicator_numeric <- mapvalues(main_processed$Rebooked.Indicator, from = c("Yes","No"), to = c(1,0))
main_processed$Cancellation.Group_numeric <- mapvalues(main_processed$Cancellation.Group, from = c("Hospital","Patient","DNA","Validation"), to = c(1:4))
main_processed$Reason.for.Cancellation_numeric <- mapvalues(main_processed$Reason.for.Cancellation_recode, from = c("By Hospital","By Patient","No show","By Consultant/Advanced Nurse","By Patient-health conditions","By Covid"), to = c(1:6))

write.csv(main_processed[,c("Gender_numeric","Age.at.Attendance","Area.of.Residence_numeric","addressDiff","No.Cancels","Referral.Source_numeric","Clinic.Code","Clinic.Type_numeric","Consultant_numeric","Insurance.Scheme_numeric","Eligibility_numeric","Hospital.Catchment_numeric","Booking.Type_numeric","Rebooked.Indicator_numeric","Cancellation.Group_numeric","Reason.for.Cancellation_numeric","appointmentDay_numeric","appointmentMonthYear_numeric","bookedDay_numeric","bookedMonthYear_numeric","daysDiff_AppointBooked")],"breastDetails_cancel.csv")

main_processed_cancel <- read.csv("breastDetails_cancel.csv")
main_processed_cancel <- subset(main_processed_cancel, is.na(main_processed_cancel$No.Cancels)==F)

main_processed_cancel <- main_processed_cancel %>% mutate_if(is.character,as.numeric)
cor(main_processed_cancel, method = "spearman")
library(corrplot)
corrplot(cor(main_processed_cancel))

gg_cancellationGroup <- ggplot(main_processed,aes(x=Cancellation.Group)) +
  labs(x = "Cancellation Group") +
  scale_x_discrete(limits=c("Hospital","Patient","DNA","Validation")) +
  geom_bar(colour="blue", fill="lightblue")
gg_cancellationGroup

gg_cancelReason <- ggplot(main_processed,aes(x=Reason.for.Cancellation_recode)) +
  labs(x = "Reason for Cancellation") +
  scale_x_discrete(limits=c("By Hospital","By Patient","No show","By Consultant/Advanced Nurse","By Patient-health conditions","By Covid"), guide = guide_axis(n.dodge = 2)) +
  geom_bar(colour="blue", fill="lightblue")
gg_cancelReason

```

# Logistic Regression model
## Build baseline model of cancellations with predictors
* strong correlation between (Referral source and Booking type), (Clinic type and Booking type), (Consultant and Appointment day), (Consultant and Clinic code)
* moderate correlation between (Appointment day and Clinic code), (Clinic type and Clinic code), (Clinic type and Referral source), (Clinic type and No.Cancels), (Clinic type and Age)
* weak correlation between (Booking type and Age), (Booking type and Clinic code)

1. Model 1: No.Cancels ~ Clinic.Code + Clinic.Type_numeric + Referral.Source_numeric + Consultant_numeric + Insurance.Scheme_numeric + Eligibility_numeric + Booking.Type_numeric + Hospital.Catchment_numeric + Rebooked.Indicator_numeric + Reason.for.Cancellation_numeric
* AIC: 14333
* AUC: 0.91
* nagelkerke R squared: 0.6
* Confusion matrix: accuracy (0.84), precision (0.32), recall (0.1), prevalence (0.23), detection rate (0.18)

2. Model 2: No.Cancels ~ appointmentDay_numeric + appointmentMonthYear_numeric + bookedDay_numeric + bookedMonthYear_numeric + daysDiff_AppointBooked
* AIC: 26316
* AUC: 0.61
* nagelkerke R squared: 0.04
* Confusion matrix: accuracy (0.5), precision (0.77), recall (1), prevalence (0.23), detection rate (0)

3. Model 3: No.Cancels ~ Gender_numeric + Age.at.Attendance + Area.of.Residence_numeric + addressDiff
* AIC: 26518
* AUC: 0.59
* nagelkerke R squared: 0.028
* Confusion matrix: accuracy (0.5), precision (0.997), recall (0.77), prevalence (0.23), detection rate (0.002)

4. Model: No.Cancels ~ Gender_numeric + Age.at.Attendance + Area.of.Residence_numeric + addressDiff + Referral.Source_numeric + Clinic.Code + Clinic.Type_numeric + Consultant_numeric + Insurance.Scheme_numeric + Eligibility_numeric + Hospital.Catchment_numeric + Booking.Type_numeric + appointmentDay_numeric + appointmentMonthYear_numeric + bookedDay_numeric + bookedMonthYear_numeric
* AIC: 14031
* AUC: 0.91
* nagelkerke R squared: 0.61
* Confusion matrix: accuracy (0.81), precision (0.92), recall (0.88), prevalence (0.23), detection rate (0.17)

***
> 
+ AIC the smallest AIC provides the best model
+ AUC (area under the ROC curve) the closer to 1 the more correct predictions
+ predict: predict the values based on the previous data behaviors and thus by fitting that data to the model
+ plogis: Logistic Cumulative Distribution Function
+ Cox and Snell R square: Analysis_Survival_Cox Regression. The coefficients in a Cox regression relate to hazard; a positive coefficient indicates a worse prognosis and a negative coefficient indicates a protective effect of the variable with which it is associated
+ nagelkerke: a measure of goodness of fit in logistic regression analysis, a modification of the Cox and Snell R Square. Ranges [0,1], a common rule of thumb (<= 0.2: weak relationship, 0.2-0.4: moderate, >= 0.4: strong relationship).
+ confusionMatrix: matrix between actual and predicted values
+ vif = 1/(1-Ri^2) = 1/tolerance. Vif >4 or tolearance <0.25: multicollinearity might exist; vif >10 or tolerance <0.1: signigicant multicollinearity that needs to be corrected. Vif interpret if model has problems estimating the coefficient

_variables need to be recoded as numeric to run any regression_

```{r model of cancellation}

# Create training and test dataset samples 
sample <- sample(c(TRUE,FALSE), nrow(main_processed_cancel), replace=TRUE, prob=c(0.7,0.3))
train <- main_processed_cancel[sample, ]
test <- main_processed_cancel[!sample, ]

# Fit the logistic regression model
## with Clinic relevance
# map probabilities to log-odds, predicted probabilities are within the [0, 1] range
logmodel1 <- glm(formula = No.Cancels ~ Clinic.Code + Clinic.Type_numeric + Referral.Source_numeric + Consultant_numeric + Insurance.Scheme_numeric + Eligibility_numeric + Booking.Type_numeric + Hospital.Catchment_numeric + Rebooked.Indicator_numeric + Reason.for.Cancellation_numeric, family = binomial(link = "logit"), data = train)

summary(logmodel1)

exp(coefficients(logmodel1))

# Assess Model Fit
nagelkerke(logmodel1) #library(rcompanion)

# Calculate the VIF values of each variable to see if multicollinearity is a problem
vif(logmodel1) #library(regclass), library(car)

# Calculate probability of cancellation for each individual in test dataset
## Obtain predicted probabilities: continuous values (not factors)
predicted1 <- predict(logmodel1, test, type=c("response")) #library(rbenchmark)

## Find the optimal probability
# library(InformationValue)
# Warning in install.packages :
#   unable to access index for repository https://cran.rstudio.com/src/contrib:
#   cannot open URL 'https://cran.rstudio.com/src/contrib/PACKAGES'
# Warning in install.packages :
#   package ‘InformationValue’ is not available for this version of R

# optimal <-optimalCutoff(test$No.Cancels,predicted1)[1]
# optimal

## Convert predicted probabilities to binary predictions
binary_predicted1 <- ifelse(predicted1 >= 0.5, 1, 0) #threshold=0.5

## Create confusion matrix to show predictions compared to the actual defaults 
confusionMatrix(factor(binary_predicted1), factor(test$No.Cancels)) #library(caret), test$No.Cancels represents the actual response variable, binary_predictions are the binary predictions based on the threshold
confusion_matrix(logmodel1) #library(regclass)
confusion_matrix(logmodel1, test) #library(regclass)

## Calculate the sensitivity, specificity and total misclassification error if not shown in confusionMatrix
# sensitivity(factor(binary_predicted1), factor(test$No.Cancels))
# specificity(factor(binary_predicted1), factor(test$No.Cancels))
# misClassError(factor(binary_predicted1), factor(test$No.Cancels), threshold=optimal)

## Plot ROC curve which displays the % of True positivity predicted by the model as the prediction probability cutoff is [0,1]
# plot.roc(binary_predicted1, test$No.Cancels) #library(pROC) plot.ROC or plotROC

# lroc(logmodel1,graph=T) #for AUC but has a very loooong $diagnostic.table


## with Date relevance
logmodel2 <- glm(formula = No.Cancels ~ appointmentDay_numeric + appointmentMonthYear_numeric + bookedDay_numeric + bookedMonthYear_numeric + daysDiff_AppointBooked, family = binomial(link = "logit"), data = train)

summary(logmodel2)

# exp(coefficients(logmodel2))

nagelkerke(logmodel2)

# Obtain predicted probabilities: continuous values (not factors)
predicted2 <- predict(logmodel2, test, type=c("response")) #library(rbenchmark)
# Convert predicted probabilities to binary predictions
binary_predicted2 <- ifelse(predicted2 >= 0.5, 1, 0) #threshold=0.5
# Create confusion matrix, library(caret)
confusionMatrix(factor(binary_predicted2), factor(test$No.Cancels)) #test$No.Cancels represents the actual response variable, binary_predictions are the binary predictions based on the threshold
confusion_matrix(logmodel2) #library(regclass)
confusion_matrix(logmodel2, test) #library(regclass)

vif(logmodel2)


## with Patient relevance
logmodel3 <- glm(formula = No.Cancels ~ Gender_numeric + Age.at.Attendance + Area.of.Residence_numeric + addressDiff, family = binomial(link = "logit"), data = train)

summary(logmodel3)

# exp(coefficients(logmodel3))

nagelkerke(logmodel3)

# Obtain predicted probabilities: continuous values (not factors)
predicted3 <- predict(logmodel3, test, type=c("response")) #library(rbenchmark)
# Convert predicted probabilities to binary predictions
binary_predicted3 <- ifelse(predicted3 >= 0.5, 1, 0) #threshold=0.5
# Create confusion matrix, library(caret)
confusionMatrix(factor(binary_predicted3), factor(test$No.Cancels)) #test$No.Cancels represents the actual response variable, binary_predictions are the binary predictions based on the threshold
confusion_matrix(logmodel3) #library(regclass)
confusion_matrix(logmodel3, test) #library(regclass)

vif(logmodel3)


## with all predictors
logmodel <- glm(formula = No.Cancels ~ Gender_numeric + Age.at.Attendance + Area.of.Residence_numeric + addressDiff + Referral.Source_numeric + Clinic.Code + Clinic.Type_numeric + Consultant_numeric + Insurance.Scheme_numeric + Eligibility_numeric + Hospital.Catchment_numeric + Booking.Type_numeric + Rebooked.Indicator_numeric + Reason.for.Cancellation_numeric + appointmentDay_numeric + appointmentMonthYear_numeric + bookedDay_numeric + bookedMonthYear_numeric + daysDiff_AppointBooked, family = binomial(link = "logit"), data = train)

summary(logmodel)

exp(coefficients(logmodel))

nagelkerke(logmodel)

# Obtain predicted probabilities: continuous values (not factors)
predicted <- predict(logmodel, test, type=c("response")) #library(rbenchmark)
# Convert predicted probabilities to binary predictions
binary_predicted <- ifelse(predicted >= 0.5, 1, 0) #threshold=0.5
# Create confusion matrix, library(caret)
confusionMatrix(factor(binary_predicted), factor(test$No.Cancels)) #test$No.Cancels represents the actual response variable, binary_predictions are the binary predictions based on the threshold
confusion_matrix(logmodel) #library(regclass)
confusion_matrix(logmodel, test) #library(regclass)

vif(logmodel)

#library(epiDisplay), give plot plus AUC
logistic.display(logmodel)
lroc <- lroc(logmodel, title=TRUE, cex.main=1, cex.lab=1, col.lab="blue", cex.axis=1, 
lwd=3)
lroc1 <- lroc(logmodel1, add=TRUE, line.col="brown", lty=2)
lroc2 <- lroc(logmodel2, add=TRUE, line.col="darkgreen", lty=2)
lroc3 <- lroc(logmodel3, add=TRUE, line.col="purple", lty=2)
legend("bottomright",legend=c("all predictors", "clinic relevance", "date relevance", "patient relevance"),
        lty=1:2, col=c("red","brown","darkgreen","purple"), bg="white")
lrtest(logmodel,logmodel1) #library(lmtest)
lrtest(logmodel,logmodel2)
lrtest(logmodel,logmodel3)

```
# Comparing factors in models
```{r comparing models}
# anova(logmodel1, logmodel2, logmodel3, logmodel, test="Chisq") #run if there is other ML models
#library(survey)
regTermTest(logmodel,"Referral.Source_numeric")
regTermTest(logmodel,"Clinic.Code")
regTermTest(logmodel,"Clinic.Type_numeric")
regTermTest(logmodel,"Consultant_numeric")
regTermTest(logmodel,"Insurance.Scheme_numeric")
regTermTest(logmodel,"Eligibility_numeric")
regTermTest(logmodel,"Booking.Type_numeric")
regTermTest(logmodel,"Hospital.Catchment_numeric")
regTermTest(logmodel,"appointmentDay_numeric")
regTermTest(logmodel,"appointmentMonthYear_numeric")
regTermTest(logmodel,"bookedDay_numeric")
regTermTest(logmodel,"bookedMonthYear_numeric")
regTermTest(logmodel,"Gender_numeric")
# regTermTest(logmodel,"Age.at.Attendance")
regTermTest(logmodel,"Area.of.Residence_numeric")
regTermTest(logmodel,"addressDiff")

# Find feature/ variable importance from the model
varImp(logmodel) #library(caret)

# Report model outcome
library(report)
report(logmodel)
```


# Decision Tree model
## Model of cancellations with predictors
* strong correlation between (Referral source and Booking type), (Clinic type and Booking type), (Consultant and Appointment day), (Consultant and Clinic code)

```{r Decision Tree}
# Create training and test data

## Define the columns to exclude
cols_to_exclude <- c("Record.Type","NurseFlag","Medical.Record.Number","Attendance.Day","Attendance.MonthYear","Attendance.Date", "Attendance.Type_recode","Attendance.Year","Attendance.Month","Age.at.Attendance.Cat.HSE","Pathway.Number","Present.Address","Home.Address","Appointment.Date","Referring.Hospital","Booked.Date_new", "No.Attendances","No.New.Attendances","Cancellation.Group","Reason.for.Cancellation_recode","No.DNAs","daysDiff_attendanceAppoint","daysDiff_attendanceBooked")

## Subset the data frame by excluding the specified columns
main_processed_cancel_dt <- main_processed[, !names(main_processed) %in% cols_to_exclude]
main_processed_cancel_dt <- subset(main_processed_cancel_dt, is.na(main_processed_cancel_dt$No.Cancels)==F)

sample_dt <- sample(c(TRUE,FALSE), nrow(main_processed_cancel_dt), replace=TRUE, prob=c(0.7,0.3))
train_dt <- main_processed_cancel_dt[sample_dt, ]
test_dt <- main_processed_cancel_dt[!sample_dt, ]

# Train the model
X <- train_dt[, -which(names(train_dt) == "No.Cancels")]
y <- train_dt$No.Cancels

# Fit the decision tree model
cancel_dt <- rpart(y ~ ., data = X, method = "class",cp=0.05) #cp is the complexity parameter, split that not decreasing the overall lack of fit by a factor of cp is pruned, the default value of cp is 0.01
summary(cancel_dt)

# Plot the decision tree
rpart.plot(cancel_dt)
cancel_dt$variable.importance

# Predict the model with actual defaults in test data
cancel_pred_dt <- predict(cancel_dt, test_dt, type="class")
print(cancel_pred_dt)

# Evaluate the model
CrossTable(test_dt$No.Cancels, cancel_pred_dt,
           prop.chisq = FALSE, prob.c = FALSE, prop.r = FALSE,
           dnn = c('actual default','predicted default'))
table_cancel <- data.frame(value = as.factor(test_dt$No.Cancels), pred = cancel_pred_dt)
library(yardstick)
class_metrics <- metric_set(accuracy,precision,recall) #metric_set is function of library(yardstick)
class_metrics(table_cancel, truth = value, estimate = pred)

```

# Build baseline model of new attendances with predictors

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
