---
title: "breastPatientsDetail"
output: html_document
date: "2024-02-07"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Data Source: Mater Dive Port 7
# Load the file
```{r load working space, echo=FALSE}
## Load environment
rm(list = ls())
print(getwd())
setwd("C:/Users/User/Documents/RStudio/BreastDivePort_PatientsDetail")
print(getwd())

#library(dataQualityR) #package is not available for this version of R
library(stringr)
library(readr)
library(tidyverse) #table (frequency and proportion), install.packages("tidyverse")
library(tidyr) # CrossTable
library(dplyr) # CrossTable, install.packages("dplyr")
library(ggplot2)
library(qcc) #install
library(sqldf)
library(Rcmdr)  #continuous var, numSummary function, install.packages("Rcmdr") ##not running if in hurry
library(gridExtra)  #graph

library(Hmisc)  #Imputate missing values
#library(DMwR) #Compute the accuracy of imputation, but need to install the other packages

library(psych) #install, describeBy
library(moments)  #skewness,kurtosis
library(plyr)   #categorical var, install.packages("plyr")
library(pastecs) #stat.desc
library(semTools) 
library(car)  #leveneTest, Scatterplot matrix

library(dunn.test) #install, non-parametric post-hoc test after Kruskal-Wallis
library(stats)  #multiple regression lm() function, lapply function
library(PerformanceAnalytics) #chart.Correlation (Scatterplot)

library(caret) #classification & regression training, confusionMatrix, varImp
library(rbenchmark) #plogis
library(rcompanion) #nagelkerke
library(regclass) #vif
# library(C50)
library(AppliedPredictiveModeling) #Scatterplot, install.packages('AppliedPredictiveModeling')
# library(rpart)
# library(rpart.plot)
# library(pROC)  #cross validation
library(gmodels)  #Evaluate the model, CrossTable correlation, install.packages("gmodels")
library(epiDisplay) #plot with AUC for model prediction
library(survey) #comparing models, regTermTest
library(rattle)
library(RColorBrewer)

## Load file
main <- read.csv("BreastPatientsDetail_Clinic.csv")
main <- subset(main, Attendance.Year < 2024)
#sample <- main %>% group_by(main$Record.Type)
#samplePatients <- sample_frac(main,0.1,replace = F)

## Input variables
head(main)
View(main)
str(main)
summary(main)
allMissing = is.na(main)
counts = colSums(allMissing)
counts [counts>0]
#main_transform <- transform(main, score = as.numeric(score), sum_click = as.numeric(sum_click))
print(is.data.frame(main))


## Transforming data
# main_group <- main_processed %>% group_by(main_processed$Medical.Record.Number) #library(moments)
# main_group$freq_MRN_recode <- ifelse(count(main_group$Medical.Record.Number >= 34)==1,1,0)
#library(plyr)
main$Referral.Source_recode <- mapvalues(main$Referral.Source, from = c("C : CLINIC","G : GP","W : WARD","N : BREAST CHECK (NBSP)","H : OTHER HOSPITAL","S : SELF","O : OTHER CONSULTANT","R : ROOMS","A : EMERGENCY DEPT","B : HEALTH BOARD REFERRAL","F : FAMILY PLANNING","K : ED SMITHFIELD","V : VASCULAR LAB","X : HEALTH CENTRE REFERRAL","Q : REFERRED FROM CAWT INITIATIVE","D : DENTIST"), to = c("CLINIC","GP","WARD","BREAST CHECK (NBSP)","Elsewhere outside Mater","SELF","OTHER CONSULTANT","Elsewhere of Mater","EMERGENCY DEPT","Elsewhere outside Mater","Elsewhere of Mater","Elsewhere of Mater","Elsewhere of Mater","Elsewhere outside Mater","Elsewhere outside Mater","Elsewhere of Mater"))

main$Eligibility_recode <- mapvalues(main$Eligibility, from = c("02 : CAT 2 (NON MEDICAL CARD)","01 : CAT 1 (MEDICAL CARD)","08 : ELIGIBILITY UNKNOWN","12 : DAY CASE - EXEMPT STAT. CHG.","19 : STAFF EXEMPT-STATUTORY CHARGE","35 : INFECTIOUS OR SUSPECTED INFECT","11 : ANTI D/RESEARCH/TRIAL","23 : NATIONAL COLORECTAL SCREENING","16 : NTPF - EXEMPT STAT. CHG.","06 : NON EU-VISITOR","24 : DIABETIC RETINA TREATMENT","07 : RTA","17 : ARMY - EXEMPT STAT. CHG.","10 : UK/NI - EXEMPT STAT.CHG.","21 : THE GOVERNOR - PRISONERS","13 : LONG STAY - EXEMPT STAT. CHG.","25 : UKRAINIAN CITIZEN","20 : HAA CARD HEALTH AMENDMENT ACT","18 : EHIC - EXEMPT STAT. CHG.","05 : EU-VISITOR NO EHIC","26 : U16 EXEMPT STAT. CHARGE","30 : PENDING PATIENT DETAILS"), to = c("CAT 2 (NON MEDICAL CARD)","CAT 1 (MEDICAL CARD)","ELIGIBILITY UNKNOWN","EXEMPT","EXEMPT","ACUTE UNCLASSIFIED","RESEARCH/NATIONAL PROG.","RESEARCH/NATIONAL PROG.","EXEMPT","CAT 2 (NON MEDICAL CARD)","NON ACUTE UNCLASSIFIED","ACUTE UNCLASSIFIED","EXEMPT","EXEMPT","EXEMPT","EXEMPT","EXEMPT","RESEARCH/NATIONAL PROG.","EXEMPT","CAT 2 (NON MEDICAL CARD)","EXEMPT","CAT 2 (NON MEDICAL CARD)"))

location_out_IRL <- c("33","35","36") # define the vector of codes for outside Ireland
n <- length(main$Area.of.Residence) # find the length of area of residence vector
location_out_IRL <- rep(location_out_IRL, length.out = n) # repeat the values of location_out_IRL n times

area_recode <- c("32","23") # define the vector of codes for area recode
n <- length(substring(main$Area.of.Residence,0,2)) # find the length of area of residence vector
area_recode <- rep(area_recode, length.out = n) # repeat the values of location_out_IRL n times

dublin_nth <- c("0100","0101","0103","0105","0107","0109","0111","0113","0115","0117")
dublin_sth <- c("0200","0202","0204","0206","0208","0210","0212","0214","0216","0218""0220","0222","0224")
outside_irl <- c("3303","3310","3350","3501","3600")
df <- df %>% 
 mutate(variable = case_when(
  value %in% dublin_nth ~ "DUBLIN NTH",
  value %in% dublin_sth ~ "DUBLIN STH",
  value %in% outside_irl ~ "OUTSIDE IRELAND",
  value == "3200" ~ "Co.Meath",
  TRUE ~ "Other counties"
))
head (df,10)

main$Area.of.Residence_recode <- ifelse(substring(main$Area.of.Residence,0,2) == area_recode,"Co.MEATH",ifelse(substring(main$Area.of.Residence,0,2)=="01","DUBLIN NTH", ifelse(substring(main$Area.of.Residence,0,2)=="02","DUBLIN STH", ifelse(substring(main$Area.of.Residence,0,2)=="0000 : UNKNOWN","UNKNOWN", ifelse(substring(main$Area.of.Residence,0,2)==location_out_IRL,"OUTSIDE IRELAND","OTHER COUNTIES")))))

main$Booking.Type <- 

main$Referring.Hospital <-

### Date calculation from Appointment/ Booking to Attendance
main$Attendance.Date <- as.Date(main$Attendance.Date, format="%d/%m/%y")

main$Appointment.Date <- as.POSIXct(main$Appointment.Date...Time,format="%Y%m%d %H:%M:%S",tz=Sys.timezone())
main$Appointment.Date <- as.Date(main$Appointment.Date, format="%d/%m/%y")
main$appointmentMonthYear <- substring(main$Appointment.Date,0,7)
main$appointmentDay <- weekdays(main$Appointment.Date)

main$Booked.Date <- as.POSIXct(main$Booked.Date,format="%Y/%m/%d",tz=Sys.timezone())
main$Booked.Date_new <- as.Date(main$Booked.Date, format="%d/%m/%y")
main$bookedMonthYear <- substring(main$Booked.Date,0,7)
main$bookedDay <- weekdays(main$Booked.Date)

main$daysDiff_attendanceAppoint <- difftime(main$Appointment.Date,main$Attendance.Date,units="days")
main$daysDiff_attendanceBooked <- difftime(main$Booked.Date,main$Attendance.Date,units="days")
main$daysDiff_AppointBooked <- difftime(main$Appointment.Date,main$Booked.Date,units="days")

main$addressDiff <- ifelse(main$Present.Address == main$Home.Address, 0, 1)

main$Rebooked.Indicator <- main$Rebooked.Indicator..HIS.

write.csv(main[,c("Record.Type","Clinic.Code","Clinic.Type","NurseFlag","Medical.Record.Number","Gender","Attendance.Day","Attendance.MonthYear","Attendance.Date","Attendance.Type.Description","Attendance.Year","Attendance.Month","Referral.Source_recode","Consultant","Insurance.Scheme","Eligibility_recode","Age.at.Attendance","Age.at.Attendance.Cat.HSE","Pathway.Number","Present.Address","Home.Address","Appointment.Date","appointmentMonthYear","appointmentDay","Area.of.Residence_recode","Referring.Hospital","Booking.Type","Booked.Date_new","bookedMonthYear","bookedDay","Cancellation.Group","Reason.for.Cancellation.Desc","Rebooked.Indicator","Hospital.Catchment","No.Attendances","No.New.Attendances","No.Cancels","No.DNAs","daysDiff_attendanceAppoint","daysDiff_attendanceBooked","daysDiff_AppointBooked","addressDiff")],"breastDetails.csv")

main_processed <- read.csv("breastDetails.csv")

```


# Inspecting data
```{r inspection}

str(main_processed)
summary(main_processed)
head(main_processed)
any(is.na(main_processed))
colSums(is.na(main_processed))
```


# Creating descriptive statistics
```{r descriptive statistics}

## Outcome description
unique(main_processed$Record.Type)
cbind(sort(table(main_processed$Record.Type=="Attendance"),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Record.Type=="Attendance")),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$Record.Type=="Cancellation"),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Record.Type=="Cancellation")),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$Record.Type=="DNA"),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Record.Type=="DNA")),5),deparse.level=2,decreasing=TRUE))
cbind(sort(table(main_processed$Record.Type=="Future Booking"),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Record.Type=="Future Booking")),5),deparse.level=2,decreasing=TRUE))
table(main_processed$Record.Type,main_processed$Attendance.MonthYear)

## Predictor description (categorical)
### Data frame for nominal/ binary values of variables
unique(main_processed$Clinic.Code)
unique(main_processed$Clinic.Type)
unique(main_processed$NurseFlag)
#unique(main_processed$Medical.Record.Number)
unique(main_processed$Gender)
unique(main_processed$Attendance.Day)
unique(main_processed$Attendance.MonthYear)
unique(main_processed$Attendance.Type.Description)
unique(main_processed$Attendance.Year)
unique(main_processed$Attendance.Month)
unique(main_processed$Referral.Source_recode)
unique(main_processed$Consultant)
unique(main_processed$Insurance.Scheme)
unique(main_processed$Eligibility_recode)
unique(main_processed$Age.at.Attendance.Cat.HSE)
unique(main_processed$Area.of.Residence_recode)
unique(main_processed$Referring.Hospital)
unique(main_processed$Booking.Type)
unique(main_processed$Cancellation.Group)
unique(main_processed$Reason.for.Cancellation.Desc)
unique(main_processed$Rebooked.Indicator)
unique(main_processed$Hospital.Catchment)


options(digits=2)
cbind(sort(table(main_processed$Clinic.Type),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Clinic.Type)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Clinic.Code),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Clinic.Code)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$NurseFlag),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$NurseFlag)),5),deparse.level=2,decreasing=TRUE))

head(cbind(sort(table(main_processed$Medical.Record.Number),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Medical.Record.Number)),5),deparse.level=2,decreasing=TRUE))) #group freq of MRN at 34

cbind(sort(table(main_processed$Referral.Source_recode),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Referral.Source_recode)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Referring.Hospital),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Referring.Hospital)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Consultant),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Consultant)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Insurance.Scheme),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Insurance.Scheme)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Eligibility_recode),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Eligibility_recode)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Booking.Type),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Booking.Type)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Attendance.Type.Description),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Attendance.Type.Description)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Attendance.Day),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Attendance.Day)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Attendance.MonthYear),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Attendance.MonthYear)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Attendance.Month),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Attendance.Month)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Attendance.Year),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Attendance.Year)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$No.Attendances),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$No.Attendances)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$No.New.Attendances),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$No.New.Attendances)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$No.Cancels),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$No.Cancels)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Cancellation.Group),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Cancellation.Group)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Reason.for.Cancellation.Desc),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Reason.for.Cancellation.Desc)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Rebooked.Indicator),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Rebooked.Indicator)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Hospital.Catchment),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Hospital.Catchment)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Gender),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Gender)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Area.of.Residence_recode),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Area.of.Residence_recode)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$addressDiff),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$addressDiff)),5),deparse.level=2,decreasing=TRUE))

cbind(sort(table(main_processed$Age.at.Attendance.Cat.HSE),decreasing=TRUE),sort(100*round(prop.table(table(main_processed$Age.at.Attendance.Cat.HSE)),5),deparse.level=2,decreasing=TRUE))


## Predictor description (numeric)
summary(main_processed$Age.at.Attendance)
stat.desc(main_processed$Age.at.Attendance, basic=F)
skew(main_processed$Age.at.Attendance)
kurtosis(main_processed$Age.at.Attendance)

summary(main_processed$daysDiff_attendanceAppoint)
stat.desc(main_processed$daysDiff_attendanceAppoint, basic=F)
skew(main_processed$daysDiff_attendanceAppoint)
kurtosis(main_processed$daysDiff_attendanceAppoint)

summary(main_processed$daysDiff_attendanceBooked)
stat.desc(main_processed$daysDiff_attendanceBooked, basic=F)
skew(main_processed$daysDiff_attendanceBooked)
kurtosis(main_processed$daysDiff_attendanceBooked)

```


```{r plot, echo=FALSE}
# Creating graphs
hist(main_processed$Age.at.Attendance)
boxplot(main_processed$Age.at.Attendance,horizontal = T)

set.seed(123)
## Create the histogram with ggplot
gg <- ggplot(main_processed, aes(x=main_processed$Age.at.Attendance))
gg <- gg + labs(x = "Age at Attendance")
gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density..,fill=..count..))
gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
gg <- gg + stat_function(fun=dnorm, color="red", args=list(mean=mean(main_processed$Age.at.Attendance,na.rm = T), sd=sd(main_processed$Age.at.Attendance,na.rm = T)))
gg

hist(main_processed$daysDiff_attendanceAppoint)
boxplot(main_processed$daysDiff_attendanceAppoint,horizontal = T)

# ggplot(main_processed, aes(x = main_processed$daysDiff_attendanceAppoint)) +
#   geom_histogram(binwidth = 2, color = "black", aes(y=..density..,fill=..count..)) +
#   scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C") +
#   geom_density(color = "blue", fill = "lightblue", alpha = 0.5) +  # Add density curve
#   labs(x = "Difference of days between Attendance and Appointment date", y = "Density") +  # Customize axis labels
#   stat_function(fun=dnorm, color="red", args=list(mean=mean(main_processed$daysDiff_attendanceAppoint,na.rm = T), sd=sd(main_processed$daysDiff_attendanceAppoint,na.rm = T))) +
#   theme_minimal()  # Use a minimal theme

hist(main_processed$daysDiff_attendanceBooked)
boxplot(main_processed$daysDiff_attendanceBooked,horizontal = T)

# count_clinic.type <- sort(table(breast_attendance$Clinic.Type,breast_attendance$Year),decreasing=TRUE)
# 
# bp_clinicType <- barplot(count_clinic.type, main="Clinic type by year",
#                          xlab="Number of Attendance", col=c("blue","green"),
#                          legend = rownames(count_clinic.type),beside = TRUE)
# count_clinic.type2019 <- table(breast2019$Clinic.Type)
# bp2019_clinicType <- barplot(count_clinic.type2019)
# count_clinic.type2020 <- table(breast2020$Clinic.Type)
# barplot(count_clinic.type2020)
# count_clinic.type2021 <- table(breast2021$Clinic.Type)
# barplot(count_clinic.type2021)
# count_clinic.type2022 <- table(breast2022$Clinic.Type)
# barplot(count_clinic.type2022)
# count_clinic.type2023 <- table(breast2023$Clinic.Type)
# barplot(count_clinic.type2023)
# grid.arrange(count_clinic.type,count_clinic.type2023,count_clinic.type2022,count_clinic.type2021,count_clinic.type2020,count_clinic.type2019,ncol=1)
# 
# 

# qqnorm(breast2023_sub$Age.at.Attendance)
# qqline(breast2023_sub$Age.at.Attendance, col=2)
# boxplot(breast2023_sub$Age.at.Attendance)
# skewness((breast2023_sub$Age.at.Attendance),na.rm = T)
# kurtosis((breast2023_sub$Age.at.Attendance),na.rm = T)
# 
# cutoffabove_breast <- 50 + 1.5*IQR(breast2023_sub$Age.at.Attendance,na.rm = T)
# cutoffbelow_breast <- 50 - 1.5*IQR(breast2023_sub$Age.at.Attendance,na.rm = T)
# breast2023_sub <- subset(breast2023_sub, Age.at.Attendance <= cutoffabove_breast & Age.at.Attendance >= cutoffbelow_breast)
# summary(breast2023_sub$Age.at.Attendance)
# q1 <- qplot(x = Age.at.Attendance, data = breast2023_sub, colour=I("red"), fill=I("white")) +
#   theme_bw() +
#   theme(
#     plot.background = element_blank()
#     ,panel.grid.major = element_blank()
#     ,panel.grid.minor = element_blank()
#     ,panel.border = element_blank()
#   ) +
#   theme(axis.line = element_line(color = 'red'))
# q2 <- qplot(x = Age.at.Attendance, data = breast2023_sub, colour=I("blue"), fill=I("white")) + 
#   scale_x_continuous(limits = c(0,100)) +
#   theme_bw() +
#   theme(
#     plot.background = element_blank()
#     ,panel.grid.major = element_blank()
#     ,panel.grid.minor = element_blank()
#     ,panel.border = element_blank()
#   ) +
#   theme(axis.line = element_line(color = 'blue'))
# grid.arrange(q1, q2, ncol=1)
# 
# # Test normality of numeric variables
# set.seed(0)
# breast_attendance_sub <- breast_attendance[1:5000,] #in shapiro.test, sample size must be between 3 and 5000
# 
# shapiro.test(breast_attendance_sub$X)
# 
# shapiro.test(breast_attendance_sub$Age.at.Attendance)
# skewness((breast_attendance_sub$Age.at.Attendance),na.rm=T)
# kurtosis((breast_attendance_sub$Age.at.Attendance),na.rm=T)
# 
# shapiro.test(breast_attendance_sub$daysDiff)
# skewness((breast_attendance_sub$daysDiff),na.rm=T)
# kurtosis((breast_attendance_sub$daysDiff),na.rm=T)
# 
# pareto.chart(breast_attendance$Referral.Source)
```


# Correlation of outcome and predictor (nominal and nominal)
## Total correlation
```{r correlation, total}
 
 ## Record Type & Clinic relevance
CrossTable(main_processed$Clinic.Type, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Clinic.Code, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$NurseFlag, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referral.Source, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referring.Hospital, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Consultant, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Insurance.Scheme, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Eligibility, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Booking.Type, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Hospital.Catchment, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

## Record Type & Attendance relevance
CrossTable(main_processed$Attendance.Day, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Attendance.Month, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Attendance.Year, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Attendance.MonthYear, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Attendance.Type.Description, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

### & difference of attendance days
bartlett.test(main_processed$daysDiff_attendanceAppoint,main_processed$Record.Type)
kruskal.test(main_processed$daysDiff_attendanceAppoint ~ main_processed$Record.Type, data=main_processed)
dunn_result <- dunn.test(main_processed$daysDiff_attendanceAppoint, g=main_processed$Record.Type, method="bonferroni")

bartlett.test(main_processed$daysDiff_attendanceBooked,main_processed$Record.Type)
kruskal.test(main_processed$daysDiff_attendanceBooked ~ main_processed$Record.Type, data=main_processed)
dunn_result <- dunn.test(main_processed$daysDiff_attendanceBooked, g=main_processed$Record.Type, method="bonferroni")

## Record Type & Patient characteristics relevance
CrossTable(main_processed$Gender, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Age.at.Attendance.Cat.HSE, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE) #age group
bartlett.test(main_processed$Age.at.Attendance,main_processed$Record.Type) # unequal variances
kruskal.test(main_processed$Age.at.Attendance ~ main_processed$Record.Type, data=main_processed)
dunn_result <- dunn.test(main_processed$Age.at.Attendance, g=main_processed$Record.Type, method="bonferroni") #run library(dunn.test) for this test

CrossTable(main_processed$Area.of.Residence, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$addressDiff, main_processed$Record.Type, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
```

## Cancellation correlation
```{r correlation, cancellation}

## clinic relevance
CrossTable(main_processed$Clinic.Type, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Clinic.Code, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$NurseFlag, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referral.Source, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referring.Hospital, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Consultant, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Insurance.Scheme, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Eligibility, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Booking.Type, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Hospital.Catchment, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

## attendance info in previous attendance
### days difference between Attendance and Appointment/Booked in Cancellation
leveneTest(daysDiff_attendanceAppoint ~ as.factor(No.Cancels), data=main_processed) #leveneTest is Ha
t.test(daysDiff_attendanceAppoint ~ No.Cancels, var.equal=FALSE, data=main_processed)

leveneTest(daysDiff_attendanceBooked ~ as.factor(No.Cancels), data=main_processed) #leveneTest is Ha
t.test(daysDiff_attendanceBooked ~ No.Cancels, var.equal=FALSE, data=main_processed)

## patient characteristics relevance
CrossTable(main_processed$Gender, main_processed$No.Cancels, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Age.at.Attendance.Cat.HSE, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # age group
leveneTest(Age.at.Attendance ~ as.factor(No.Cancels), data=main_processed)
t.test(Age.at.Attendance ~ No.Cancels, var.equal=FALSE, data=main_processed) #leveneTest is Ha

#CrossTable(main_processed$Area.of.Residence, main_processed$No.Cancels, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # remove Na or impute where no residence
CrossTable(main_processed$addressDiff, main_processed$No.Cancels, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Reason.for.Cancellation.Desc, main_processed$Cancellation.Group, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Cancellation.Group, main_processed$Rebooked.Indicator, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Reason.for.Cancellation.Desc, main_processed$Rebooked.Indicator, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
```


# Do not attend correlation
```{r correlation, DNA}
## clinic relevance
CrossTable(main_processed$Clinic.Type, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Clinic.Code, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$NurseFlag, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referral.Source, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referring.Hospital, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Consultant, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Insurance.Scheme, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Eligibility, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Booking.Type, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Hospital.Catchment, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

## attendance info in previous attendance
### days difference between Attendance and Appointment/Booked
leveneTest(daysDiff_attendanceAppoint ~ as.factor(No.DNAs), data=main_processed) #leveneTest is Ha
t.test(daysDiff_attendanceAppoint ~ No.DNAs, var.equal=FALSE, data=main_processed)

leveneTest(daysDiff_attendanceBooked ~ as.factor(No.DNAs), data=main_processed) #leveneTest is Ha
t.test(daysDiff_attendanceBooked ~ No.DNAs, var.equal=FALSE, data=main_processed)

## patient characteristics relevance
CrossTable(main_processed$Gender, main_processed$No.DNAs, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Age.at.Attendance.Cat.HSE, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # age group
leveneTest(Age.at.Attendance ~ as.factor(No.DNAs), data=main_processed)
t.test(Age.at.Attendance ~ No.DNAs, var.equal=FALSE, data=main_processed) #leveneTest is Ha

#CrossTable(main_processed$Area.of.Residence, main_processed$No.DNAs, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # remove Na or impute where no residence
CrossTable(main_processed$addressDiff, main_processed$No.DNAs, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)
```


# Attendance correlation
```{r correlation, attendance}
## clinic relevance
CrossTable(main_processed$Clinic.Type, main_processed$No.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Clinic.Code, main_processed$No.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$NurseFlag, main_processed$No.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referral.Source, main_processed$No.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referring.Hospital, main_processed$No.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Consultant, main_processed$No.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Insurance.Scheme, main_processed$No.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Eligibility, main_processed$No.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Booking.Type, main_processed$No.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Hospital.Catchment, main_processed$No.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

## attendance info in previous attendances
### days difference between Attendance and Appointment/Booked in Attendances: just one value in daysDiff, can't proceed statistical test

## patient characteristics relevance
CrossTable(main_processed$Gender, main_processed$No.Attendances, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Age.at.Attendance.Cat.HSE, main_processed$No.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # age group
### Correlation of outcome and predictor (nominal and scale/ ordinal) # t-test if scale is parametric (normal distribution), wilcox if scale is nonparametric (not normal distribution)
leveneTest(Age.at.Attendance ~ as.factor(No.Attendances), data=main_processed)
t.test(Age.at.Attendance ~ No.Attendances, var.equal=TRUE, data=main_processed) #leveneTest is Ho

#CrossTable(main_processed$Area.of.Residence, main_processed$No.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # remove Na or impute where no residence
CrossTable(main_processed$addressDiff, main_processed$No.Attendances, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)
```


# New Attendance correlation
```{r correlation, new attendance}
## clinic relevance
CrossTable(main_processed$Clinic.Type, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Clinic.Code, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$NurseFlag, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referral.Source, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Referring.Hospital, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Consultant, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Insurance.Scheme, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Eligibility, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Booking.Type, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
CrossTable(main_processed$Hospital.Catchment, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)

## attendance info in previous attendances
### days difference between New Attendance and Appointment/Booked: just one level of value

## patient characteristics relevance
CrossTable(main_processed$Gender, main_processed$No.New.Attendances, digits=2, fisher=TRUE, chisq=TRUE, expected=TRUE)

CrossTable(main_processed$Age.at.Attendance.Cat.HSE, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # age group
leveneTest(Age.at.Attendance ~ as.factor(No.New.Attendances), data=main_processed)
t.test(Age.at.Attendance ~ No.New.Attendances, var.equal=FALSE, data=main_processed) #leveneTest is Ha
wilcox.test(main_processed$Age.at.Attendance ~ main_processed$No.New.Attendances)

CrossTable(main_processed$Area.of.Residence, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE) # remove Na or impute where no residence
CrossTable(main_processed$addressDiff, main_processed$No.New.Attendances, digits=2, fisher=F, chisq=TRUE, expected=TRUE)
```

# Build baseline model of cancellations with predictors
## the smallest AIC provides the best model
## AUC (area under the ROC curve) measures the entire two-dimensional area underneath the entire ROC curve (receiver operating characteristic curve is a graph showing the performance of a classfication model at all classification thresholds). AUC ranges [0,1], is the probability that the model ranks a random positive example more highly than a random negative, the closer to 1 the more correct predictions
## plogis
## nagelkerke
## confusionMatrix
## vif >= 5-10 is large: model has problems estimating the coefficient (but doesn't degrade the quality of predictions), if vif >/(1-r^2) then that predictor is more related to the other predictors than it is to the response

```{r model of cancellation}
## with Clinic relevance
logmodel1 <- glm(formula = No.Cancels ~ Clinic.Code + Clinic.Type + Consultant + Insurance.Scheme + Hospital.Catchment, family = binomial(link = "logit"), data = main_processed) #run again after recode Referral.Source, Eligibility, Referring Hospital, Booking Type
summary(logmodel1)

exp(coefficients(logmodel1))
# predicted1 <- plogis(predict(logmodel1, main_processed)) #library(rbenchmark)
nagelkerke(logmodel1) #library(rcompanion)
# confusionMatrix(main_processed$No.Cancels, predicted1, thresholder=0.8) #library(caret)
# sensitivity(main_processed$No.Cancels, predicted1, thresholder=0.8)
# specificity(main_processed$No.Cancels, predicted1, thresholder=0.8)
# vif(logmodel1) #library(regclass)

lroc(logmodel1, graph=TRUE) #library(epiDisplay), give plot plus AUC


## with Date relevance
logmodel2 <- glm(formula = No.Cancels ~ appointmentDay + appointmentMonthYear + bookedDay + bookedMonthYear, family = binomial(link = "logit"), data = main_processed)
summary(logmodel2)

exp(coefficients(logmodel2))
# predicted2 <- plogis(predict(logmodel2, main_processed))
nagelkerke(logmodel2)
# confusionMatrix(main_processed$No.Cancels, predicted2, thresholder=0.8)
# sensitivity(main_processed$No.Cancels, predicted2, thresholder=0.8)
# specificity(main_processed$No.Cancels, predicted2, thresholder=0.8)
# vif(logmodel2)

lroc(logmodel2, graph=TRUE)

## with Patient relevance
logmodel3 <- glm(formula = No.Cancels ~ Gender + Age.at.Attendance + Area.of.Residence + addressDiff, family = binomial(link = "logit"), data = main_processed)
summary(logmodel3)

exp(coefficients(logmodel3))
# predicted3 <- plogis(predict(logmodel3, main_processed))
nagelkerke(logmodel3)
# confusionMatrix(main_processed$No.Cancels, predicted3, thresholder=0.8)
# sensitivity(main_processed$No.Cancels, predicted3, thresholder=0.8)
# specificity(main_processed$No.Cancels, predicted3, thresholder=0.8)
# vif(logmodel3)

lroc(logmodel3, graph=TRUE)

## with all predictors
logmodel <- glm(formula = No.Cancels ~ Gender + Age.at.Attendance + Area.of.Residence + addressDiff + Clinic.Code + Clinic.Type + Consultant + Insurance.Scheme + Hospital.Catchment + appointmentDay + appointmentMonthYear + bookedDay + bookedMonthYear, family = binomial(link = "logit"), data = main_processed)
summary(logmodel)

exp(coefficients(logmodel))
# predicted <- plogis(predict(logmodel, main_processed))
nagelkerke(logmodel)
# confusionMatrix(main_processed$No.Cancels, predicted, thresholder=0.8)
# sensitivity(main_processed$No.Cancels, predicted, thresholder=0.8)
# specificity(main_processed$No.Cancels, predicted, thresholder=0.8)
# vif(logmodel)

lroc(logmodel, graph=TRUE)

```
# Comparing models
```{r comparing models}
anova(logmodel1, logmodel2, logmodel3, logmodel, test="Chisq")
#library(survey)
regTermTest(logmodel,"Clinic.Code")
regTermTest(logmodel,"Clinic.Type")
regTermTest(logmodel,"Consultant")
# regTermTest(logmodel,"Eligibility")
# regTermTest(logmodel,"Booking.Type")
#regTermTest(logmodel,"Hospital.Catchment")
regTermTest(logmodel,"appointmentDay")
regTermTest(logmodel,"appointmentMonthYear")
regTermTest(logmodel,"bookedDay")
regTermTest(logmodel,"bookedMonthYear")
regTermTest(logmodel,"Gender")
regTermTest(logmodel,"Age.at.Attendance")
regTermTest(logmodel,"Area.of.Residence")
regTermTest(logmodel,"addressDiff")

#library(caret)
varImp(logmodel)
```

# Build baseline model of DNA with predictors, the smallest AIC provides the best model
# Build baseline model of attendances with predictors, the smallest AIC provides the best model
# Build baseline model of new attendances with predictors, the smallest AIC provides the best model

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
